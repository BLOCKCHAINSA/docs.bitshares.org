**************************
Setting up private testnet
**************************

Creating data directory
#######################

We will a new data directory for our witness as follows:

.. code-block:: sh

    programs/witness_node/witness_node --data-dir data/my-blockprod --genesis-json my-genesis.json

The ``data/my-blockprod`` directory does not exist, it will be created
by the witness node.

Several messages will go to the console.  When you see messages like these:::

    3501235ms th_a       main.cpp:165                  main                 ] Started witness node on a chain with 0 blocks.
    3501235ms th_a       main.cpp:166                  main                 ] Chain ID is cf307110d029cb882d126bf0488dc4864772f68d9888d86b458d16e6c36aa74b

the initialization is complete, and you can press Ctrl+C to quit the witness node.
(Note:  Initialization will complete nearly instantaneously with the tiny
example genesis, unless you added a ton of balances.)

The reason for running the witness node:  It tells us the chain ID,
and it initializes the ``data/my-blockprod`` directory.

Starting block production
#########################

Open ``data/my-blockprod/config.ini`` in your favorite text editor,
and set the following settings, uncommenting them if necessary:::

    p2p-endpoint = 127.0.0.1:11010
    rpc-endpoint = 127.0.0.1:11011

    genesis-json = my-genesis.json

    private-key = ["GPH6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV","5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3"]

    witness-id = "1.6.1"
    witness-id = "1.6.2"
    witness-id = "1.6.3"
    witness-id = "1.6.4"
    witness-id = "1.6.5"
    witness-id = "1.6.6"
    witness-id = "1.6.7"
    witness-id = "1.6.8"
    witness-id = "1.6.9"
    witness-id = "1.6.10"
    witness-id = "1.6.11"

This authorizes the ``witness_node`` to produce blocks on behalf of the
listed ``witness-id``'s, and specifies the private key needed to sign
those blocks.  Normally each witness would be on a different node, but
for the purposes of this testnet, we will start out with all witnesses
signing blocks on a single node.

Now run ``witness_node`` again:

.. code-block:: sh

    programs/witness_node/witness_node --data-dir data/my-blockprod --enable-stale-production

Note that we need not specify ``genesis.json`` on the command line, since
we now specify it in the config file.  The ``--enable-stale-production``
flag tells the ``witness_node`` to produce on a chain with zero blocks or
very old blocks.  We specify the ``--enable-stale-production`` parameter
on the command line as we will not normally need it (although it can
also be specified in the config file).

Subsequent runs which connect to an existing witness node over the p2p
network, or which get blockchain state from an existing data directory,
need not have the ``--enable-stale-production`` flag.

Obtaining the chain ID
######################

Each wallet is specifically associated with a single chain, specified
by its chain ID.  This is to protect the user from e.g. unintentionally
using a testnet wallet on the real chain.

The chain ID is printed at witness node startup.  It can also be
obtained by using the API to query a running witness node with the
``get_chain_properties`` API call:

.. code-block:: sh

    curl --data '{"jsonrpc": "2.0", "method": "get_chain_properties", "params": [], "id": 1}' http://127.0.0.1:11011/rpc && echo

This ``curl`` command will return a short JSON object including the ``chain_id``.

