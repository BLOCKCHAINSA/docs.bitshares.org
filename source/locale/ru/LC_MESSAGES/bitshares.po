# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Fabian Schuh
# This file is distributed under the same license as the Graphene Technical
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Graphene Technical Documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-04-14 11:20+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/bitshares/developers/bsips.rst:3
msgid "BitShares Improvement Proposal"
msgstr ""

#: ../../source/bitshares/developers/bsips.rst:5
msgid ""
"BSIP stands for BitShares Improvement Proposal but can also seen as an "
"improvement *protocol*. A BSIP is a design document providing information"
" to the BitShares community, or describing a new feature for BitShares or"
" its processes or environment. The BSIP should provide a concise "
"technical specification of the feature or the idea and a rationale for "
"it. It may not only describe technical improvements but also document "
"*best-practises* and recommendations."
msgstr ""

#: ../../source/bitshares/developers/bsips.rst:12
msgid ""
"We intend BSIPs to be the primary mechanisms for proposing new features, "
"for collecting community input on an issue, and for documenting the "
"design decisions that have gone into BitShares. The BSIP author is "
"responsible for building consensus within the community and documenting "
"dissenting opinions."
msgstr ""

#: ../../source/bitshares/developers/bsips.rst:17
msgid ""
"Because the BSIPs are maintained as text files in a versioned repository,"
" their revision history is the historical record of the feature proposal."
msgstr ""

#: ../../source/bitshares/developers/bsips.rst:20
msgid ""
"A detailed description of the structure of BSIPs can be found in "
"`BSIP-0001`_"
msgstr ""

#: ../../source/bitshares/developers/funding.rst:3
msgid "Funding Your Ideas"
msgstr ""

#: ../../source/bitshares/developers/funding.rst:5
msgid ""
"You have a great idea for a business on top of within the BitShares "
"platform and are searching for a way to fund your idea? Here are the "
"options we can offer you:"
msgstr ""

#: ../../source/bitshares/developers/funding.rst:9
msgid ""
"**Basic Worker Proposal**: All BitShares shareholders can cast a vote for"
" your proposal/idea and will decide if they want this feature or not at "
"the price you are asking. If they accept the price you asked, you will be"
" #paidbyprotocol in BTS. If not, you can of course refine your proposal "
"and try again incorporating feedback received from shareholders and the "
"community."
msgstr ""

#: ../../source/bitshares/developers/funding.rst:15
msgid ""
"**Fee Backed Asset**: If you produce a feature for BitShares that offers "
"a new service, you can have a :doc:`../user/fba` created for your feature"
" and profit from future revenue streams generated by that particular "
"feature."
msgstr ""

#: ../../source/bitshares/developers/funding.rst:19
msgid ""
"**Crowdfunding**: Instead of profiting from your FBA, you can sell them "
"to investors to fund the implementation. Or you simply create, issue and "
"sell a :doc:`../user/uia`."
msgstr ""

#: ../../source/bitshares/developers/funding.rst:22
msgid ""
"**Mixed Funding**: You sell some of the FBA and keep the rest for "
"yourself. Maybe the best option, you get money instantly to fund the "
"development and you will get more later when people use the feature."
msgstr ""

#: ../../source/bitshares/developers/funding.rst:27
msgid "**Remarks:**:"
msgstr ""

#: ../../source/bitshares/developers/funding.rst:29
msgid ""
"If you want to develop a blockchain/backend feature, you *should* "
"probably cooperate with Cryptonomex as they can consult you how to "
"implement everything on the blockchain and most shareholders will ask "
"them to check the quality of your code prior to its hard fork, anyway."
msgstr ""

#: ../../source/bitshares/developers/funding.rst:34
msgid ""
"Other tasks, such as basic GUI development, etc. can mostly be dealt with"
" independently, unless access to the main repository is required. This "
"can be asked from Cryptonomex or other active, but independent, web "
"developers."
msgstr ""

#: ../../source/bitshares/developers/index.rst:3
msgid "Businesses, Developers and Business Developers"
msgstr ""

#: ../../source/bitshares/dpos.rst:3
msgid "Delegated Proof of Stake"
msgstr ""

#: ../../source/bitshares/dpos.rst:5
msgid ""
"Delegated Proof of Stake (DPOS) is a new method of securing a crypto-"
"currency's network.  DPOS attempts to solve the problems of both "
"Bitcoin's traditional Proof of Work system, and the Proof of Stake system"
" of Peercoin and NXT. DPOS implements a layer of technological democracy "
"to offset the negative effects of centralization."
msgstr ""

#: ../../source/bitshares/dpos.rst:8 ../../source/bitshares/whatis.rst:40
msgid "Background"
msgstr ""

#: ../../source/bitshares/dpos.rst:10
msgid ""
"Delegated proof of stake mitigates the potential negative impacts of "
"centralization through the use of witnesses (formaly called *delegates*)."
" A total of `N` witnesses sign the blocks and are voted on by those using"
" the network with every transaction that gets made. By using a "
"decentralized voting process, DPOS is by design more democratic than "
"comparable systems. Rather than eliminating the need for trust all "
"together, DPOS has safeguards in place the ensure that those trusted with"
" signing blocks on behalf of the network are doing so correctly and "
"without bias. Additionally, each block signed must have a verification "
"that the block before it was signed by a trusted node. DPOS eliminates "
"the need to wait until a certain number of untrusted nodes have verified "
"a transaction before it can be confirmed."
msgstr ""

#: ../../source/bitshares/dpos.rst:12
msgid ""
"This reduced need for confirmation produces an increase in speed of "
"transaction times. By intentionally placing trust with the most "
"trustworthy of potential block signers, as decided by the network, no "
"artificial encumbrance need be imposed to slow down the block signing "
"process. DPOS allows for many more transactions to be included in a block"
" than either proof of work or proof of stake systems. DPOS technology "
"allows cryptocurrency technology to transact at a level where it can "
"compete with the centralized clearinghouses like Visa and Mastercard. "
"Such clearinghouses administer the most popular forms of electronic "
"payment systems in the world."
msgstr ""

#: ../../source/bitshares/dpos.rst:14
msgid ""
"In a delegated proof of stake system centralization still occurs, but it "
"is controlled. Unlike other methods of securing cryptocurrency networks, "
"every client in a DPOS system has the ability to decide who is trusted "
"rather than trust concentrating in the hands of those with the most "
"resources. DPOS allows the network to reap some of the major advantages "
"of centralization, while still maintaining some calculated measure of "
"decentralization. This system is enforced by a fair election process "
"where anyone could potentially become a delegated representative of the "
"majority of users."
msgstr ""

#: ../../source/bitshares/dpos.rst:17
msgid "Rationale Behind DPOS"
msgstr ""

#: ../../source/bitshares/dpos.rst:19
msgid ""
"Give shareholders a way to delegate their vote to a key (one that doesn't"
" control coins 'so they can mine')"
msgstr ""

#: ../../source/bitshares/dpos.rst:20
msgid "Maximize the dividends shareholders earn"
msgstr ""

#: ../../source/bitshares/dpos.rst:21
msgid "Minimize the amount paid to secure the network"
msgstr ""

#: ../../source/bitshares/dpos.rst:22
msgid "Maximize the performance of the network"
msgstr ""

#: ../../source/bitshares/dpos.rst:23
msgid "Minimize the cost of running the network (bandwidth, CPU, etc)"
msgstr ""

#: ../../source/bitshares/dpos.rst:26
msgid "Shareholders are in Control"
msgstr ""

#: ../../source/bitshares/dpos.rst:28
msgid ""
"The fundamental feature of DPOS is that shareholders remain in control. "
"If they remain in control then it is decentralized. As flawed as voting "
"can be, when it comes to shared ownership of a company it is the only "
"viable way. Fortunately if you do not like who is running the company you"
" can sell and this market feedback causes shareholders to vote more "
"rationally than citizens."
msgstr ""

#: ../../source/bitshares/dpos.rst:30
#, python-format
msgid ""
"Every shareholder gets to vote for someone to sign blocks in their stead "
"(a representative if you will). Anyone who can gain 1% or more of the "
"votes can join the board. The representatives become a \"board of "
"directors\" which take turns in a round-robin manner, signing blocks. If "
"one of the directors misses their turn, clients will automatically switch"
" their vote away from them. Eventually these directors will be voted off "
"the board and someone else will join. Board members are paid a small "
"token to make it worth their time ensuring uptime and an incentive to "
"campaign. They also post a small bond equal to 100x the average pay they "
"receive for producing a single block. To make a profit a director must "
"have greater than 99% uptime."
msgstr ""

#: ../../source/bitshares/dpos.rst:33
msgid "Pooled Mining as Delegated Proof of Work"
msgstr ""

#: ../../source/bitshares/dpos.rst:35
#, python-format
msgid ""
"So how is this different than Bitcoin? With Bitcoin, users must pick a "
"mining pool and each pool generally has 10% or more of the hash power. "
"The operator of these pools is like a representative of the clients "
"pointed at the pool. Bitcoin expects the users to switch pools to keep "
"power from becoming too centralized, but collectively five major pools "
"control the network and manual user intervention is expected if one of "
"the pools is compromised. If a pool goes down then the block production "
"rate slows proportionally until it comes back up. Which pool one mines "
"with becomes a matter of politics."
msgstr ""

#: ../../source/bitshares/dpos.rst:38
msgid "Reasons to not randomly select representatives from all users"
msgstr ""

#: ../../source/bitshares/dpos.rst:40
msgid "High probability they are not online."
msgstr ""

#: ../../source/bitshares/dpos.rst:41
msgid ""
"Attackers would gain control proportional to their stake, without any "
"peer review."
msgstr ""

#: ../../source/bitshares/dpos.rst:42
msgid ""
"Without any mining at all, the generation of a random number in a "
"decentralized manner is impossible and thus an attacker could control the"
" random number generation."
msgstr ""

#: ../../source/bitshares/dpos.rst:45
msgid "Scalability"
msgstr ""

#: ../../source/bitshares/dpos.rst:47
msgid ""
"Assuming a fixed validation cost per transaction and a fixed fee per "
"transaction, there is a limit to the amount of decentralization that can "
"take place. Assuming the validation cost exactly equals the fee, a "
"network is completely centralized and can only afford one validator. "
"Assuming the fee is 100x the cost of validation, the network can support "
"100 validators."
msgstr ""

#: ../../source/bitshares/dpos.rst:54
#, python-format
msgid ""
"Systems like Nxt and Peercoin will have excessive fees if they intend to "
"allow everyone to be a validator and earn fees at scale. What this means "
"for Nxt and Peercoin is that anyone with less than 1% stake cannot "
"validate profitably unless their fees are higher than our DPOS chain. If "
"these chains assume 100 delegates is too centralized and start promoting "
"they have 1000 validators, then their fees must be 10x those of DPOS. If "
"such a chain grew to be the size of Bitcoin ($10 B) then only those with "
"$1M worth of coin could validate profitably and most would consider that "
"an elite club. If they reduce the minimum stake to be a validator to "
"$1000, then their fees would be 10,000 times higher than DPOS."
msgstr ""

#: ../../source/bitshares/dpos.rst:56
msgid ""
"Developers of DPOS assume that everyone with less than the amount "
"required to validate won't participate. Also assumed is a \"reasonable\" "
"distribution of wealth. It's clear that unless alternate chains have "
"unusually high fees, there will only be a handful of people with enough "
"stake to validate profitably."
msgstr ""

#: ../../source/bitshares/dpos.rst:58
msgid ""
"In conclusion, the only way for POS to work efficiently is to delegate. "
"In the case of Nxt, they can pool their stake by some means and "
"ultimately this will end up like DPOS prior to approval voting with a "
"variable number of delegates. Delegates wouldn't actually receive any "
"income as with mining pools because the validation expenses will consume "
"the vast majority of the transaction fees."
msgstr ""

#: ../../source/bitshares/dpos.rst:60
msgid ""
"The end result is that decentralization has a cost proportional to the "
"number of validators and that costs do not disappear. At scale, these "
"costs will centralize any system that does not support delegation. This "
"kind of centralization should be designed as part of the system from the "
"beginning so that it can be properly managed and controlled by the users,"
" instead of evolving in some ad hoc manner as an unintended consequence."
msgstr ""

#: ../../source/bitshares/dpos.rst:63
msgid "Role of Delegates"
msgstr ""

#: ../../source/bitshares/dpos.rst:65
msgid "A witness is an authority that is allowed to produce and broadcast blocks."
msgstr ""

#: ../../source/bitshares/dpos.rst:66
msgid ""
"Producing a block consists of collecting transactions of the P2P network "
"and signing it with the witness' signing private key."
msgstr ""

#: ../../source/bitshares/dpos.rst:67
msgid ""
"A witness' spot in the round is assigned randomly at the end of the "
"previous block"
msgstr ""

#: ../../source/bitshares/dpos.rst:70
msgid "How to become a delegate"
msgstr ""

#: ../../source/bitshares/dpos.rst:72
msgid ":doc:`tutorials/witness-create`"
msgstr ""

#: ../../source/bitshares/dpos.rst:75
msgid "Voting Algorithm"
msgstr ""

#: ../../source/bitshares/dpos.rst:78
msgid "How do I get \"votes?\""
msgstr ""

#: ../../source/bitshares/dpos.rst:80
msgid "Persuade others to give upvotes to your witness"
msgstr ""

#: ../../source/bitshares/dpos.rst:81
msgid "When another user gives an upvote to your (and possibly other) delegates"
msgstr ""

#: ../../source/bitshares/dpos.rst:82
msgid ""
"A user can give an upvote for more than one witness. As a result all "
"upvoted witnesse get a vote"
msgstr ""

#: ../../source/bitshares/dpos.rst:83
msgid "Convince proxies (that vote on behalf of their followers) to vote for you"
msgstr ""

#: ../../source/bitshares/dpos.rst:86
msgid "Why use only upvotes?"
msgstr ""

#: ../../source/bitshares/dpos.rst:88
msgid ""
"Giving only upvotes, and allowing multiple votes per share, is called "
"**Approval Voting**, and comes with several advantages over the old "
"*delegation* voting."
msgstr ""

#: ../../source/bitshares/dpos.rst:89
msgid ""
"No downvotes are needed, which not only simplifies usability but also "
"reduces code and complexity."
msgstr ""

#: ../../source/bitshares/dpos.rst:92
msgid "How are 'votes' counted?"
msgstr ""

#: ../../source/bitshares/dpos.rst:94
msgid ""
"Once every *maintenance interval*, all votes are recounted and the "
"corresponding result takes effect."
msgstr ""

#: ../../source/bitshares/dpos.rst:97
msgid "Is there an anti-vote?"
msgstr ""

#: ../../source/bitshares/dpos.rst:99
msgid ""
"Not any more. After discovering `emski's attack "
"<https://bitsharestalk.org/index.php?topic=5164.msg67657#msg67657>`_ the "
"developers decided to use **Approval Voting**."
msgstr ""

#: ../../source/bitshares/dpos.rst:102
msgid "Disincentives for Attacks"
msgstr ""

#: ../../source/bitshares/dpos.rst:104
msgid ""
"By choosing not to produce a block, a witness risks getting fired and "
"they lose guaranteed profits in the future."
msgstr ""

#: ../../source/bitshares/dpos.rst:105
msgid ""
"A dishonest delegate would only fail to produce a block if they were sure"
" to win something from it"
msgstr ""

#: ../../source/bitshares/dpos.rst:106
msgid ""
"If a lottery only payed out 50% to a jackpot (giving the other 50% to "
"charity) then the most this dishonest delegate could do is break even."
msgstr ""

#: ../../source/bitshares/dpos.rst:107
msgid ""
"Witnesses can't sign invalid blocks as the block needs confirmation by "
"the other witnesses as well"
msgstr ""

#: ../../source/bitshares/dpos.rst:110
msgid "How many witnesses are securing the network"
msgstr ""

#: ../../source/bitshares/dpos.rst:112
msgid ""
"This is totally in the hands of the shareholders. If the majority votes "
"for 50 witnesses, then 50 witnesses will be used. If the shareholders "
"only vote for 20, so be it. The minimum possible witness count is 11."
msgstr ""

#: ../../source/bitshares/dpos.rst:115
msgid "DPOS Infographic"
msgstr ""

#: ../../source/bitshares/dpos.rst:123
msgid "Sources and Discussions"
msgstr ""

#: ../../source/bitshares/dpos.rst:125
msgid "https://bitsharestalk.org/index.php?topic=5164.msg67657#msg67657"
msgstr ""

#: ../../source/bitshares/dpos.rst:126
msgid "https://bitsharestalk.org/index.php?topic=5205.0"
msgstr ""

#: ../../source/bitshares/dpos.rst:127
msgid ""
"https://github.com/BitShares/bitshares_toolkit/wiki/Delegated-Proof-of-"
"Stake"
msgstr ""

#: ../../source/bitshares/dpos.rst:128
msgid "https://bitsharestalk.org/index.php?topic=4984.0"
msgstr ""

#: ../../source/bitshares/dpos.rst:129
msgid "https://bitsharestalk.org/index.php?topic=4927.0"
msgstr ""

#: ../../source/bitshares/dpos.rst:130
msgid "https://bitsharestalk.org/index.php?topic=4869.0"
msgstr ""

#: ../../source/bitshares/dpos.rst:131
msgid "https://bitsharestalk.org/index.php?topic=4853.0"
msgstr ""

#: ../../source/bitshares/dpos.rst:132
msgid "https://bitsharestalk.org/index.php?topic=4836.0"
msgstr ""

#: ../../source/bitshares/dpos.rst:133
msgid "https://bitsharestalk.org/index.php?topic=4714.0"
msgstr ""

#: ../../source/bitshares/history.rst:3
msgid "The History of BitShares"
msgstr ""

#: ../../source/bitshares/history.rst:6
msgid "The History of BitShares as laid out by Stan Larimer"
msgstr ""

#: ../../source/bitshares/history.rst:8
msgid ""
"\"Here are the first parts of a planned series of blog articles that will"
" appear on the bitshares.org website as soon as I am sufficiently pleased"
" with them. This series is intended to be a resource for newbies and a "
"summary of all that has been accomplished in the past year. Think of this"
" as the Official Year One Newsletter.\""
msgstr ""

#: ../../source/bitshares/history.rst:10
msgid ""
"`Part One Source "
"<https://bitsharestalk.org/index.php?topic=4833.msg63464#msg63464>`_"
msgstr ""

#: ../../source/bitshares/history.rst:11
msgid ""
"`Part Two Source "
"<https://bitsharestalk.org/index.php?topic=4833.msg63678#msg63678>`_"
msgstr ""

#: ../../source/bitshares/history.rst:12
msgid ""
"`Part Three Source "
"<https://bitsharestalk.org/index.php?topic=4833.msg64045#msg64045>`_"
msgstr ""

#: ../../source/bitshares/history.rst:15
msgid "The History of BitShares Part One"
msgstr ""

#: ../../source/bitshares/history.rst:17
msgid ""
"Today is the one-year anniversary of the invention of BitShares. On the "
"second day of June 2013, a rogue entrepreneur named Dan \"Bytemaster\" "
"Larimer was struck on the head by a proverbial migrating coconut. When he"
" regained consciousness, he realized that he had invented bit-USD, the "
"key insight that makes BitShares possible. Before sundown he had reworked"
" his original BitShares whitepaper and published the whole new concept at"
" bitcointalk.org:"
msgstr ""

#: ../../source/bitshares/history.rst:19
msgid ""
"`Creating a Fiat/Bitcoin Exchange without Fiat Deposits "
"<https://bitcointalk.org/index.php?topic=223747.0>`_"
msgstr ""

#: ../../source/bitshares/history.rst:21
msgid ""
"Over the next five weeks, Bytemaster engaged in a series of vigorous "
"forum discussions defending and refining the concept. There he met "
"Charles Hoskinson who helped to vet the idea and develop a business plan."
" Charles presented the plan to Li Xiaolai in China who agreed to fund the"
" development. On American Independence Day, the Fourth of July 2013, "
"Invictus Innovations was incorporated in the state of Virginia."
msgstr ""

#: ../../source/bitshares/history.rst:23
msgid ""
"The next several months were spent bootstrapping the company and "
"publishing articles, many of which may be found on the bitsharestalk.org "
"thread at `Advice, Tutorials, and General References for Newbies. "
"<https://bitsharestalk.org/index.php?topic=889.msg8935#msg8935>`_"
msgstr ""

#: ../../source/bitshares/history.rst:25
msgid ""
"In September, the concept of a Distributed Autonomous Company (DAC) was "
"invented and introduced to the world in two groundbreaking "
"LetsTalkBitcoin.com articles:"
msgstr ""

#: ../../source/bitshares/history.rst:27
msgid ""
"`Overpaying for Security <http://letstalkbitcoin.com/is-bitcoin-"
"overpaying-for-false-security/#.Ui-p9WTFT7s>`_"
msgstr ""

#: ../../source/bitshares/history.rst:28
msgid ""
"`Bitcoin and the Three Laws of Robotics <http://letstalkbitcoin.com"
"/bitcoin-and-the-three-laws-of-robotics/>`_"
msgstr ""

#: ../../source/bitshares/history.rst:30
msgid ""
"Invictus introduced the BitShares Vision to the world via presentations "
"by Hoskinson and Larimer at the Atlanta Bitcoin Conference in October "
"2013. It is here that the plans for Keyhotee were first introduced – an "
"integrated multi-wallet, communication, and DAC interface application "
"intended to defend privacy and help spread knowledge of BitShares "
"technologies outside the crypto-currency community."
msgstr ""

#: ../../source/bitshares/history.rst:32
msgid ""
"Hoskinson and Larimer parted company at this point. They each agreed to "
"keep their reasons confidential and there is no bad blood from our point "
"of view. The only official statement on the subject was made by CEO Bo "
"Shen to end a minor forum firestorm here:"
msgstr ""

#: ../../source/bitshares/history.rst:34
msgid ""
"`BitSharestalk "
"<https://bitsharestalk.org/index.php?topic=2188.msg32672#msg32672>`_"
msgstr ""

#: ../../source/bitshares/history.rst:36
msgid ""
"It is our opinion that Charles Hoskinson is the best dealmaker we have "
"ever seen, and we miss his vision and talent for recruiting allies. No "
"doubt he will help make his new Ethereum team very successful."
msgstr ""

#: ../../source/bitshares/history.rst:38
msgid ""
"Despite this loss, all of this activity was beginning to create a buzz "
"that would soon explode on the scene with a sequence of revolutionary "
"innovations at roughly monthly intervals that continue to this very day."
msgstr ""

#: ../../source/bitshares/history.rst:40
msgid "The first was ProtoShares..."
msgstr ""

#: ../../source/bitshares/history.rst:43
msgid "The History of BitShares Part Two"
msgstr ""

#: ../../source/bitshares/history.rst:45
msgid "November's Innovation – BitShares PTS"
msgstr ""

#: ../../source/bitshares/history.rst:47
msgid ""
"BitShares PTS (formerly called ProtoShares) was developed for an entirely"
" different reason than what its paradigm-shattering role became shortly "
"after launch. In fact, every one of the subsequent breathtaking "
"innovations came about from reacting to opportunities and lessons learned"
" from the previous month's breakthroughs and, um, screw-ups. Necessity is"
" the mother of invention. I wish we could say we had it all planned out "
"in advance, but no business plan survives first contact with the market. "
"We are merely blessed opportunists."
msgstr ""

#: ../../source/bitshares/history.rst:49
msgid ""
"Initially, we were just looking for a way serve people interested in our "
"first objective, BitShares X. A way for them to start mining and trading "
"it early. BitShares X was first viewed as a coin backed by a built-in "
"business that gives it more worth than the speculative value of a meme or"
" some alternative technical implementation. In this first case, that "
"integral unmanned business was a decentralized bank and exchange."
msgstr ""

#: ../../source/bitshares/history.rst:51
msgid "Yep. Your coins would now contain a bank, not the other way around."
msgstr ""

#: ../../source/bitshares/history.rst:53
#, python-format
msgid ""
"Needless to say, this kind of second-generation crypto-company takes a "
"lot longer to build and early adopters were growing impatient. So our "
"plan was to just offer a plain old Bitcoin clone whose coins would be a "
"BitShares X prototype - upgradable into BitShares X \"bitshares\" when it"
" was ready to launch. We would simply initialize the first 10% of the "
"bitshares to match all the public keys of PTS holders, giving them "
"instant matching control of the same number of bitshares in BitShares X. "
"This is how the concept of a protocoin was born."
msgstr ""

#: ../../source/bitshares/history.rst:55
msgid ""
"We envisioned many exciting uses for protocoins. For example, they could "
"be used as A way to separate investing in an idea from investing in one "
"or more implementations of the idea. An incentive for competitors to "
"cooperate on building an implementation because they could all be common "
"stakeholders in the idea. A way to vet an idea and attract venture "
"capitalists based upon prediction market evidence that the idea has "
"value. A way for developers to invest in an idea and raise funding by "
"generating growth from showing more and more evidence that they will "
"successfully implement the idea in a way that benefits investors in the "
"idea. A way for someone with a good idea but lacking the ability to "
"implement it to share it and benefit from its ultimate implementation by "
"somebody else. A way for an entire community to participate in \"pre-"
"mining\" in a way that might be deemed fair (e.g. for unmanned businesses"
" that must start out with enough currency to operate and enough "
"credibility to get market depth on exchanges from Day One.) A more "
"graceful \"soft fork\" way to upgrade to version two of a DAC by "
"instantiating the new in parallel with the old and let the owners "
"(shareholders) not just the employees (miners) decide when and if value "
"transitions from the old to the new. A way to build a community and get "
"them to cooperate on the implementation because they all have a stake in "
"the idea. So you see, right off the bat we are talking about two assets: "
"PTS and BTS. Before long, we would be talking about entire families of "
"such assets. Second-generation crypto-currencies that we began to call "
"crypto-equities because the coins also seemed like \"shares\" in the "
"underlying unmanned business that gave the currency value - BitShares."
msgstr ""

#: ../../source/bitshares/history.rst:57
msgid "Since then, we have come to prefer the inverse of this dual metaphor:"
msgstr ""

#: ../../source/bitshares/history.rst:59
msgid ""
"Bitcoin is a type of crypto-company that implements a coin not BitShares "
"as a type of crypto-coin that implements a company."
msgstr ""

#: ../../source/bitshares/history.rst:61
msgid ""
"Of course, BitShares are something very different than shares in a "
"government-created and therefore government-regulated organization. We "
"are speaking metaphorically to help people understand how they work and "
"what gives them value. They can still be viewed as ordinary altcoins (ok,"
" incredibly powerful ordinary altcoins) as far as their underlying "
"technology is concerned."
msgstr ""

#: ../../source/bitshares/history.rst:63
msgid "Charles Evans explored this dual metaphor in this delightful blog article:"
msgstr ""

#: ../../source/bitshares/history.rst:65
msgid ""
"A BitRose by Any Other Name. http://bitshares.org/a-bitrose-by-any-other-"
"name/"
msgstr ""

#: ../../source/bitshares/history.rst:67
msgid ""
"We offered a bounty for an experienced coin designer to build the PTS "
"protocoin for us. A developer known as FreeTrade answered the call. It "
"took him about a month to clone it from the Bitcoin library. Then, while "
"we were still evaluating his code, another independent entrepreneur known"
" as Super3 downloaded the open-source from FreeTrade's library and "
"started it running. On November 5, 2013 Super3 went down in history as "
"the miner of the first protocoin block in crypto-equity history!"
msgstr ""

#: ../../source/bitshares/history.rst:69
msgid ""
"POW! The rest of the world (who had been eagerly awaiting the launch "
"based on the several months we had been writing about it) jumped on it "
"with everything they had. It took just a few days before the competition "
"became so intense that people had a hard time mining solo with their "
"individual computers. They started joining pools that several "
"enterprising businessmen quickly set up and then everyone started renting"
" cloud computers to remain competitive. By the end of the third week, "
"there were hundreds of thousands of mining nodes competing. Several "
"independent coin exchanges jumped in and listed PTS, driving it "
"immediately into the top ten of the over 100 coins listed on "
"coinmarketcap.com at the time."
msgstr ""

#: ../../source/bitshares/history.rst:71
msgid ""
"So you see, we really don't own PTS. It was launched by the industry for "
"the industry. We just described what ought to exist, and a decentralized "
"industry of entrepreneurs produced it practically overnight."
msgstr ""

#: ../../source/bitshares/history.rst:73
msgid ""
"Of course, that moon shot may have had something to do with one small "
"suggestion we made literally at the last minute: we decided to recommend "
"PTS be the basis for more than just BitShares X. PTS should also be used "
"to initialize all of the other second-generation assets we had been "
"writing about. Mine once for a whole family of assets. Why should you "
"have to keep mining over and over again to get a \"fair\" distribution?"
msgstr ""

#: ../../source/bitshares/history.rst:75
msgid ""
"In fact, we recommended that other developers do the same thing. Suddenly"
" BitShares PTS was backed by more than thin air. More than just one "
"unmanned business. More than just one company's product line of unmanned "
"businesses. It could well become backed by a good portion of the unmanned"
" business industry!"
msgstr ""

#: ../../source/bitshares/history.rst:77
msgid ""
"BitShares PTS was valuable because as a universal prototype it was "
"upgradable to multiple future releases like BitShares X."
msgstr ""

#: ../../source/bitshares/history.rst:79
msgid ""
"Just like a good deal on Microsoft Office 1.0 might get you free upgrades"
" on Word, Excel, PowerPoint and all the rest ...for as long as you both "
"shall live!"
msgstr ""

#: ../../source/bitshares/history.rst:81
msgid ""
"To a community willing to speculate on any altcoin with a cute name, that"
" was all it took. Now there was something tangible to speculate on. Soon "
"crypto-currency speculators would be demanding to know every new asset's "
"business case."
msgstr ""

#: ../../source/bitshares/history.rst:83
msgid ""
"Imagine that! We had almost accidentally changed the crypto-currency "
"industry forever."
msgstr ""

#: ../../source/bitshares/history.rst:85
msgid "It was just our opening shot."
msgstr ""

#: ../../source/bitshares/history.rst:88
msgid "The History of BitShares Part Three"
msgstr ""

#: ../../source/bitshares/history.rst:91
msgid "December's Innovation – TAPOS and the End of Mining"
msgstr ""

#: ../../source/bitshares/history.rst:93
msgid ""
"In the weeks that followed it became increasingly obvious that the whole "
"paradigm of mining on which the crypto-currency industry is founded was "
"horribly flawed. While generally billed as a \"fair\" lottery for wide "
"distribution of a new currency, it was clear that the ordinary guy was "
"still at a disadvantage. Technically savvy people could use and optimize "
"the tools - others could not install their wallet. Wealthy individuals "
"could rent computers by the thousands - others had no computer at all. "
"Only a very small percentage of the general population was benefitting - "
"sucking up the lion's share of the coins and then reselling them on the "
"market at a profit."
msgstr ""

#: ../../source/bitshares/history.rst:95
msgid ""
"Now, there's nothing wrong with using your brains or wealth to earn a "
"profit while contributing to society (like, say, developing a new "
"technology), but as far as the general public was concerned, this small "
"elite group of individuals were effectively just selling the currency "
"into existence. Most of the general population had to buy them from the "
"market anyway!"
msgstr ""

#: ../../source/bitshares/history.rst:97
msgid ""
"And even those elite few only got to keep a small percentage of what the "
"market was willing to pay for the currency. They were required to destroy"
" most of what they received from the market doing the electronic "
"equivalent of digging holes and filling them back in. The whole industry "
"was ein bisschen poco loco."
msgstr ""

#: ../../source/bitshares/history.rst:99
msgid ""
"\"No, wait!\", the Bitcoin-trained community protested, \"burning the "
"seed capital is the price we must pay for securing the network!\""
msgstr ""

#: ../../source/bitshares/history.rst:101
msgid ""
"Except the network was not really being secured. Economies of scale "
"dictate that hashing power will always migrate toward specialized "
"capital-intensive organizations ultimately killing the very "
"decentralization that mining was supposed to ensure. Today, most Bitcoin "
"mining power is concentrated in the hands of a half-dozen individuals "
"with just two of them controlling over 51%. And they proudly collaborate "
"\"for the good of the network.\""
msgstr ""

#: ../../source/bitshares/history.rst:103
#, python-format
msgid ""
"Bytemaster recognized that Bitcoin could be viewed as an unprofitable "
"company and its coins as stock in that company. Stock value was generally"
" rising because demand for its services (efficient private money "
"transmission) exceeded supply. But, meanwhile it was bleeding red ink. "
"100% of its transaction fees were going to pay its employees (the "
"miners). But that still wasn't enough. It had to print more money (up to "
"12% annual inflation) also to pay its employees. So Bitcoin is a company "
"with annual losses near 12%. (And the employees were only getting to keep"
" a few percent of the money being wasted on them.)"
msgstr ""

#: ../../source/bitshares/history.rst:105
msgid ""
"He decided that eliminating those employees was a key objective that "
"would inevitably lead to a whole new generation of profitable crypto-"
"businesses. Assets based on destructive mining would go the way of the "
"dinosaur, unable to compete with profitable business models of second "
"generation assets that could afford to pay dividends and interest to "
"their holders. It was just a matter of time."
msgstr ""

#: ../../source/bitshares/history.rst:107
msgid ""
"So a month after the ProtoShares revolution, around December 1, "
"Bytemaster fired his second shot heard round the world: all his future "
"designs would replace Proof of Work mining with a Proof of Stake "
"derivative."
msgstr ""

#: ../../source/bitshares/history.rst:109
msgid ""
"`Transactions as Proof of Stake (TAPOS) and the End of Mining "
"<https://bitsharestalk.org/index.php?topic=1138.msg11955#msg11955>`_ . An"
" algorithm that was lightweight enough to run invisibly on anyone's "
"computer, for free! Mining was dead. Next generation crypto-assets would "
"be profitable. They would be valuable because they returned a yield, "
"rather than for superficial speculative reasons."
msgstr ""

#: ../../source/bitshares/history.rst:111
msgid "There were merely a few technical wrinkles to iron out..."
msgstr ""

#: ../../source/bitshares/history.rst:114
msgid "History of Funding"
msgstr ""

#: ../../source/bitshares/history.rst:116
msgid "Also see, Summary of Key Facts for Invictus Stakeholders"
msgstr ""

#: ../../source/bitshares/history.rst:118
msgid ""
"When Invictus of VA was formed under Charles Hoskinson's term as CEO, our"
" purpose was to create a company that would achieve all the objectives of"
" Mr. Li as our primary investor."
msgstr ""

#: ../../source/bitshares/history.rst:120
#, python-format
msgid ""
"(Since shortly after our founding, Mr. Li Xiaolai has held a subscription"
" agreement that entitles him to buy 25% of our shares for a fixed price "
"payable in increments spread out over the first year. Mr. Li also "
"acquired an additional 1% from Charles Hoskinson in a separate purchase. "
"This means that his total stake in Invictus is 26% of which he has "
"completed payments on 21% as scheduled. His final payment for the last 5%"
" is on hold pending completion of a restructuring forced by discovery of "
"certain applicable U.S. regulations. All these shares will be equally "
"treated.)"
msgstr ""

#: ../../source/bitshares/history.rst:122
msgid "We had three nested tasks:"
msgstr ""

#: ../../source/bitshares/history.rst:124
msgid ""
"Build and launch BitShares X Build a company to Build and launch "
"BitShares X. Build a decentralized industry in which this company could "
"build and launch BitShares X (and many more)."
msgstr ""

#: ../../source/bitshares/history.rst:126
msgid ""
"Part of our task was to research the legal requirements to accomplish all"
" of these goals."
msgstr ""

#: ../../source/bitshares/history.rst:128
msgid ""
"In the process of studying the requirements in the United States we ran "
"into a number of issues and uncertainties. In particular, there are "
"strict rules about who can own shares of a U.S. corporation."
msgstr ""

#: ../../source/bitshares/history.rst:130
msgid ""
"We recommended to Mr. Li that he ask an attorney he trusts to start over "
"and create a company that would be able to meet all of the goals and "
"honor all of his commitments. It has taken six months to work out all the"
" details, after consulting with Li's attorney and multiple U.S law firms."
msgstr ""

#: ../../source/bitshares/history.rst:132
msgid ""
"We will soon be ready to release a public statement about the details, "
"but the bottom line is that Invictus Innovations Incorporated, LTD in "
"Hong Kong is the company we intended to create in Virginia, except with "
"the ability to meet the needs of Asian investors better than we can here."
msgstr ""

#: ../../source/bitshares/history.rst:134
msgid ""
"So, you can think of it as relocating the Virginia company, but legally "
"they are two independent companies with independent management aiming to "
"meet Mr. Li's goals and obligations 100%."
msgstr ""

#: ../../source/bitshares/history.rst:136
msgid ""
"The Virginia company now only handles small tasks associated with "
"American payroll and payment processing. Further details on this "
"decomposition into independent businesses optimized to comply with all "
"regulations in their domains will be forthcoming."
msgstr ""

#: ../../source/bitshares/history.rst:139
msgid "The Great Consolidation"
msgstr ""

#: ../../source/bitshares/history.rst:141
msgid ""
"In the late part of 2014 it became obvious that Bytemaster had to lend "
"his energies to other projects. People had donated AGS funds with the "
"expectation of future DACs. With the decreasing funding due to dropping "
"BTC prices and the requirements of Dan Larimer, the Great Consolidation "
"occurred. Follow My Vote and DNS were merged into BTS so that all "
"developers could be brought to work directly on one product instead of "
"DACs all competing for users."
msgstr ""

#: ../../source/bitshares/history.rst:143
msgid ""
"One outcome of this was also the addition of paying on the blockchain. "
"Previously BitShares was a purely deflationary blockchain with dividends "
"paid out by the burning of transaction fees. (Less currency in existence "
"gives more value to those remaining.) With a pressing need to be the most"
" innovative crypto-currency out there, it was determined that the "
"Delegates needed to start paying. So the cap on Bitshares was raised to "
"be slowly paid out similar to the inflation in Bitcoin. The rate was made"
" to be kept under the current level of Bitcoin inflation, but delivering "
"direct and meaningful value. Timeline of BitShares by forum announcements"
msgstr ""

#: ../../source/bitshares/history.rst:146
msgid "Momentum Proof of Work Introduced on BTT - October 18 2013"
msgstr ""

#: ../../source/bitshares/history.rst:148
msgid "https://bitcointalk.org/index.php?topic=313479.0"
msgstr ""

#: ../../source/bitshares/history.rst:149
msgid ""
"http://static.squarespace.com/static/51fb043ee4b0608e46483caf/t/52654716e4b01acd1ac8a085/1382369046208/MomentumProofOfWork.pdf"
" (White Paper)"
msgstr ""

#: ../../source/bitshares/history.rst:150
msgid "https://bitsharestalk.org/index.php?topic=962.msg9752#msg9752"
msgstr ""

#: ../../source/bitshares/history.rst:152
msgid "Keyhotee ID Preorder - November 3, 2013"
msgstr ""

#: ../../source/bitshares/history.rst:154
msgid "https://bitsharestalk.org/index.php?topic=2.msg2#msg2"
msgstr ""

#: ../../source/bitshares/history.rst:156
msgid "Mining of Bitshares PTS (Protoshares) - November 5, 2013"
msgstr ""

#: ../../source/bitshares/history.rst:158
msgid "https://bitsharestalk.org/index.php?topic=4.msg4#msg4"
msgstr ""

#: ../../source/bitshares/history.rst:160
msgid "Transactions as Proof of Stake - November 30, 2013"
msgstr ""

#: ../../source/bitshares/history.rst:162
msgid "https://bitsharestalk.org/index.php?topic=1138.msg12010#msg12010"
msgstr ""

#: ../../source/bitshares/history.rst:163
msgid "http://the-iland.net/static/downloads/TransactionsAsProofOfStake.pdf"
msgstr ""

#: ../../source/bitshares/history.rst:164
msgid "https://bitsharestalk.org/index.php?topic=1138.msg11968#msg11968"
msgstr ""

#: ../../source/bitshares/history.rst:165
msgid "https://bitsharestalk.org/index.php?topic=1138.msg12967#msg12967"
msgstr ""

#: ../../source/bitshares/history.rst:167
msgid "Consensus + TaPoS"
msgstr ""

#: ../../source/bitshares/history.rst:169
msgid "https://bitsharestalk.org/index.php?topic=1138.msg29905#msg29905"
msgstr ""

#: ../../source/bitshares/history.rst:170
msgid "https://bitsharestalk.org/index.php?topic=3588.msg45119#msg45119"
msgstr ""

#: ../../source/bitshares/history.rst:172
msgid "The Inception of DPOS - December 8, 2013"
msgstr ""

#: ../../source/bitshares/history.rst:174
msgid "https://bitsharestalk.org/index.php?topic=1138.msg13602#msg13602"
msgstr ""

#: ../../source/bitshares/history.rst:175
msgid "https://bitsharestalk.org/index.php?topic=1138.msg14784#msg14784"
msgstr ""

#: ../../source/bitshares/history.rst:177
msgid "The Inception of AGS - December 14, 2013"
msgstr ""

#: ../../source/bitshares/history.rst:179
msgid "https://bitsharestalk.org/index.php?topic=1397.msg14794#msg14794"
msgstr ""

#: ../../source/bitshares/history.rst:181
msgid "Official AGS Announcement - December 25, 2013"
msgstr ""

#: ../../source/bitshares/history.rst:183
msgid "https://bitsharestalk.org/index.php?topic=2644.msg32817#msg32817"
msgstr ""

#: ../../source/bitshares/history.rst:185
msgid "February 28 Snapshot Announced - January 26, 2014"
msgstr ""

#: ../../source/bitshares/history.rst:187
msgid "https://bitsharestalk.org/index.php?topic=2591.45"
msgstr ""

#: ../../source/bitshares/history.rst:189
msgid "Bitshares X Whitepaper - February 14th, 2014"
msgstr ""

#: ../../source/bitshares/history.rst:191
msgid "https://docs.google.com/document/d/1RLcjSXWuU9vBJzzqLEXVACSCdn8zXKTTJRN_LfoCjNY/edit?pli=1#"
msgstr ""

#: ../../source/bitshares/history.rst:193
msgid "TaPos with a Trustee - March 28, 2014"
msgstr ""

#: ../../source/bitshares/history.rst:195
msgid "https://bitsharestalk.org/index.php?topic=3865.msg48605#msg48605"
msgstr ""

#: ../../source/bitshares/history.rst:197
msgid "BitShares X released by DACsunlimited, July 19th, 2014"
msgstr ""

#: ../../source/bitshares/history.rst:199
msgid "https://bitsharestalk.org/index.php?topic=5750.0"
msgstr ""

#: ../../source/bitshares/history.rst:201
msgid "In addition there are numerous threads discussing The Great Consolidation."
msgstr ""

#: ../../source/bitshares/index.rst:3
msgid "BitShares 2.0"
msgstr ""

#: ../../source/bitshares/index.rst:5 ../../source/bitshares/whatis.rst:5
msgid ""
"BitShares is a technology supported by next generation entrepreneurs, "
"investors, and developers with a common interest in finding free market "
"solutions by leveraging the power of globally decentralized consensus and"
" decision making. Consensus technology has the power to do for economics "
"what the internet did for information. It can harness the combined power "
"of all humanity to coordinate the discovery and aggregation of real-time "
"knowledge, previously unobtainable. This knowledge can be used to more "
"effectively coordinate the allocation of resources toward their most "
"productive and valuable use."
msgstr ""

#: ../../source/bitshares/index.rst:14 ../../source/bitshares/whatis.rst:3
msgid "What is BitShares"
msgstr ""

#: ../../source/bitshares/index.rst:16
msgid ""
"We have compile a some articles that give a brief overview over how "
"BitShares started, evolved and why it is where it is today. We recognize "
"that BitShares has changed significantly over the last years and now feel"
" confident to have a promising and very stable software that will improve"
" steadily at a pace that partners and customers can follow easily."
msgstr ""

#: ../../source/bitshares/index.rst:23
msgid ""
"If you are totally new to BitShares and want to get started right away, "
"we recommend that you take a look at the :doc:`Getting Started <user"
"/first-steps-users>` guide!"
msgstr ""

#: ../../source/bitshares/index.rst:36
msgid "Guides"
msgstr ""

#: ../../source/bitshares/index.rst:38
msgid ""
"Since BitShares is a software with a variety of features and "
"possibilities, not only for developers but also for end-users and "
"merchants, we have collected several guides for each group that should "
"help think things through."
msgstr ""

#: ../../source/bitshares/installation/Build.rst:3
msgid "Building from Sources"
msgstr ""

#: ../../source/bitshares/installation/Build.rst:6
msgid "Downloading the sources"
msgstr ""

#: ../../source/bitshares/installation/Build.rst:8
msgid ""
"The sources can be downloaded from github as described :doc:`here "
"<../installation/Sources>`."
msgstr ""

#: ../../source/bitshares/installation/Build.rst:12
msgid "Dependencies"
msgstr ""

#: ../../source/bitshares/installation/Build.rst:15
msgid "Development Toolkit"
msgstr ""

#: ../../source/bitshares/installation/Build.rst:17
msgid ""
"The following dependencies were necessary for a clean install of Ubuntu "
"14.04 LTS:"
msgstr ""

#: ../../source/bitshares/installation/Build.rst:28
msgid "Boost 1.57"
msgstr ""

#: ../../source/bitshares/installation/Build.rst:30
msgid ""
"The Boost which ships with Ubuntu 15.04 is too old.  You need to download"
" the Boost tarball for Boost 1.57.0 (Note, 1.58.0 requires C++14 and will"
" not build on Ubuntu LTS; this requirement was an accident, see `this "
"mailing list post`_)."
msgstr ""

#: ../../source/bitshares/installation/Build.rst:52
msgid "Building BitShares"
msgstr ""

#: ../../source/bitshares/installation/Build.rst:54
msgid ""
"After downloading the BitShares sources according to :doc:`the download "
"page <./Sources>`, we can run ``cmake`` for configuration and compile "
"with ``make``:"
msgstr ""

#: ../../source/bitshares/installation/Build.rst:63
msgid ""
"Note that the environmental variable ``$BOOST_ROOT`` should point to your"
" install directory of boost if you have installed it manually."
msgstr ""

#: ../../source/bitshares/installation/Build.rst:67
msgid "Updating BitShares"
msgstr ""

#: ../../source/bitshares/installation/Build.rst:69
msgid ""
"A quick tutorial on updating your BitShares binaries can be found "
":doc:`here <Upgrades>`."
msgstr ""

#: ../../source/bitshares/installation/Build.rst:73
msgid "Distribution Specific Settings"
msgstr ""

#: ../../source/bitshares/installation/Build.rst:76
msgid "Ubuntu 14.04"
msgstr ""

#: ../../source/bitshares/installation/Build.rst:78
msgid "As ``g++-4.9`` isn't available in 14.04 LTS, you need to do this first:"
msgstr ""

#: ../../source/bitshares/installation/Build.rst:85
msgid "If you get build failures due to abi incompatibilities, just use gcc 4.9"
msgstr ""

#: ../../source/bitshares/installation/Build.rst:93
msgid "Ubuntu 15.04"
msgstr ""

#: ../../source/bitshares/installation/Build.rst:95
msgid ""
"Ubuntu 15.04 uses gcc 5, which has the c++11 ABI as default, but the "
"boost libraries were compiled with the cxx11 ABI (this is an issue in "
"many distros). If you get build failures due to abi incompatibilities, "
"just use gcc 4.9:"
msgstr ""

#: ../../source/bitshares/installation/Download.rst:3
msgid "Downloads"
msgstr ""

#: ../../source/bitshares/installation/Download.rst:6
msgid "Precompile Executables"
msgstr ""

#: ../../source/bitshares/installation/Download.rst:8
msgid "Compiled executeables are available for `download from github`_."
msgstr ""

#: ../../source/bitshares/installation/Sources.rst:3
msgid "Sources"
msgstr ""

#: ../../source/bitshares/installation/Sources.rst:5
msgid "The sources are located at `github`_ and can be downloaded with `git`."
msgstr ""

#: ../../source/bitshares/installation/Sources.rst:12
msgid ""
"Since the repository makes use of so called *submodules* which are "
"repositories on their own, we need to refresh those."
msgstr ""

#: ../../source/bitshares/installation/Upgrades.rst:3
msgid "Upgrading"
msgstr ""

#: ../../source/bitshares/installation/Upgrades.rst:6
msgid "Recompiling from Sources"
msgstr ""

#: ../../source/bitshares/installation/Upgrades.rst:8
msgid "For upgrading from source you only need to execute:"
msgstr ""

#: ../../source/bitshares/installation/index.rst:3
msgid "Installation"
msgstr ""

#: ../../source/bitshares/installation/index.rst:5
msgid ""
"This section describes the installation procedure and the build process "
"for those that want to compile from the source."
msgstr ""

#: ../../source/bitshares/investor/claim.rst:3
msgid "Claim your Investment"
msgstr ""

#: ../../source/bitshares/investor/claim.rst:5
msgid ""
"You are considered as a AngelShare holder if you have donated BTC or BTS "
"to one of these addresses:"
msgstr ""

#: ../../source/bitshares/investor/claim.rst:8
msgid "**BTC**: ``1ANGELwQwWxMmbdaSWhWLqBEtPTkWb8uDc``"
msgstr ""

#: ../../source/bitshares/investor/claim.rst:9
msgid "**PTS**: ``PaNGELmZgzRQCKeEKM6ifgTqNkC4ceiAWw``"
msgstr ""

#: ../../source/bitshares/investor/claim.rst:11
msgid ""
"There is also an `AngelShare Explorer <http://www1.agsexplorer.com/>`_ "
"specifically for these donations"
msgstr ""

#: ../../source/bitshares/investor/claim.rst:14
#, python-format
msgid ""
"AngelShares have been gifted 50% of the initial BTS shares. The other 50%"
" went to AngelShares, the other went to holders of PTS."
msgstr ""

#: ../../source/bitshares/investor/claim.rst:18
msgid "Claiming your Stake"
msgstr ""

#: ../../source/bitshares/investor/claim.rst:20
msgid ""
"In order to claim your BTS, you need to look in your bitcoin wallet and "
"search for transactions the the above mentioned address. The keys that "
"correspond to the inputs of that transaction are what you need to obtain "
"your BTS (`FAQ <http://www1.agsexplorer.com/ags101>`)."
msgstr ""

#: ../../source/bitshares/investor/claim.rst:25
msgid ""
"If you have located the private keys (in wallet import format - WIF), you"
" can safely import them into your BitShares account using the *Import "
"Keys* tools in the Wallet Management Console of your BitShares wallet."
msgstr ""

#: ../../source/bitshares/investor/claim.rst:29
msgid "If, however, you only have a `wallet.dat` file, you will need to"
msgstr ""

#: ../../source/bitshares/investor/claim.rst:31
msgid "install BitShares 0.9.3"
msgstr ""

#: ../../source/bitshares/investor/claim.rst:32
msgid "create an account in the BitShares 0.9.3 wallet"
msgstr ""

#: ../../source/bitshares/investor/claim.rst:33
msgid "import the `wallet.dat` file into your account"
msgstr ""

#: ../../source/bitshares/investor/claim.rst:34
msgid ""
":doc:`export a BitShares 2.0 compatible backup file <../migration/howto-"
"exporting-wallet>`"
msgstr ""

#: ../../source/bitshares/investor/claim.rst:35
msgid ""
":doc:`import the new backup into BitShares 2.0 <../migration/howto-"
"importing-wallet>`"
msgstr ""

#: ../../source/bitshares/investor/claim.rst:36
msgid ""
":doc:`claim you funds from the BitShares 2.0 genesis block <../migration"
"/howto-importing-wallet>`"
msgstr ""

#: ../../source/bitshares/investor/index.rst:3
msgid "Investor Guide"
msgstr ""

#: ../../source/bitshares/investor/index.rst:5
msgid ""
"This guide is still under construction. Please excuse if what you are "
"searching for is not yet available"
msgstr ""

#: ../../source/bitshares/investor/index.rst:8
msgid ""
"The investor guide serves as an entry point for existing and potential "
"investors in the BitShares ecosystem. We here merely discuss the BTS "
"token as well as investment opportunities available within BitShares "
"itself and deliberately do not advertise 3rd party businesses. Please be "
"reminded that this is an information platform and thus we do not give "
"investment advice."
msgstr ""

#: ../../source/bitshares/migration/blockchain-transition.rst:3
msgid "Blockchain Upgrade"
msgstr ""

#: ../../source/bitshares/migration/blockchain-transition.rst:5
msgid ""
"BitShares 2.0 will be initialized with what is called a *Genesis Block*. "
"That genesis block will be constructed from the balances of BitShares "
"1.0. BitShares 1.0 offers many features that need to be migrated into "
"BitShares 2.0. To simplify the process and reduce the risk of errors, the"
" following conditions will be met:"
msgstr ""

#: ../../source/bitshares/migration/blockchain-transition.rst:11
msgid "**Funds**:"
msgstr ""

#: ../../source/bitshares/migration/blockchain-transition.rst:13
msgid ""
"**BTS Tokens**: All BTS balances will be migrated 1:1. The supply not "
"change!"
msgstr ""

#: ../../source/bitshares/migration/blockchain-transition.rst:14
msgid "**User-Issed-Assets**: All UAI tokens will be migrated 1:1"
msgstr ""

#: ../../source/bitshares/migration/blockchain-transition.rst:15
msgid ""
"**BitAssets**: Because the new chain is a simple migration and should "
"retain all the same \"perceived value\", all BitAssets and short "
"positions are migrated 1:1."
msgstr ""

#: ../../source/bitshares/migration/blockchain-transition.rst:19
msgid "**Account Names**:"
msgstr ""

#: ../../source/bitshares/migration/blockchain-transition.rst:21
msgid ""
"Under BitShares 2.0, accounts are transferable and have different prices "
"based upon the \"quality\" of the account name. Any \"premium\" names "
"registered on or after 2015-06-08 (US Eastern time) will be given the "
"prefix “bts-“ or similar after the migration. All account names "
"registered on or after 2015-06-18 (US Eastern time) will be prefixed with"
" \"bts-\" unless they were registered using the BitShares Faucet."
msgstr ""

#: ../../source/bitshares/migration/blockchain-transition.rst:28
msgid "**Premium Name**:  No numbers and has vowles"
msgstr ""

#: ../../source/bitshares/migration/blockchain-transition.rst:29
msgid "**Cheap Name**:    Has numbers or no vowels"
msgstr ""

#: ../../source/bitshares/migration/blockchain-transition.rst:31
msgid ""
"All other account names will be migrated with their corresponding "
"owner/active keys."
msgstr ""

#: ../../source/bitshares/migration/blockchain-transition.rst:34
msgid ""
"**Open Orders**: Open orders (except open short positions) will **not** "
"migrate and the funds will be credited to the corresponding owners."
msgstr ""

#: ../../source/bitshares/migration/blockchain-transition.rst:37
msgid ""
"**Open Shorts**: Short orders will be migrated to BitShares 2.0 on a 1:1 "
"ratio. You collateral will be imported as a separated account (e.g. "
"``usd-collateral-holder-124``) under your control."
msgstr ""

#: ../../source/bitshares/migration/blockchain-transition.rst:41
msgid ""
"**Transaction History**: Transaction histories of BitShares 1.0 will be "
"inaccessible in BitShares 2.0."
msgstr ""

#: ../../source/bitshares/migration/blockchain-transition.rst:43
msgid ""
"**Vesting Balances**: Vesting balances will migrate under the existing "
"terms, if two or more vesting balances were partially claimed as part of "
"the same transaction prior to the snapshot the vesting balances may be "
"merged into a single balance."
msgstr ""

#: ../../source/bitshares/migration/blockchain-transition.rst:47
msgid ""
"**Unclaimed Delegate Pay**: Delegates that did not claim their pay prior "
"to the snapshot will be able to claim their pay by importing their "
"corresponding keys similar to any other balance."
msgstr ""

#: ../../source/bitshares/migration/blockchain-transition.rst:51
msgid ""
"**Assets**: User issued assets and market pegged assets will migrated "
"with their corresponding issuer and holders."
msgstr ""

#: ../../source/bitshares/migration/blockchain-transition.rst:54
msgid ""
"**Deprecated Features**: Some features have turned out to be unreliable "
"or impractical and will thus deprecate:"
msgstr ""

#: ../../source/bitshares/migration/blockchain-transition.rst:58
msgid "**Wall Messages** will not be migrated as the feature is now deprecated"
msgstr ""

#: ../../source/bitshares/migration/blockchain-transition.rst:59
msgid ""
"Asset **description information** is no longer part of the blockchain "
"state and will not be migrated"
msgstr ""

#: ../../source/bitshares/migration/blockchain-transition.rst:61
msgid ""
"Account **public data** is deprecated and is no longer part of the "
"blockchain state"
msgstr ""

#: ../../source/bitshares/migration/blockchain-transition.rst:62
msgid ""
"BitShares URL scheme: `bts://` will be deprecated due to migration to "
"hosted web wallets"
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:3
msgid "Exporting Your Wallet"
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:5
msgid ""
"In this tutorial, we will export you wallet including all keys to access "
"your accounts and funds, into a single JSON-formated file. Note that your"
" private keys will be encrypted and you will be required to provide the "
"corresponding pass phrase when importing your funds into BitShares 2.0."
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:11
msgid "BitShares 1.0 Full Client"
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:13
msgid ""
"Since the snapshot has taken place already, all you need to do now to get"
" access to your funds in BitShares 2.0 is described in the following."
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:16
msgid ""
"Firstly, you need to upgrade your BitShares client to version 0.9.3c. To "
"do the upgrade you need to:"
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:19
msgid "download the installation file from the `bitshares webpage`_"
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:20
msgid "uninstall your previous version of the BitShares client"
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:21
msgid "install the new version"
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:26
msgid "Synchronize your Wallet"
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:28
msgid ""
"If you see all your funds in your wallet, you can safely skip this "
"paragraph."
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:31
msgid ""
"We now need to sync with the blockchain. This is only necessary with if "
"you think that since the last time you did the syncing there have been "
"some new transactions involving any of your accounts."
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:35
msgid ":doc:`legacy-blockchain`"
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:37
msgid ""
"You can see the syncing progress from the status bar or from the ``info``"
" command in the console (``account list->advanced settings->console``). "
"After having *synced* the blockchain, your wallet will automatically "
"attempt to rescan the blockchain for new transcations. Depending on the "
"amount of accounts in your wallet, this steps should only take very few "
"minutes."
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:43
msgid ""
"Since BitShares 0.9.3c, we have a Graphene compatible Export Keys "
"function that can be accessed in two ways:"
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:46
msgid "by accessing it in the main menu"
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:47
msgid "by issuing a command in the console."
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:50
msgid "Export via the main menu"
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:52
msgid ""
"Just select ``File Menu -> Export Wallet``  and you'll be asked to select"
" a file location where the keys will be exported."
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:55
msgid ""
"Due to a known bug, if you are on Windows the only option that will work "
"for you is the console command - the file exported using the menu will "
"not be compatible with BTS 2.0. This refers to Windows only."
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:60
msgid "Export via the console"
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:62
msgid "navigate to the console: Account List -> Advanced Settings -> Console"
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:63
msgid ""
"type: wallet_export_keys [full path to the file]/[file name].json e.g. on"
" Windows: ``wallet_export_keys C:\\Users\\[your user "
"name]\\Desktop\\keys.json`` e.g. on Mac: ``wallet_export_keys "
"/Users/[your user name]/Desktop/keys.json`` e.g. on Linux: "
"``wallet_export_keys /home/[your user name]/Desktop/keys.json``"
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:67
msgid "Please replace ``[your user name]`` with your Windows account name."
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:68
msgid "and hit Enter"
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:70
msgid ""
"The exported wallet file will be encrypted with your pass phrase! Make "
"sure to remember it when trying to use that file again!"
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:72
msgid ""
"If you are on Windows and your file path tries to access the C drive "
"directly (e.g. C:\\keys.json) you might need to run the BitShares client "
"as an administrator. So the least complicated option will be to aim for "
"the desktop as in the example above."
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:83
msgid "wallet.bitshares.org"
msgstr ""

#: ../../source/bitshares/migration/howto-exporting-wallet.rst:85
msgid ""
"The keys of the `web wallet`_ can be exported simply by downloading a "
"backup wallet. It can be obtained from the web wallet's preferences: "
"(`Account List->Advanced Settings->Wallet`)."
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:3
msgid "Importing Your Wallet"
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:6
#: ../../source/bitshares/tutorials/vesting-claim.rst:6
msgid "Web Wallet"
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:8
msgid ""
"The web wallet of BitShares 2.0 has a **Wallet management Console.** that"
" will help you import your funds. It can be access via `BitShares 2.0: "
"Settings -> Wallets`"
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:16
msgid ""
"In order to import your existing accounts and claim all your funds you "
"need to choose ``Import Keys``."
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:19
msgid ""
"If loading the file files with ``invalid format`` please ensure that you "
"have followed the steps described :doc:`howto-exporting-wallet` and make "
"sure to click ``Import Keys`` and **not** ``Restore Backup``."
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:28
msgid ""
"Here you can provide the wallet backup file produced from BitShares "
"0.9.3c and the pass phrase. Depending on the size of your import file, "
"this step may take some time to auto-complete. Please be patient."
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:37
msgid ""
"The wallet will list all of your accounts including the number of private"
" keys stored in the account names accordingly. The more often you have "
"used your account, the higher this number should be. Confirm by pressing "
"``Import``."
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:46
msgid ""
"The wallet management console will now give an overview over unclaimed "
"balances."
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:53
msgid "If you click on ``Balance Claim`` you will be brought to this screen."
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:60
msgid ""
"You are asked to define where to put your individual balances if you have"
" multiple accounts."
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:63
msgid ""
"After confirming all required steps, your accounts and the balances "
"should appear accordingly."
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:66
msgid ""
"After importing your accounts and balances, we recommend to make a new "
"backup of your wallet that will then contain access to your newly "
"imported accounts and corresponding balances."
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:71
msgid "CLI wallet"
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:73
msgid "The wallet backup file can be imported by ::"
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:77
msgid "Note that this doesn't automatically claim the balances."
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:80
msgid "Claiming Balances"
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:82
msgid ""
"For each account ``<my_account_name>`` in your wallet (run "
"``list_my_accounts`` to see them):::"
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:86
msgid ""
"In the release tag, this will create a full backup of the wallet after "
"every key it imports. If you have thousands of keys, this is quite slow "
"and also takes up a lot of disk space. Monitor your free disk space "
"during the import and, if necessary, periodically erase the backups to "
"avoid filling your disk. The latest code only saves your wallet after all"
" keys have been imported."
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:92
msgid ""
"The command above will only import your keys into the wallet and will "
"**not** claim your funds. In order to claim the funds you need to "
"execute:::"
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:97
msgid ""
"If you would like to preview this claiming transaction, you can replace "
"the ``true`` with a ``false``. That way, the transaction will not be "
"broadcast."
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:101
msgid "To verify the results, you can run:::"
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:106
msgid "Manually claim balances"
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:108
msgid "Balances can be imported one by one. The proper syntax to do so is::"
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet.rst:112
msgid ""
"But I always import my accounts and then use the GUI to import my "
"balances cause it's way easier."
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet-remarks.rst:2
msgid "Migration Remarks"
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet-remarks.rst:14
msgid "Remarks on Private Keys"
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet-remarks.rst:15
msgid ""
"Depending on the users (trade) activity and investors behavior please "
"also note the following:"
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet-remarks.rst:18
msgid ""
"**TITAN Transactions**: If there is a chance that you might have received"
" a TITAN transaction (default transaction format) since you last opened "
"your wallet, you are required to completely synchronize with the "
"BitShares 1.0 blockchain to catch that transaction and generate the "
"corresponding private key. After that, you can use the graphene-"
"compatible wallet export function."
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet-remarks.rst:25
msgid ""
"**Market transactions**: Each market order is associated a key that is "
"derived when placing your order and is hence part of your wallet. Please "
"note that for the transition to BitShares 2.0, all open orders (except "
"short orders) will be closed and the funds returned to their owners."
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet-remarks.rst:31
msgid ""
"**Cold Storage Funds**: You cold storage funds can be claimed by simply "
"importing your cold private key into BitShares 2.0. This will result in a"
" transaction that claims your funds and puts them into your account."
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet-remarks.rst:36
msgid ""
"**PTS/AGS donators**: You can import your corresponding private keys into"
" BitShares 2.0 directly to claim your funds. Note that, since the web "
"wallet cannot parse your `wallet.dat` file, you may be required to "
"manually dump your private keys. with a 3rd party tool. If you feel not "
"comfortable with this, we recommend you import your `wallet.dat` file "
"into the BitShares 1.0 client and export a graphene-compatible wallet "
"file that can be imported in the BitShares 2.0 web wallet."
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet-remarks.rst:46
msgid "Technical Explanation"
msgstr ""

#: ../../source/bitshares/migration/howto-importing-wallet-remarks.rst:47
msgid ""
"The BitShares 2.0 wallet architecture is vastly different than BitShares "
"1.0. In BitShares 1.0, each account consists of dozens or even thousands "
"of keys, each of which is controlling a small portion of your balance and"
" for TITAN users, none of the balances associated with your account use "
"the same key as your account.  Under BitShares 2.0, all of these "
"\"balances\" become unique accounts rather than a single logical account."
" The BitShares 2.0 wallet has an \"import\" interface that allows you to "
"specify a set of private keys and the name of an account that you would "
"like to receive all of the funds associated with those keys. Then it "
"generates a transaction that spends the full balances from all accounts "
"associated with those keys to your new unified BitShares 2.0 account. The"
" BitShares 0.9.x wallet provides a utility to dump all private keys "
"associated with a given account to make the migration process easy."
msgstr ""

#: ../../source/bitshares/migration/index.rst:3
msgid "Migrating from BitShares 1.0 to BitShares 2.0"
msgstr ""

#: ../../source/bitshares/migration/index.rst:5
msgid ""
"This migration tutorial is relevant only to those customers and investors"
" that have participated in BitShares 1.0. We show improvements, new "
"features and give assistance for claiming your funds in BitShares 2.0."
msgstr ""

#: ../../source/bitshares/migration/legacy-blockchain.rst:3
msgid "Legacy BitShares 0.9.3 Blockchain Download"
msgstr ""

#: ../../source/bitshares/migration/legacy-blockchain.rst:5
msgid ""
"One crucial step in teh migration still takes quite some time and is "
"technically invovled for those that do **not** see their funds in "
"BitShares 0.9.3: The need to download the blockchain from the legacy "
"network. Since only a few nodes still serve the raw blockchain data, we "
"here provide the full blockchain to download:"
msgstr ""

#: ../../source/bitshares/migration/legacy-blockchain.rst:11
msgid ":download:`Blockchain Torrent <BitShares-0.9.3-full-blockchain.torrent>`"
msgstr ""

#: ../../source/bitshares/migration/legacy-blockchain.rst:14
msgid "Usage"
msgstr ""

#: ../../source/bitshares/migration/legacy-blockchain.rst:16
msgid ""
"Download the Torrent and use it to obtain a full copy of the `chain/` "
"folder"
msgstr ""

#: ../../source/bitshares/migration/legacy-blockchain.rst:17
msgid "Move this chain folder into your BitShares shared directory:"
msgstr ""

#: ../../source/bitshares/migration/legacy-blockchain.rst:19
msgid "Windows: `%APPDATA%/BitShares`"
msgstr ""

#: ../../source/bitshares/migration/legacy-blockchain.rst:20
msgid "Mac: `~/Library/Application Support/BitShares`"
msgstr ""

#: ../../source/bitshares/migration/legacy-blockchain.rst:21
msgid "Linux: `~/.BitShares`"
msgstr ""

#: ../../source/bitshares/migration/legacy-blockchain.rst:23
msgid ""
"Start BitShares 0.9.3 (not older) and let it re-index the database (be "
"patient)"
msgstr ""

#: ../../source/bitshares/migration/legacy-blockchain.rst:24
msgid "Provide your Passphrase"
msgstr ""

#: ../../source/bitshares/migration/legacy-blockchain.rst:25
msgid ""
"Goto `account list->advanced settings->console` and run `rescan`. "
"Depending on the amount of accounts in your wallet, this steps should "
"only take very few minutes. You can see the syncing progress from the "
"status bar or from the info command in the console."
msgstr ""

#: ../../source/bitshares/migration/legacy-blockchain.rst:26
msgid ""
"After completion, you should now see your funds again and can continue "
"with exporting your wallet for BitShares 2"
msgstr ""

#: ../../source/bitshares/migration/legacy-blockchain.rst:29
msgid "Verification"
msgstr ""

#: ../../source/bitshares/migration/what-changed.rst:3
msgid "What has Changed since BitShares 0.9?"
msgstr ""

#: ../../source/bitshares/migration/what-changed.rst:5
msgid ""
"**BitAssets are Contracts-For-Difference**: Our research has identified "
"an improved mechanism to achieve a solid *peg* of bitAssets to its "
"underlay. BitAssets like the bitUSD in BitShares 2.0 will always trade "
"for *at least* the value of its underlying asset, i.e. $1. We have "
"summarized the economical analysis and incentives for market participants"
" here: `bitAssets 2.0`_"
msgstr ""

#: ../../source/bitshares/migration/what-changed.rst:12
msgid ""
"**Faster Blocks**: Initially, the BitShares 2.0 blockchain will come with"
" 3 seconds block interval with the option to reduce down to 1 second if "
"shareholders agree."
msgstr ""

#: ../../source/bitshares/migration/what-changed.rst:16
msgid ""
"**Industrial Performance**: BitShares 2.0 can support massive load and "
"works well beyond 100k transactions per second. Find out how we achieve "
"`industrial performance and scalability`_."
msgstr ""

#: ../../source/bitshares/migration/what-changed.rst:20
msgid ""
"**New Reactive UI**: The BitShares 1.0 user interface was powerful but "
"lacking in responsiveness and perfomance. For Bitshares 2.0 we've "
"reimplemented the whole wallet using the React.js framework developed by "
"Facebook, which is well-known for having excellent performance. The new "
"BitShares UI is an entirely browser-based wallet, with private keys "
"maintained in the browser. We expect a flourishing ecosystem of forked "
"and tweaked wallets based off of our UI."
msgstr ""

#: ../../source/bitshares/migration/what-changed.rst:25
msgid ""
"**Accounts must be registered**: In BitShares 2.0 we have separated "
"*authorities* from transaction partners. Hence, if Alice wants to send "
"funds to Bob, it may be required that only Celine signs for that "
"transaction. Also, BitShares 2.0 has `a referral program`_. Both features"
" combined make it necessary that participants *register* an account on "
"the blockchain."
msgstr ""

#: ../../source/bitshares/migration/what-changed.rst:32
msgid ""
"**No more Hierarchies in Account Names**: In BitShares 1, there have been"
" hierarchies in account names. Namely, you could only create a sub-"
"account ``home.wallet`` if you also owned ``wallet``. In BitShares 2.0, "
"these hierarchies no longer exist and to register ``home.wallet`` you "
"don't need to own ``wallet``."
msgstr ""

#: ../../source/bitshares/migration/what-changed.rst:38
msgid ""
"**Explicit Privacy**: The *TITAN* technology in BitShares 2.0 slowed down"
" blockchain processing significantly. Because of this and because TITAN "
"did not really offer good privacy, we eliminated TITAN as a default "
"transaction feature. Hence: **Account transactions are public now as "
"well.** However, since we recognize the value of financial privacy, we "
"offer *blinded* transactions that hide the transferred *amount*, and "
"*stealth* transactions that hide the sender and receiver. A combination "
"of both is also possible."
msgstr ""

#: ../../source/bitshares/migration/what-changed.rst:48
msgid ""
"**Prices are Fractions**: To circumvent rounding errors, all prices in "
"BitShares 2.0 are represented as fractions."
msgstr ""

#: ../../source/bitshares/migration/what-changed.rst:52
msgid ""
"**Delegates are now Witnesses and Payed Positions are now Budget Items**:"
" Since we have separated the business part from the block producing part,"
" we now call block producers (formerly known as *delegates*) witnesses, "
"while the additional payed position for workers are called budget items."
msgstr ""

#: ../../source/bitshares/migration/what-is-new.rst:3
msgid "What is New in BitShares 2.0"
msgstr ""

#: ../../source/bitshares/migration/what-is-new.rst:5
msgid ""
"**Votable Network Parameters**: BitShares 2.0 will allow its shareholders"
" to fine-tune any parameter available to the protocol. This includes, "
"block size, block interval, but also the payment for block producers and "
"transaction fees."
msgstr ""

#: ../../source/bitshares/migration/what-is-new.rst:10
msgid ""
"**Flexible and Dynamic Access Control**: BitShares 2.0 allows customers "
"and participants a flexible and dynamic access to its funds or account "
"handle. A so called *Authority* can consist of a flat hierarchy similar "
"to *multi-signature* in Bitcoin, but could also support tree hierarchies "
"never to be seen before. Read more about this about `dynamic account "
"permissions`_."
msgstr ""

#: ../../source/bitshares/migration/what-is-new.rst:17
msgid ""
"**Transferable Account Names**: Since Control over Funds is separated "
"from the control over an account, we can have transferable account names "
"that are registered on the blockchain. Named accounts allows for much "
"easier transfers because no cryptic strings needs to be handed out. Read "
"more about `transferable named accounts`_."
msgstr ""

#: ../../source/bitshares/migration/what-is-new.rst:23
msgid ""
"**On-Chain Proposed Transactions**: In traditional crypto currencies, a "
"multi-signature transaction has to be transfered to its corresponding "
"signers on separated communication channels (off-chain). BitShares 2.0 "
"allows to propose transactions on the chain and have the signers be "
"notified for their required signature automatically. No more manual "
"communications are required."
msgstr ""

#: ../../source/bitshares/migration/what-is-new.rst:30
msgid ""
"**New Full-Node/Client Concept**: We recognize the hassles some people "
"had when synchronizing the BitShares 1.0 blockchain with the heavy-"
"weighted BitShares full client. In order to offer more comfort and a "
"faster trading experience, we decided to separated the user-interface "
"from the block syncing core component that connects to the peer-to-peer "
"network. Of course, both are open source and a full node can run easily, "
"we understand that some users mainly prefer to use the frontend not "
"bothering about the blockchain."
msgstr ""

#: ../../source/bitshares/migration/what-is-new.rst:39
msgid ""
"**Referral Program**: PayPal and Dwolla showed the success of referral "
"programs, a program that could easily and cheaper be implemented in a "
"decentralized software protocol. Hence we took our chance and implemented"
" a blockchain based referral program. From every transaction fee, paid by"
" a customer you referred, you will get a fraction. Of course, this "
"fraction can be tuned by shareholders! Read more about the `referral "
"program`_."
msgstr ""

#: ../../source/bitshares/migration/what-is-new.rst:47
msgid ""
"**Recurring & Scheduled Payments**: We wanted to offer a way to have our "
"rent payed automatically. So we implemented it in the blockchain. In "
"BitShares 2.0, participants are capable of allowing others to withdraw "
"funds from your account. Of course, you can define a daily/weekly or "
"monthly limit. Read more about `recurring and scheduled payments`_."
msgstr ""

#: ../../source/bitshares/migration/what-is-new.rst:54
msgid ""
"**Additional Privatized BitAssets**: In contrast to Market Pegged Assets "
"(also known as BitAssets) that have a price feed published by witnesses "
"that have approval of shareholders, a *privatized* bitasset allows to "
"create market pegged assets that have an individual set of price feed "
"publishers that do not need shareholders' approval. Hence, everyone can "
"create a privatized bitAsset to track an individual value, such as "
"indices, or binary predictions."
msgstr ""

#: ../../source/bitshares/papers/index.rst:6
msgid "Whitepapers"
msgstr ""

#: ../../source/bitshares/papers/index.rst:9
msgid "BitShares 2.0: General Overview"
msgstr ""

#: ../../source/bitshares/papers/index.rst:11
msgid ""
"**Abstract**: BitShares 2.0 is an industrial-grade decentralized platform"
" built for high-performance financial smart contracts. The decentralized "
"exchange that allows for trading of arbitrary pairs without counterparty "
"risk facilitates only one out of many available features. Market-pegged "
"assets, such as the bitUSD, are crypto tokens that come with all the "
"advantages of traditional cryptocurrencies like bitcoin but trade for at "
"least the value of their underlying asset, e.g. $1. Furthermore, "
"BitShares represents the first decentralized autonomous company that lets"
" its shareholders decide on its future direction and products. This paper"
" gives a brief overview over the whole BitShares platform, recapitulates "
"known blockchain technologies and redefines state-of-the-art."
msgstr ""

#: ../../source/bitshares/papers/index.rst:32
msgid "BitShares 2.0: Financial Smart Contract Platform"
msgstr ""

#: ../../source/bitshares/papers/index.rst:34
msgid ""
"**Abstract**: Ever since Satoshi Nakamoto released his whitepaper and "
"corresponding software for bitcoin, the cryptocurrency ecosystem has "
"continued to grow at a rapid pace. In the beginning, Bitcoin created a "
"platform that anyone could use to transfer value across the internet "
"without middlemen, banks or counterparty risk. However, once bitcoin's "
"basic blockchain consensus technology became established and stable, "
"people began to discuss whether blockchain technology could also be "
"applied to enable the trade of multiple assets without the need for a "
"broker or centralized clearinghouse. BitShares has created such a "
"technology, and has coined the term \"decentralized exchange\" (DEX) to "
"describe our Bitcoin 2.0 platform. Currently, it supports trade not only "
"in digital assets, but also traditional financial instruments and "
"securities on the blockchain. The two main tools we provide for the "
"creation of these instruments, market pegged assets (MPA) and user-issued"
" assets (UIA), are discussed in detail in this paper."
msgstr ""

#: ../../source/bitshares/papers/index.rst:59
msgid "BitShares 2.0: Stress-Test Results"
msgstr ""

#: ../../source/bitshares/papers/index.rst:61
msgid ""
"**Abstract**: BitShares 2.0 is an industrial-grade decentralized platform"
" built for high-performance financial smart contracts. In order to show "
"its capabilities in the field, we have conducted a stress test on the "
"public testnet. The testnet has been deployed with the same code base "
"that is used for the BitShares network and has nodes around the globe. "
"Only margin changes have been made to distinguish the testnet from the "
"productive network, properly. A multi-phase stress-test has been proposed"
" and accepted that modifies the maximum transaction size, maximum block "
"size and block confirmation times in the live network during the stress "
"test. Validators have been kept up to date by means of stake-weighted "
"voting."
msgstr ""

#: ../../source/bitshares/papers/index.rst:81
msgid ""
":html:`<!-- Adding the downloads in Sphinx syntax to be sure it is moved "
"to _downloads properly`"
msgstr ""

#: ../../source/bitshares/papers/index.rst:83
msgid ""
":download:`BitShares 2.0: Financial Smart Contract Platform <bitshares-"
"financial-platform.pdf>`"
msgstr ""

#: ../../source/bitshares/papers/index.rst:84
msgid ""
":download:`BitShares 2.0: General Overview                  <bitshares-"
"general.pdf>`"
msgstr ""

#: ../../source/bitshares/papers/index.rst:85
msgid ""
":download:`BitShares 2.0: Stress-Test Results               <bitshares-"
"stresstest.pdf>`"
msgstr ""

#: ../../source/bitshares/papers/index.rst:87
#: ../../source/bitshares/user/assets.rst:110
msgid ":html:`//-->`"
msgstr ""

#: ../../source/bitshares/register-ref.rst:1
msgid "`OpenLedger`_"
msgstr ""

#: ../../source/bitshares/register-ref.rst:2
msgid "`BitShares.org`_"
msgstr ""

#: ../../source/bitshares/register-ref.rst:3
msgid "`Decentral.exchange`_"
msgstr ""

#: ../../source/bitshares/register-ref.rst:4
msgid "BunkerDex (under construction)"
msgstr ""

#: ../../source/bitshares/register-ref.rst:5
msgid "*more to come*"
msgstr ""

#: ../../source/bitshares/tutorials/account-create.rst:3
#: ../../source/bitshares/user/account-create.rst:3
msgid "Account Registration"
msgstr ""

#: ../../source/bitshares/tutorials/account-create.rst:5
msgid ""
"The process of registering a new account on the blockchain consists of "
"two parts:"
msgstr ""

#: ../../source/bitshares/tutorials/account-create.rst:8
msgid "Picking a random brain key and deriving a *priate/public key* pair"
msgstr ""

#: ../../source/bitshares/tutorials/account-create.rst:9
msgid "Create the corresponding account and registering it on the blockchain"
msgstr ""

#: ../../source/bitshares/tutorials/account-create.rst:12
msgid "Brain, Private and Public Key Derivation"
msgstr ""

#: ../../source/bitshares/tutorials/account-create.rst:14
msgid ""
"We can derive a new set auf keys using the ``suggest_brain_key`` command "
"in the :doc:`/apps/cliwallet`. The result will look like this:"
msgstr ""

#: ../../source/bitshares/tutorials/account-create.rst:26
msgid "The hierarchy for these values goes like this:::"
msgstr ""

#: ../../source/bitshares/tutorials/account-create.rst:31
msgid ""
"Hence, if you keep the brain key, you will be able to recover your "
"required keys to access your account and/or funds."
msgstr ""

#: ../../source/bitshares/tutorials/account-create.rst:34
msgid ""
"Even though ``suggest_brain_key`` shows only one private key that will be"
" used for the **owner authority** most wallet implementations will derive"
" an additional second private key to be used for the **active "
"authority**!"
msgstr ""

#: ../../source/bitshares/tutorials/account-create.rst:40
msgid "Creating and Registering an account"
msgstr ""

#: ../../source/bitshares/tutorials/account-create.rst:42
msgid ""
"If you want to create and register a new account on your own because you "
"have the funds in another account and don't want someone else involved, "
"you can make use of the command ``create_account_with_brain_key``:::"
msgstr ""

#: ../../source/bitshares/tutorials/account-create.rst:48
msgid "For our example, we would get:::"
msgstr ""

#: ../../source/bitshares/tutorials/account-create.rst:53
msgid "Registering an Account"
msgstr ""

#: ../../source/bitshares/tutorials/account-create.rst:55
msgid ""
"If you want to register the account of someone else, all you need is the "
"public key. In theory, the BitShares blockchain distinguishes three keys "
"for each account, namely the **owner**, **active**, and the **memo** key."
"  However, for the sake of simplicity, we here make use of only one "
"public key (see example above)."
msgstr ""

#: ../../source/bitshares/tutorials/account-create.rst:61
msgid ""
"In order to register an account, we need an other account that has enough"
" funds to pay the fee for the registration transaction. This account will"
" be called ``registrar_account``. Another account ``referrer_account`` "
"can be registered that will get ``referrer_percentage`` of the referral "
"bonus program. Any registered account can take the role of the referrer. "
"Hence we here say that user ``anonymous`` has referred us. The syntax "
"goes like this:::"
msgstr ""

#: ../../source/bitshares/tutorials/account-create.rst:70
msgid ""
"For our example we say we register a new user called ``mywallet``, use "
"the pubkey derived above and let our account ``myfunds`` pay the fee:::"
msgstr ""

#: ../../source/bitshares/tutorials/account-create.rst:75
msgid ""
"Note that in order to register an account, the registrar (here: "
"``myfunds``) needs to be a **lifetime member**!"
msgstr ""

#: ../../source/bitshares/tutorials/cli-wallet-usage.rst:3
msgid "How to Run and Use the Cli-Wallet"
msgstr ""

#: ../../source/bitshares/tutorials/cli-wallet-usage.rst:5
msgid ""
"The Cli-Wallet is used to interact with the blockchain. Everything that "
"adds new data to the blockchain requires a signature from a private key. "
"These signed transactions can be produced by the cli-wallet."
msgstr ""

#: ../../source/bitshares/tutorials/cli-wallet-usage.rst:10
#: ../../source/bitshares/tutorials/full-node-usage.rst:10
msgid "Download and Install the Witness Node"
msgstr ""

#: ../../source/bitshares/tutorials/cli-wallet-usage.rst:12
msgid ""
"We first need to download, (compile) and install the cli-wallet. All that"
" is needed is described here:"
msgstr ""

#: ../../source/bitshares/tutorials/cli-wallet-usage.rst:20
#: ../../source/bitshares/tutorials/full-node-usage.rst:20
msgid ""
"To reduce compilation time, you can tell the compile infrastructure to "
"only compile the witness node by running."
msgstr ""

#: ../../source/bitshares/tutorials/cli-wallet-usage.rst:27
#: ../../source/bitshares/tutorials/full-node-usage.rst:27
msgid "instead of"
msgstr ""

#: ../../source/bitshares/tutorials/cli-wallet-usage.rst:34
msgid "Executing the cli-wallet"
msgstr ""

#: ../../source/bitshares/tutorials/cli-wallet-usage.rst:36
msgid ""
"All it takes for the cli-wallet to run is a trusted **public API server**"
" to interface with the blockchain. These public API servers are run by "
"businesses and :doc:`individuals <full-node-usage>`. In this example, we "
"use the public API node of OpenLedger and connect via secured websocket "
"connection:"
msgstr ""

#: ../../source/bitshares/tutorials/cli-wallet-usage.rst:50
msgid ""
"This will open the cli-wallet and unless you already have a local wallet,"
" will ask you to provide a passphrase for your local wallet. Once a "
"wallet has been created (default wallet file is ``wallet.json``), it will"
" prompt with"
msgstr ""

#: ../../source/bitshares/tutorials/cli-wallet-usage.rst:59
msgid "The wallet can be unlocked by providing the passphrase:"
msgstr ""

#: ../../source/bitshares/tutorials/cli-wallet-usage.rst:61
msgid "The passphrase is given in clear text and is echoed by the wallet!"
msgstr ""

#: ../../source/bitshares/tutorials/cli-wallet-usage.rst:70
msgid ""
"After this point, you can issue :doc:`any command available to the cli-"
"wallet <../../api/wallet-api>` or construct your :doc:`own transaction "
"manually <construct-transaction>`."
msgstr ""

#: ../../source/bitshares/tutorials/cli-wallet-usage.rst:74
msgid ""
"You can get more detailed information either by pressing `Tab`, twice, or"
" by issuing ``help``. Detailed explanations for most calls are available "
"via"
msgstr ""

#: ../../source/bitshares/tutorials/cli-wallet-usage.rst:82
msgid ""
"Many calls have a obligatory ``broadcast``-flag as last argument. If this"
" flag is ``False``, the wallet will construct and sign, but **not** "
"broadcast the transaction. This can be very useful for a cold storage "
"setup or to verify transactions."
msgstr ""

#: ../../source/bitshares/tutorials/cli-wallet-usage.rst:89
msgid "Opening RPC port"
msgstr ""

#: ../../source/bitshares/tutorials/cli-wallet-usage.rst:91
msgid ""
"The cli-wallet can open a RPC port so that you can interface your "
"application with it. You have the choices of"
msgstr ""

#: ../../source/bitshares/tutorials/cli-wallet-usage.rst:94
msgid "websocket RPC via the ``-r`` parameter, and"
msgstr ""

#: ../../source/bitshares/tutorials/cli-wallet-usage.rst:95
msgid "HTTP RPC via the ``-H`` parameter:"
msgstr ""

#: ../../source/bitshares/tutorials/committee-approve-proposal.rst:3
msgid "How to Approve/Disapprove a Committee Proposal"
msgstr ""

#: ../../source/bitshares/tutorials/committee-approve-proposal.rst:6
#: ../../source/bitshares/tutorials/committee-fee-change.rst:26
msgid "Approve Proposal"
msgstr ""

#: ../../source/bitshares/tutorials/committee-approve-proposal.rst:8
#: ../../source/bitshares/tutorials/committee-fee-change.rst:28
msgid ""
"Now we need to convince the other committee members to approve. We can do"
" so on the blockchain by asking them for approval with ::"
msgstr ""

#: ../../source/bitshares/tutorials/committee-approve-proposal.rst:13
msgid ""
"where ``<proposal-id>`` takes the form ``1.10.xxx`` and identifies the "
"actual proposal to approve."
msgstr ""

#: ../../source/bitshares/tutorials/committee-approve-proposal.rst:17
msgid "Removeing Approval"
msgstr ""

#: ../../source/bitshares/tutorials/committee-approve-proposal.rst:19
msgid ""
"A previous approval can also be removed if the proposal is not yet "
"expired, executed or within the preview period. This is done by:::"
msgstr ""

#: ../../source/bitshares/tutorials/committee-approve-proposal.rst:24
msgid ""
"Note that we now use ``active_approvals_to_remove`` instead of "
"``active_approvals_to_add``."
msgstr ""

#: ../../source/bitshares/tutorials/committee-fee-change.rst:3
msgid "How Committee Proposes a Change in Fee"
msgstr ""

#: ../../source/bitshares/tutorials/committee-fee-change.rst:6
msgid "Create an Proposal"
msgstr ""

#: ../../source/bitshares/tutorials/committee-fee-change.rst:8
msgid ""
"Let's assume we want to propose a new fee for the account creation "
"operation. We want 5 BTS as basic fee and want premium names to cost 2000"
" BTS. Additionally, a price per kbyte for the account creation "
"transaction can be defined. We get"
msgstr ""

#: ../../source/bitshares/tutorials/committee-fee-change.rst:21
msgid "We propose the fee change for account ``<committee_member>`` with:::"
msgstr ""

#: ../../source/bitshares/tutorials/committee-fee-change.rst:33
msgid "where ``1.10.1`` is the id of the proposal in question."
msgstr ""

#: ../../source/bitshares/tutorials/committee-member-create.rst:3
msgid "Creating a New Committee Member"
msgstr ""

#: ../../source/bitshares/tutorials/committee-member-create.rst:5
msgid "We can create a new committee member with:::"
msgstr ""

#: ../../source/bitshares/tutorials/committee-propose-action.rst:3
msgid "Howto Propose Committee Actions"
msgstr ""

#: ../../source/bitshares/tutorials/committee-propose-action.rst:6
msgid "Setting Smartcoin Parameters"
msgstr ""

#: ../../source/bitshares/tutorials/committee-propose-action.rst:8
msgid ""
"This paragraph shows how the committee account can act using the proposed"
" transaction system. Specifically, as an example I'm using the creation "
"of BitShares proposal 1.10.21, a proposal to update a committee-"
"controlled BitAsset to reduce ``maximum_force_settlement_volume`` for "
"asset ``CNY`` from 2000 (20%) to 200 (2%)."
msgstr ""

#: ../../source/bitshares/tutorials/committee-propose-action.rst:14
msgid "First check the asset to see what its current configuration is:"
msgstr ""

#: ../../source/bitshares/tutorials/committee-propose-action.rst:24
msgid "Then check its bitasset object to get the currently active options:"
msgstr ""

#: ../../source/bitshares/tutorials/committee-propose-action.rst:43
msgid ""
"Then do ``update_bitasset`` to update the options. Note we copy-paste "
"other fields from above; there is no way to selectively update only one "
"field."
msgstr ""

#: ../../source/bitshares/tutorials/committee-propose-action.rst:51
msgid ""
"If this was a privatized BitAsset (i.e. a user-issued asset with feed), "
"you could simply set the ``broadcast`` parameter of the above command to "
"``true`` and be done."
msgstr ""

#: ../../source/bitshares/tutorials/committee-propose-action.rst:55
msgid ""
"However this is a committee-issued asset, so we have to use a proposed "
"transaction to update it. To create the proposed transaction, we use the "
"transaction builder API. Create a transaction builder transaction with "
"``begin_builder_transaction`` command:"
msgstr ""

#: ../../source/bitshares/tutorials/committee-propose-action.rst:64
msgid ""
"This returns a numeric handle used to refer to the transaction being "
"built. In the following commands you need to replace ``$HANDLE`` with the"
" number returned by ``begin_builder_transaction`` above."
msgstr ""

#: ../../source/bitshares/tutorials/committee-propose-action.rst:78
msgid ""
"The ``propose_builder_transaction`` command is broken and deprecated. You"
" need to recompile with `this patch "
"<https://github.com/cryptonomex/graphene/commit/7a5c5c476d9762cbba1d745447191523ca5cd601>`__"
" in order to use the new ``propose_builder_transaction2`` command which "
"allows you to set the proposing account."
msgstr ""

#: ../../source/bitshares/tutorials/committee-propose-action.rst:84
msgid "Then set fees, sign and broadcast the transaction:"
msgstr ""

#: ../../source/bitshares/tutorials/committee-propose-action.rst:91
msgid "Notes:"
msgstr ""

#: ../../source/bitshares/tutorials/committee-propose-action.rst:93
msgid ""
"``propose_builder_transaction2`` modifies builder transaction in place. "
"It is not idempotent, running it once will get you a proposal to execute "
"the transaction, running it twice will cause you to get a proposal to "
"propose the transaction!"
msgstr ""

#: ../../source/bitshares/tutorials/committee-propose-action.rst:97
msgid ""
"Remember to transfer enough to cover the fee to committee account and set"
" review period to at least ``committee_proposal_review_period``"
msgstr ""

#: ../../source/bitshares/tutorials/committee-propose-action.rst:99
msgid "Much of this could be automated by a better wallet command."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:5
msgid "Confidential Transfers"
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:7
msgid ""
"This tutorial shows how to use the CLI wallet to perform confidential "
"transfers in BitShares. A confidential transfer is one that hides both "
"the amount being sent and the parties involved in the trade. Confidential"
" transfers are also referred to as blinded transfers. When privacy is "
"important no account should ever be used twice, and coupled with diligent"
" measures to backup and protect the wallet and document the cryptograhic "
"keys used it is impossible for any third party to identify how money is "
"moving by using blockchain analysis alone."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:15
msgid ""
"It is important to realize that the current implementation of Steath "
"functionality requires careful attention to detail and entails a higher "
"level of risk for loosing your account balance if the steps followed "
"herein are followed casually and without regard to such potential loss. "
"However, by following this guide you can rest assured your balance will "
"be held in the blockchain but remain totally and completely hidden from "
"everyone but you. With that staunch admonition out of the way let's get "
"started."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:23
msgid ""
"We will illustrate the CLI commands required to complete every step in "
"this tutorial. You must be familiar with the witness_node and cli_wallet "
"software to follow this guide. For further information on how to build "
"and use that software consult the `readme file`_ on github or the "
"BitShares wiki. I will be using simple passwords and account names to "
"simplify the presentation. You should change these to more secure values "
"to provide a higher level of security. Also note that the CLI wallet "
"echos the command entered which is not reflected in the quoted session "
"logs in the examples that follow."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:35
msgid "Step 1: Create a Blind Account"
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:37
msgid ""
"Blind Accounts are not registered on the blockchain like the named "
"accounts of BitShares. Instead a blind account is nothing more than a "
"labeled public key. The label assigned to the key is only known to your "
"*wallet*. Thus it is crucial that you create a new wallet for the blind "
"account and back it up after completing the balance transfer."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:43
msgid ""
"The first step in creating a blind account is to create a new wallet and "
"set a good quality password for it that would be difficult to crack. "
"Then, using this wallet we'll create a labeled account and protect it "
"with a \"brainkey\". The \"brainkey\" is effectively the private key used"
" by your account. All BitShares cryptography is based on public / private"
" key pairs, one public which can be shared the other private known only "
"to you."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:50
msgid ""
"For confidential accounts the \"brainkey\" is only stored in the wallet, "
"so if the wallet file is lost or destroyed and you have not recorded the "
"\"brainkey\" on paper or some other place there will be no way to recover"
" your confidential account balance. Even if you do record your "
"\"brainkey\" elsewhere outside of the wallet, I do not believe any "
"recovery methods yet exist to import your \"public key / brainkey\" pair "
"into a wallet so you could access your confidential balance. At least it "
"would be possible to do so at some future date, unlike the impossibility "
"it would be if you lost the wallet and failed to record the \"brainkey\"."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:67
msgid ""
"The result of the create_blind_account command is to print out the Public"
" Key associated with the blind account named alice and the command "
"success or failure (true). Note that the CLI interface will update the "
"wallet file you specified on the command line following the -w when you "
"started the cli_wallet. The CLI wallet has no command to quit or exit the"
" interface so we terminate the session with a control-C (shown as ^C), "
"which returns us to the operating system shell."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:75
msgid ""
"Step 2: Transferring a Balance From a Standard Public Account to a Blind "
"Account"
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:77
msgid ""
"Now that we've created a new, unregistered blind account named alice we "
"can transfer assets into it from any source, public or not. We'll "
"describe the steps to transfer a balance from one blind account to "
"another momentarily, which is essential to fully obscure a balance from "
"public view, but for now we'll illustrate a transfer from a publicly "
"registered account to our newly created blind account."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:84
msgid ""
"To begin, we need a wallet that has an account with assets. It can be any"
" account with assets, so we'll use Peter's Public account and transfer "
"funds from that into the alice account. We will also need to have the "
"public key handy that was printed for the alice account when it was "
"created. Since the alice account is not registered we need a way to refer"
" to it before we can do the transfer. So in this CLI session we'll also "
"show you how to create a label to do that and then we'll use that label "
"to transfer assets into the alice blind account."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:110
msgid ""
"The above 2 steps transmit BTS assets from a public, registered account "
"named \"peters-public-registered-account\" into a single unregistered "
"blind account named alice using a label to refer to it named \"Alice-is-"
"Blind\".  It is important to note that these labels are NOT persistent "
"from one CLI session to the next, so every time you transfer assets from "
"a source account such as \"peters-public-registered-account\" used here "
"to a blind account you will need to set a label to refer to the blind "
"account."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:119
msgid "Adding a Contact"
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:121
msgid ""
"There is currently no facility to transfer assets to a blind account from"
" the light wallet or the OpenLedger web wallet. They only support the WIF"
" (Wallet Import Format) and thus will not accept your blind account's "
"\"brainkey\" as a valid private key. In the future you may be able to "
"avoid setting labels each time you transfer from a public to a blind "
"account by defining a contact. However, keep in mind that every "
"association you establish in the path between a public account and a "
"confidential account may make it that much easier to trace your steps, so"
" think twice about the tradeoffs you make for the sake of convenience. "
"They just might circumvent the measures you are taking to hide your "
"balance. This is also true if you transfer assets directly between a "
"public account to a confidential account and leave them in the "
"confidential account. To totally obscure where your balance is held you "
"need to transfer to at least 2 different confidential accounts. We will "
"cover this in a bit more detail later. In the next step we'll look at how"
" to receive the transmitted assets into alice's blind account."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:138
msgid "Step 3: Receiving an Asset Balance Transmitted From Another Account"
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:140
msgid ""
"Transferring assets from one account to a confidential account involves "
"at least 2 steps, the first to transmit the assets and the second to "
"receive them into the confidential account. We covered the process "
"required to transmit assets in Step 2, now lets see what it takes to "
"complete the transfer and verify we have the correct balance:"
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:151
msgid ""
"Using the balance receipt value returned from the transfer_to_blind "
"command in Step 2 we can receive (i.e. import) the balance into alice's "
"bliind account. Note that the source of the balance must be labeled which"
" is the parameter that follows the long balance receipt key. It is meant "
"to represent to source account from which the assets are being "
"transferred, however it need not be. The last of the 3 parameters is a "
"memo text field which is an arbitrary text value. Note that all 3 "
"parameters are required. In the next section we will describe how to list"
" the confidential accounts and their balances so that we can verify our "
"transfer is correct and complete."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:162
msgid "Listing Blind Accounts and Their Balances"
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:164
msgid ""
"For any wallet in which you have created confidential accounts you can "
"list the accounts present using the \"get_my_blind_accounts\" CLI "
"command, and use the accounts returned from that to obtain their "
"balances:"
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:179
msgid "To review, you have learned how to:"
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:181
msgid "create a new CLI wallet and add a blind account to it"
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:182
msgid "create a label to refer to a blind account"
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:183
msgid "send assets from a public account to a blind account"
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:184
msgid "receive or import assets sent from another account into a blind account"
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:185
msgid "list the blind accounts contained in a cli wallet"
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:186
msgid "list the asset balances of blind accounts"
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:188
msgid ""
"These are the basic steps for a simple unidirectional transfer of a "
"single asset from a public account to a single blind account. Next we "
"will examine how to cover our trail to obscure our balance by using a "
"second blind account and finally we will see how to transfer from a blind"
" account back into a public account to wrap up our look into protecting "
"your assets with confidential accounts using the CLI wallet."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:195
msgid ""
"The first part was a basic demonstration of how to use the BitShares CLI "
"wallet to transfer an asset from a registered, public account to a "
"confidential (i.e. blind) account. It explained the steps involved and "
"the current limitations of using confidential features. Here in part 2 we"
" will show how to transfer assets from one confidential account to "
"another, and conclude our look at confidential by describing how to "
"transfer assets from a confidential account back into a registered public"
" account."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:203
msgid ""
"The first part mentioned that to truly hide an account balance and "
"eliminate any public tractability of how the assets arrived there, at "
"least 2 confidential accounts should be used in the path from public "
"source to final confidential destination. This is due to the fact that "
"the destination address of transfers from a public account are visible. "
"There may be no way for the public to query the holdings of confidential "
"accounts but it would not be wise to leave assets in such an obvious "
"hiding place either."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:211
msgid ""
"However, if those assets are moved to yet another confidential account "
"there is no way their whereabouts can be traced through blockchain "
"analysis alone. Because transfers between confidential addresses cannot "
"be traced, even the inference that assets remain in the first "
"confidential address (the destination out of the public registered "
"account) is highly questionable. Additional layers of confidential to "
"confidential transfers would provide even greater security that assets "
"cannot be found for those with a higher sense of paranoia. It should go "
"without saying that disbursing assets to multiple confidential accounts "
"is an important security strategy for large balances. Lastly, be aware "
"that the assets held in confidential accounts are not counted for "
"purposes of voting. Thus you should consider how the use of confidential "
"accounts will affect your participation and influence in the policies and"
" proposals of the BitShares ecosystem."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:227
msgid "Step 4: Transferring Assets Between Confidential Accounts"
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:229
msgid ""
"Let's start by creating a second wallet and confidential account we will "
"use as our hypothetical final destination. We'll call this account bobby."
" We've already shown how to do this in part 1, but you may wish to review"
" those basic steps before you continue."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:241
msgid ""
"We need to restart the CLI wallet with the alice account, where we have a"
" 100 BTS balance. We will create a label to refer to Bob's confidential "
"account (bobby) and transfer some BTS assets from alice to bobby. Note "
"that the process is the same as before, and we need to set a label for "
"the bobby (destination) account to do the transfer."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:261
msgid ""
"There is a bit more output printed than what is shown above, but the "
"important results are provided. From this you can see we first set a "
"label to refer to the newly created \"bobby\" account, and the "
"blind_transfer command fee was 15 BTS, which sent 80 BTS of the balance "
"(100 BTS was transferred to the alice account in Part 1) to the bobby "
"confidential account and provided 2 balance receipts: the first for 5 BTS"
" coming back to the alice account as returned change (leftover funds), "
"and the second which is the receipt for the 80 BTS being sent to the "
"bobby account, which we will need in order to receive the transfer in the"
" bobby account contained in the blindBobWallet file."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:271
msgid ""
"As you can see using confidential in the CLI wallet is a rather tedious "
"\"manual\" process. Do note however that you do not need to do a "
"\"receive_blind_transfer\" to import the 5 BTS change back into the alice"
" account, at least that is taken care of. Also important to note is as "
"far as the outside world can see alice sent some amount less than 100 BTS"
" to two new outputs, one of which is the change returned, which makes it "
"yet that much more difficult to track what is going on, especially since "
"the amounts of each output are invisible."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:281
msgid ""
"Step 5: Transferring Assets From a Confidential Account Back to a Public "
"Account"
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:283
msgid ""
"In this final step of our round-trip process we will transfer some of the"
" BTS from the bobby confidential account back to original public account "
"named peter we started out with. There is nothing new required to "
"accomplish for this step, but a couple of points are worth mentioning. "
"First, keep in mind that the source address for transfers coming into a "
"public account may be visible, so consider using one or more intermediary"
" confidential accounts to add layers of insulation between the public "
"account and the resting place for your confidential assets. Second, "
"although you are sending to a registered, public account which one might "
"think needs no label to access, that isn't the case."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:293
msgid ""
"A label must be assigned to the public destination address to return "
"assets from a blind (confidential) account. The public key value for the "
"account is readily available using the account's permission page "
"explorer. Use the account/key shown under the Active Permissions heading."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:319
msgid ""
"The explanation for this CLI session is essentially the same as it was "
"for step 4. Although the account information is different the commands "
"used and their role in the transfer process are the same."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:323
msgid ""
"One last example demonstrates how to split a balance between multiple "
"confidential accounts. This is very useful because it not only saves on "
"transfer fees it also obscures what amounts end up where. The point of "
"showing this is primarily to illustrate the syntax of the command."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:353
msgid ""
"In this case the only thing the public sees is that account 'peter' sent "
"4800 BTS to four different places. Note that although 800 and 2000 BTS "
"were sent to the alice confidential account they do not show up that way "
"on the blockchain."
msgstr ""

#: ../../source/bitshares/tutorials/confidential-transactions.rst:357
msgid ""
"**Conclusion**: The outside world has no idea *how much* is in each "
"output, only that they all add up to 4800 BTS."
msgstr ""

#: ../../source/bitshares/tutorials/construct-transaction.rst:3
msgid "Manually Construct Any Transaction"
msgstr ""

#: ../../source/bitshares/tutorials/construct-transaction.rst:6
msgid "General Procedure"
msgstr ""

#: ../../source/bitshares/tutorials/construct-transaction.rst:8
msgid ""
"The general principle for generating, singing and broadcasting an "
"arbitrary transactions works as follows:"
msgstr ""

#: ../../source/bitshares/tutorials/construct-transaction.rst:11
msgid "Create an instance of the transaction builder"
msgstr ""

#: ../../source/bitshares/tutorials/construct-transaction.rst:12
msgid "Add arbitrary operation types"
msgstr ""

#: ../../source/bitshares/tutorials/construct-transaction.rst:13
msgid "Add the required amount of fees"
msgstr ""

#: ../../source/bitshares/tutorials/construct-transaction.rst:14
msgid "Sign and broadcast your transaction"
msgstr ""

#: ../../source/bitshares/tutorials/construct-transaction.rst:16
msgid ""
"The corresponding API calls in the "
":doc:`../../integration/apps/cliwallet` are:"
msgstr ""

#: ../../source/bitshares/tutorials/construct-transaction.rst:25
msgid ""
"The `begin_builder_transaction` call returns a number we call ``$HANDLE``"
" It allows to construct several transactions in parallel and identify "
"them individually!"
msgstr ""

#: ../../source/bitshares/tutorials/construct-transaction.rst:29
msgid "The `opId` and the JSON structure of the `operation` can be obtained with:"
msgstr ""

#: ../../source/bitshares/tutorials/construct-transaction.rst:35
msgid "The operation types available are:"
msgstr ""

#: ../../source/bitshares/tutorials/construct-transaction.rst:40
msgid ""
"In practise, each operation has to pay a fee, and hence, each operation "
"has to carry a ``fee`` member. When crafting a transaction, you now have "
"the choice between either defining each fee for your operations "
"individually, or you use ``set_fees_on_builder_transaction`` that sets "
"the fee for each operation automatically to the chosen asset."
msgstr ""

#: ../../source/bitshares/tutorials/construct-transaction.rst:47
msgid "Example: Transfer"
msgstr ""

#: ../../source/bitshares/tutorials/construct-transaction.rst:49
msgid "A simple *transfer* takes the following form:"
msgstr ""

#: ../../source/bitshares/tutorials/construct-transaction.rst:70
msgid ""
"The operation id for the ``transfer_operation`` is thus ``0`` (third "
"line) and the core elements (removing fee) of this operation take the "
"form:"
msgstr ""

#: ../../source/bitshares/tutorials/construct-transaction.rst:84
#: ../../source/bitshares/tutorials/propose-transaction.rst:115
msgid ""
"We add an operation to a transaction as follows (line breaks inserted for"
" readability):"
msgstr ""

#: ../../source/bitshares/tutorials/construct-transaction.rst:102
msgid ""
"The corresponding ``id`` can be obtained with ``get_account``, and "
"``get_asset``."
msgstr ""

#: ../../source/bitshares/tutorials/construct-transaction.rst:105
#: ../../source/bitshares/tutorials/propose-transaction.rst:147
msgid "We add a fee payed in BTS, sign and broadcast the transaction (if valid):"
msgstr ""

#: ../../source/bitshares/tutorials/dex-trading.rst:3
msgid "Howto trade in the DEX"
msgstr ""

#: ../../source/bitshares/tutorials/dex-trading.rst:5
msgid ""
"The decentralized exchange (DEX) of BitShares has a similar look&feel as "
"traditional centralized exchanges. However, trading in the DEX can have "
"many different appearances, depending on what user-interface is used. We "
"here describe the user interface of the official wallet. We recommend to "
"also read through:"
msgstr ""

#: ../../source/bitshares/tutorials/dex-trading.rst:11
msgid ":doc:`../user/dex`"
msgstr ""

#: ../../source/bitshares/tutorials/dex-trading.rst:12
msgid ":doc:`../user/dex-trading`"
msgstr ""

#: ../../source/bitshares/tutorials/dex-trading.rst:15
msgid "Playing Orders"
msgstr ""

#: ../../source/bitshares/tutorials/dex-trading.rst:17
msgid "Orders can be placed in the same way as everywhere else, by providing"
msgstr ""

#: ../../source/bitshares/tutorials/dex-trading.rst:19
msgid "the amount to buy/sell"
msgstr ""

#: ../../source/bitshares/tutorials/dex-trading.rst:20
msgid "the price at which to buy/sell"
msgstr ""

#: ../../source/bitshares/tutorials/dex-trading.rst:28
#: ../../source/bitshares/user/account-memberships.rst:48
msgid "Fees"
msgstr ""

#: ../../source/bitshares/tutorials/dex-trading.rst:30
msgid ""
"In contrast to other exchanges, BitShares asks for a tiny **flat fee** "
"for placing an order. This fee can be payed in USD, BTC, or GOLD and is "
"independent of the actual assets that are traded."
msgstr ""

#: ../../source/bitshares/tutorials/dex-trading.rst:34
#, python-format
msgid ""
"If you cancel an order that has not been fully or partially filled, 90% "
"of the fee will be payed back to your account. However, this chargeback "
"will be in ``BTS`` and not in the asset you have originally paid the fee "
"in."
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:3
msgid "Distributed Access to the BitShares Decentralised Exchange"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:5
msgid ""
"I hope to encourage and promote more access points and backup WebSocket "
"(wss) gateways for BitShares. This is the logical progression from `Run "
"your own decentralised exchange <https://steemit.com/bitshares/@ihashfury"
"/run-your-own-decentralised-exchange>`__ post. |BitShares| ###Distributed"
" Access to the BitShares Network"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:12
msgid "BitShares node setup"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:14
msgid ""
"`Run your own decentralised exchange "
"<https://steemit.com/bitshares/@ihashfury/run-your-own-decentralised-"
"exchange>`__"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:16
msgid ""
"Once you have a full node setup, you can allow BitShares shareholders "
"secure access to your server to trade and check their accounts by "
"following these steps. >A DNS Alias (CNAME) is required to point to your "
"server ip address. >See `dyn.com <http://dyn.com>`__ for DNS Alias setup."
" >You may have to wait a few days for the DNS to work through the "
"internet. >Please change `altcap.io <http://altcap.io>`__ to your DNS "
"alias in the examples below."
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:24
msgid "**Table of Contents**"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:26
msgid "[TOC]"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:29
msgid "Create a New User"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:31
msgid ""
"I recommend creating a new user on your server to run the Bitshares gui "
"and give the user sudo access. >You can use any name - I have used "
"bitshares in this example"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:42
msgid "Install Nginx"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:44
msgid "Install Nginx web server"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:58
msgid ""
"This will start Nginx default web server. Check it by typing the ip "
"address of your server in a web browser or your alias `altcap.io "
"<http://altcap.io>`__"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:63
#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:79
msgid "Configure Nginx"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:65
msgid ""
"To configure the web server, edit the default site and save as new DNS "
"alias name using http port 80 only until you setup `letsencrypt.org "
"<https://letsencrypt.org/>`__ SSL Certificate."
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:70
msgid "Create your web folder"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:86
msgid "Point to your new virtual host"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:111
msgid "Update Virtual Host File"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:118
msgid "Activate sim link and disable default web server"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:126
msgid "Link local folder to www root and add a simple index.html"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:133
msgid "Add some text to index.html"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:152
msgid ""
"Now you have setup a simple web server. DigitalOcean has a great `article"
" <https://www.digitalocean.com/community/articles/how-to-set-up-nginx-"
"virtual-hosts-server-blocks-on-ubuntu-12-04-lts--3>`__ for more "
"information on Virtual Host setup."
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:157
msgid "Install letsencrypt"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:164
msgid "Obtain your SSL certificate"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:170
msgid "Follow the instructions and add an email address"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:173
msgid "Check your certificate"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:183
msgid "Setup a renew cronjob for your new SSL certificate"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:189
msgid "Add this line to run the job every 6 hours on the 16th minute"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:203
msgid "Generate Strong Diffie-Hellman Group cert"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:210
msgid "Add SSL to Nginx settings"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:212
msgid "Make a copy of altcap.io just in case."
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:219
msgid "Edit altcap.io"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:308
msgid ""
"You have now setup an SSL secured web server with a WebSocket connected "
"to your local BitShares witness\\_node (listening on port 8090 - see "
"`this post <https://steemit.com/bitshares/@ihashfury/run-your-own-"
"decentralised-exchange>`__ for more information) ###Update altcap.io www "
"virtual host"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:319
msgid "Restart Nginx"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:325
msgid ""
"Now you have setup an SSL web server. More information on SSL setup can "
"be found here. `DigitalOcean letsencrypt SSL "
"<https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-"
"with-let-s-encrypt-on-ubuntu-14-04>`__ `LetsEncrypt "
"<https://letsencrypt.org/>`__ `CertBot <https://certbot.eff.org/>`__"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:332
msgid "Install BitShares web gui"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:335
msgid "Install NVM (Node Version Manager)"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:341
msgid "exit bash (terminal) and reconnect"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:350
msgid "Download BitShares gui"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:357
msgid "Setup light wallet"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:363
msgid ""
"Before building the light wallet, you need to edit **SettingsStore.js** "
"line 19 and 99 wss WebSocket."
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:370
msgid "Change line 19"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:376
msgid "Add your new wss WebSocket to line 99"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:396
msgid "Link web root to gui build folder"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:403
msgid "Build light wallet"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:409
msgid ""
"You have now created another Access point to the BitShares Decentralised "
"Exchange. **The more the merrier.** Please remember to check your "
"firewall and SSH is up-to-date and configured correctly. DigitalOcean has"
" `firewall "
"<https://www.digitalocean.com/community/tags/firewall?type=tutorials>`__ "
"and `Secure SSH <https://www.digitalocean.com/community/tutorials/how-to-"
"set-up-ssh-keys--2>`__ tutorials for more help."
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:419
msgid "SSL test"
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:421
msgid ""
"You can also check how secure your new web server is compared to your "
"bank. Add this link to a web browser and wait for the results."
msgstr ""

#: ../../source/bitshares/tutorials/distributed-access-hosting.rst:428
msgid ""
"Now change altcap.io to your local bank's domain name in the link and "
"post the results below. >\\ **Thank you `svk "
"<https://steemit.com/@svk>`__ for your advice and guidance.**"
msgstr ""

#: ../../source/bitshares/tutorials/full-node-usage.rst:3
msgid "How to Run and Use a Full Node"
msgstr ""

#: ../../source/bitshares/tutorials/full-node-usage.rst:5
msgid ""
"In order to improve decentralization of service, every user can run his "
"own full node (often referred to *non-block-producing* witness node) and "
"we here show how to do so."
msgstr ""

#: ../../source/bitshares/tutorials/full-node-usage.rst:12
msgid ""
"We first need to download, (compile) and install the witness node. All "
"that is needed is described here:"
msgstr ""

#: ../../source/bitshares/tutorials/full-node-usage.rst:34
msgid "Running the Full Node"
msgstr ""

#: ../../source/bitshares/tutorials/full-node-usage.rst:36
msgid ""
"In order to run a full node that we can connect to, we need to open the "
"RPC interface, this can be done by:"
msgstr ""

#: ../../source/bitshares/tutorials/full-node-usage.rst:43
msgid ""
"This will open port `8090` and make it available over the internet "
"(unless you run behind a router/firewall). If you want it to be open for "
"your machine only, replace `0.0.0.0` by `localhost`."
msgstr ""

#: ../../source/bitshares/tutorials/full-node-usage.rst:48
msgid ""
"Note, that the full node needs to synchronize the blockchain with the "
"network first, which may take a few minutes."
msgstr ""

#: ../../source/bitshares/tutorials/full-node-usage.rst:52
msgid "Connecting to your own Full Node"
msgstr ""

#: ../../source/bitshares/tutorials/full-node-usage.rst:54
msgid ""
"In your wallet (may it be the light wallet or a hosted wallet) you can "
"can define the full node to which is should connect to in the "
"preferences:"
msgstr ""

#: ../../source/bitshares/tutorials/full-node-usage.rst:63
msgid "For your own full nodes, type:"
msgstr ""

#: ../../source/bitshares/tutorials/full-node-usage.rst:69
msgid "and confirm."
msgstr ""

#: ../../source/bitshares/tutorials/full-node-usage.rst:71
msgid ""
"Congratulation, you are now connected to the network via your own full "
"node."
msgstr ""

#: ../../source/bitshares/tutorials/index.rst:3
#: ../../source/bitshares/user/assets.rst:88
#: ../../source/bitshares/user/committee.rst:37
#: ../../source/bitshares/user/eba.rst:46
#: ../../source/bitshares/user/mpa.rst:114
#: ../../source/bitshares/user/uia.rst:65
#: ../../source/bitshares/user/vesting.rst:42
msgid "Tutorials"
msgstr ""

#: ../../source/bitshares/tutorials/index.rst:6
msgid "General Tutorials"
msgstr ""

#: ../../source/bitshares/tutorials/index.rst:22
msgid "API Usage"
msgstr ""

#: ../../source/bitshares/tutorials/index.rst:32
msgid "Assets"
msgstr ""

#: ../../source/bitshares/tutorials/index.rst:44
#: ../../source/bitshares/user/pm.rst:3
msgid "Prediction Markets"
msgstr ""

#: ../../source/bitshares/tutorials/index.rst:53
msgid "Committee Tutorials"
msgstr ""

#: ../../source/bitshares/tutorials/index.rst:64
msgid "Worker Tutorials"
msgstr ""

#: ../../source/bitshares/tutorials/index.rst:73
msgid "Witness Tutorials"
msgstr ""

#: ../../source/bitshares/tutorials/index.rst:83
msgid "Developers"
msgstr ""

#: ../../source/bitshares/tutorials/mpa-create-manual.rst:3
msgid "Creating a MPA manually"
msgstr ""

#: ../../source/bitshares/tutorials/mpa-create-manual.rst:5
msgid ""
"We can create a MPA manually by means of the "
":doc:`../../integration/apps/cliwallet` command:"
msgstr ""

#: ../../source/bitshares/tutorials/mpa-create-manual.rst:10
msgid ""
"A `false` at the end allows to check and verify the constructed "
"transaction and does **not** broadcast it. The main difference between "
"create a UIA and a MPA is ``<mpaoptions>``!"
msgstr ""

#: ../../source/bitshares/tutorials/mpa-create-manual.rst:15
msgid ""
"All options (except for ``mpaoptions`` are similar to creating a UIA as "
"described in a separate tutorial (:doc:`uia-create-manual`)."
msgstr ""

#: ../../source/bitshares/tutorials/mpa-create-manual.rst:19
msgid "MPA-specific settings"
msgstr ""

#: ../../source/bitshares/tutorials/mpa-create-manual.rst:21
msgid "In order to create a MPA, we need to define some MPA-specific parameters:"
msgstr ""

#: ../../source/bitshares/tutorials/mpa-create-manual.rst:35
msgid "See a detailed explanation of the parameters in :doc:`../user/assets-faq`."
msgstr ""

#: ../../source/bitshares/tutorials/mpa-create-manual.rst:39
#: ../../source/bitshares/tutorials/pm-create-manual.rst:99
#: ../../source/bitshares/tutorials/uia-create-manual.rst:91
#: ../../source/bitshares/tutorials/uia-update-manual.rst:21
msgid "Python Example"
msgstr ""

#: ../../source/bitshares/tutorials/pm-close-manual.rst:3
msgid "Closing/Settling a Prediction Market"
msgstr ""

#: ../../source/bitshares/tutorials/pm-close-manual.rst:5
msgid ""
"All the issuer needs to do is publish a valid price feed for the asset. "
"The `global_settle` option will be set automatically and borrow positions"
" can settle at the price feed."
msgstr ""

#: ../../source/bitshares/tutorials/pm-close-manual.rst:10
#: ../../source/bitshares/tutorials/publish-feed.rst:41
msgid "Python Script"
msgstr ""

#: ../../source/bitshares/tutorials/pm-create-manual.rst:3
msgid "Creating a Prediction Market"
msgstr ""

#: ../../source/bitshares/tutorials/pm-create-manual.rst:6
msgid "Settings"
msgstr ""

#: ../../source/bitshares/tutorials/pm-create-manual.rst:8
msgid ""
"In order to create a PM, we will need to set a particular parameter when "
"creating the asset. This parameter can not be changed after creation of "
"the asset."
msgstr ""

#: ../../source/bitshares/tutorials/pm-create-manual.rst:12
msgid "Further, A PM-asset should have the following **flags** (not permissions):"
msgstr ""

#: ../../source/bitshares/tutorials/pm-create-manual.rst:24
msgid "and these MPA-options:"
msgstr ""

#: ../../source/bitshares/tutorials/pm-create-manual.rst:37
msgid ""
"Unfortunatelly, ``create_asset`` cannot create prediction markets. Thus, "
"we need to construct our ``asser_create_operation`` manually (see below)"
msgstr ""

#: ../../source/bitshares/tutorials/pm-create-manual.rst:41
msgid ""
"The precision of the prediction market asset has to be identical with the"
" short backing asset's precision"
msgstr ""

#: ../../source/bitshares/tutorials/pm-create-manual.rst:45
msgid "Settlement Authorities"
msgstr ""

#: ../../source/bitshares/tutorials/pm-create-manual.rst:47
msgid ""
"The issue can choose between three parties that are allowed to settle the"
" prediction market:"
msgstr ""

#: ../../source/bitshares/tutorials/pm-create-manual.rst:50
#: ../../source/bitshares/tutorials/pm-create-manual.rst:55
#: ../../source/bitshares/user/committee.rst:3
msgid "Committee"
msgstr ""

#: ../../source/bitshares/tutorials/pm-create-manual.rst:51
#: ../../source/bitshares/tutorials/pm-create-manual.rst:66
#: ../../source/bitshares/user/witness.rst:3
msgid "Witnesses"
msgstr ""

#: ../../source/bitshares/tutorials/pm-create-manual.rst:52
msgid "Other accounts"
msgstr ""

#: ../../source/bitshares/tutorials/pm-create-manual.rst:57
msgid ""
"If only the committee is supposed to be able to settle the market, you "
"need to set the options to:::"
msgstr ""

#: ../../source/bitshares/tutorials/pm-create-manual.rst:68
msgid ""
"If only the witnesses are supposed to be able to settle the market, you "
"need to set the options to:::"
msgstr ""

#: ../../source/bitshares/tutorials/pm-create-manual.rst:76
msgid ""
"The idea here is that the median of all price feeds published by the "
"witnesses indicates a positive or negative resolution of the prediction "
"market."
msgstr ""

#: ../../source/bitshares/tutorials/pm-create-manual.rst:81
msgid "Other Accounts"
msgstr ""

#: ../../source/bitshares/tutorials/pm-create-manual.rst:83
msgid ""
"Similar to :doc:`../user/privbta`, the feed can be also published by a "
"arbitrary set of accounts. It is important to understand that in order to"
" settle a prediction market, only **one price feed** is requried. Hence, "
"anyone in the list of allowed settlers can settle the market and no "
"consensus needs to be reached. Alternatively, if you want to settle a "
"market only if several accounts can reach a consensus, a new resulution "
"account can be created that uses :doc:`hierarchical multi-signature "
"<../user/account-permissions>` similar to the `committee-account`."
msgstr ""

#: ../../source/bitshares/tutorials/pm-create-manual.rst:92
msgid "The list of settlement price producers can be defined with:"
msgstr ""

#: ../../source/bitshares/tutorials/propose-transaction.rst:3
#: ../../source/bitshares/tutorials/propose-transaction.rst:16
msgid "Proposing a Transaction"
msgstr ""

#: ../../source/bitshares/tutorials/propose-transaction.rst:5
msgid ""
"Proposed transactions can be used everywhere multiple parties have to "
"agree for a transaction to become valid."
msgstr ""

#: ../../source/bitshares/tutorials/propose-transaction.rst:9
msgid "Crafting a Transaction"
msgstr ""

#: ../../source/bitshares/tutorials/propose-transaction.rst:11
msgid ""
"If is recommended that the reader first reads through the following "
"tutorial:"
msgstr ""

#: ../../source/bitshares/tutorials/propose-transaction.rst:13
msgid ":doc:`construct-transaction`"
msgstr ""

#: ../../source/bitshares/tutorials/propose-transaction.rst:18
msgid ""
"A proposed transaction is encapsulated within another operation type. We "
"can achieve this by slightly modifying our procedure:"
msgstr ""

#: ../../source/bitshares/tutorials/propose-transaction.rst:33
#: ../../source/bitshares/tutorials/propose-transaction.rst:60
msgid "Definition"
msgstr ""

#: ../../source/bitshares/tutorials/propose-transaction.rst:39
msgid "Approving a Proposal"
msgstr ""

#: ../../source/bitshares/tutorials/propose-transaction.rst:41
msgid "A proposal can be approved simply by:"
msgstr ""

#: ../../source/bitshares/tutorials/propose-transaction.rst:47
msgid ""
"When replacing the final ``false`` with true, the transaction will be "
"broadcasted!"
msgstr ""

#: ../../source/bitshares/tutorials/propose-transaction.rst:50
msgid "Available approval options are:"
msgstr ""

#: ../../source/bitshares/tutorials/propose-transaction.rst:52
msgid "``active_approvals_to_add``"
msgstr ""

#: ../../source/bitshares/tutorials/propose-transaction.rst:53
msgid "``active_approvals_to_remove``"
msgstr ""

#: ../../source/bitshares/tutorials/propose-transaction.rst:54
msgid "``owner_approvals_to_add``"
msgstr ""

#: ../../source/bitshares/tutorials/propose-transaction.rst:55
msgid "``owner_approvals_to_remove``"
msgstr ""

#: ../../source/bitshares/tutorials/propose-transaction.rst:56
msgid "``key_approvals_to_add``"
msgstr ""

#: ../../source/bitshares/tutorials/propose-transaction.rst:57
msgid "``key_approvals_to_remove``"
msgstr ""

#: ../../source/bitshares/tutorials/propose-transaction.rst:65
msgid "Example: Setting Smartcoin parameter"
msgstr ""

#: ../../source/bitshares/tutorials/propose-transaction.rst:67
msgid "A simple *asset_update* takes the following form:"
msgstr ""

#: ../../source/bitshares/tutorials/propose-transaction.rst:93
msgid ""
"The operation id for the ``asset_update_bitasset_operation`` is thus "
"``12`` (third line) and the core elements (removing fee) of this "
"operation take the form:"
msgstr ""

#: ../../source/bitshares/tutorials/propose-transaction.rst:139
msgid "The corresponding asset ``id`` can be obtained with ``get_asset``."
msgstr ""

#: ../../source/bitshares/tutorials/propose-transaction.rst:141
msgid "Now let's make it a proposal for the committee members to sign:"
msgstr ""

#: ../../source/bitshares/tutorials/publish-feed.rst:3
msgid "Publishing a Feed"
msgstr ""

#: ../../source/bitshares/tutorials/publish-feed.rst:5
msgid "A price feed operation takes the following form:"
msgstr ""

#: ../../source/bitshares/tutorials/publish-feed.rst:34
msgid ""
"It contains the `publisher` name, the `asset_id` for which the feed has "
"been generated the `feed` as a structure of `base` and `quote` ratio, the"
" maintenance collateral ratio (`1750 = 175%`), the short squeeze ratio "
"(`1200 = 120%`) and the core exchange rate for implicit exchange of the "
"fee."
msgstr ""

#: ../../source/bitshares/tutorials/transfer-funds-cli.rst:3
msgid "Transfering Funds using the cli-wallet"
msgstr ""

#: ../../source/bitshares/tutorials/transfer-funds-cli.rst:5
msgid ""
"Once we have the :doc:`cli-wallet set up <cli-wallet-usage>`, we can "
"transfer funds easily with the following syntax:"
msgstr ""

#: ../../source/bitshares/tutorials/transfer-funds-cli.rst:12
msgid ""
"In order to transfer, the wallet must be unlocked. If the broadcast flag "
"is ``False``, the wallet will construct and sign, but **not** broadcast "
"the transaction. This can be very useful for a cold storage setup or to "
"verify transactions."
msgstr ""

#: ../../source/bitshares/tutorials/transfer-funds-cli.rst:17
msgid "If `alice` wants to send `10 USD` to `bob`, she could call:::"
msgstr ""

#: ../../source/bitshares/tutorials/transfer-funds-cli.rst:21
msgid "The wallet will return the actual signed transaction."
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:3
msgid "Creating a new UIA"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:5
msgid ""
"In order to create a new asset, we first need to enter our account's "
"asset page and click `CREATE ASSET`:"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:13
msgid ""
"We will enter the asset creation page that will allow us to define the "
"assets parameters."
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:17
msgid "Primary Settings"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:19
msgid "The most important settings are listed in the primary settings."
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:26
msgid ""
"The **Symbol** defined here will be reserved in the system for your "
"assets. One the asset is created, the symbol cannot be changed again!"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:29
msgid ""
"Smybols with less than **5** characters are very expense. Please consult "
"the Networks fees in the explorer!"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:32
msgid ""
"The **maximum supply** is also a permanent setting and denotes the "
"maximum amount of shares that can ever exist at the same time."
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:35
msgid ""
"The *precision* is used to denoted the number of decimal places. A `0` "
"will result in an asset that cannot be separated below integer amounts "
"(e.g. 1, 2, ..)"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:39
msgid ""
"To allow transaction fees to be paid in the native asset, a core exchange"
" rate is required at which a customer can implicitly trade the UIA into "
"BTS from the asset's *fee pool*. This also requires that the fee pool is "
"funded (e.g. by the issuer). Since all prices in BitShares are internally"
" represented as *fractions* (i.e. `a/b`), we need to define a ratio "
"between quote (the UIA) and base (BTS), i.e. the numerator and "
"denominator for `price = a/b`."
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:47
msgid ""
"Finally, a **description** can be used to let everyone know the purpose "
"of the asset, or an internet address for further information."
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:51
msgid "Permissions (optional)"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:53
msgid ""
"Even though the default settings should be fine for most UIAs, we have "
"the option to **opt-out** of some available features. (By default, or "
"permissions are *enabled*)."
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:57
msgid ""
"Once a permission has been set to *false*, the permission cannot be "
"reactivated!"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:65
msgid "We have the options to opt-out of:"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:67
msgid "Enabling Market Fees"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:68
msgid "Requiring holders to be white-listed"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:69
msgid "Allow Issuer to withdraw from any account"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:70
msgid "Require all transfers to be approved by the issuer"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:71
msgid "Allow to disable confidential transactions"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:73
msgid ""
"Note that setting these permissions does not imply that the features is "
"enabled. To do so, we would also require to enable the corresponding "
"flag(s). (See below)"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:78
msgid "Flags and Market Fees (optional)"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:80
msgid ""
"The flags are used to *actually enable* a particular features, such as "
"market fees or confidential transfers."
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:88
msgid ""
"If we have set the permission to have a market fee, we can enable the "
"market fees here and set a percentage and max. fee."
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:91
msgid ""
"We here also can enable the requirements for users to be white-listed, "
"enable confidential transfers and give the issuer the power to withdraw "
"its asset from customer accounts."
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:96
#: ../../source/bitshares/tutorials/uia-create-manual.rst:80
msgid "Issuing Shares"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:98
msgid ""
"After creating the asset, no shares will exist until the issuer *issues* "
"them:"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:107
msgid "The asset creation fee"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:109
msgid ""
"The asset creation fee depends on the length of your symbol. 3 Character "
"Symbols are the shortest and are rather expensive while symbols with 5 or"
" more characters are significantly cheaper."
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-gui.rst:113
#: ../../source/bitshares/user/assets-faq.rst:11
#, python-format
msgid ""
"50% of the asset creation fee are used to pre-fill the assets fee pool. "
"From the other 50%, 20% go to the network and 80% go to the referral "
"program. This means, that if you are a life-time member, you get back 40%"
" of the asset creation fee after the vesting period (currently 90 days)."
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-manual.rst:3
msgid "Creating a UIA manually"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-manual.rst:6
msgid "Creating an Asset"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-manual.rst:8
msgid ""
"Of course a UIA can also be created *manually* by means of the "
":doc:`../../integration/apps/cliwallet` command:"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-manual.rst:20
msgid ""
"A `false` at the end allows to check and verify the constructed "
"transaction and does **not** broadcast it.  The empty `{}` could be used "
"to construct a :doc:`../user/mpa` and is subject of another tutorial."
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-manual.rst:26
#: ../../source/bitshares/user/privbta.rst:37
msgid "Parameters"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-manual.rst:28
msgid ""
"The `precision` can any positive integer starting from `0`. As `options` "
"we pass a JSON object that can contain these settings:"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-manual.rst:56
msgid ""
"The flags are construction as an JSON object containing these "
"flags/permissions (see :doc:`../user/assets-faq`):"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-manual.rst:73
msgid ""
"Permissions and flags are modelled as sum of binary flags (see example "
"below)"
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-manual.rst:76
msgid ""
"White-listing is described in more detail in :doc:`../../integration"
"/asset-whitelist`."
msgstr ""

#: ../../source/bitshares/tutorials/uia-create-manual.rst:82
msgid ""
"After creation of the asset, no shares will be in existence until they "
"are issued by the issuer:"
msgstr ""

#: ../../source/bitshares/tutorials/uia-update-manual.rst:3
msgid "Update/Change an existing UIA"
msgstr ""

#: ../../source/bitshares/tutorials/uia-update-manual.rst:5
msgid ""
"A UIA can be modified by the issuer after creation. For this, a separated"
" call ``update_asset`` has been created."
msgstr ""

#: ../../source/bitshares/tutorials/uia-update-manual.rst:9
msgid "What can and cannot be changed"
msgstr ""

#: ../../source/bitshares/tutorials/uia-update-manual.rst:11
msgid "Except for"
msgstr ""

#: ../../source/bitshares/tutorials/uia-update-manual.rst:13
#: ../../source/bitshares/user/assets-faq.rst:41
msgid "Symbol"
msgstr ""

#: ../../source/bitshares/tutorials/uia-update-manual.rst:14
msgid "Precision,"
msgstr ""

#: ../../source/bitshares/tutorials/uia-update-manual.rst:16
msgid "every parameter, option or setting can be updates."
msgstr ""

#: ../../source/bitshares/tutorials/uia-update-manual.rst:18
msgid "Once a persmission is removed, it can not be re-enabled again!"
msgstr ""

#: ../../source/bitshares/tutorials/vesting-claim.rst:3
msgid "Claiming A Vesting Balance"
msgstr ""

#: ../../source/bitshares/tutorials/vesting-claim.rst:8
msgid ""
"Claiming vesting balances using the web wallet (GUI) is quite simple. All"
" you need to do is enter your account's page, click on *Vesting Balances*"
" and pick the balance you would like to claim. The corresponding "
"transaction is constructed automatically and will be signed after your "
"confirmation."
msgstr ""

#: ../../source/bitshares/tutorials/vesting-claim.rst:20
msgid "Console Wallet"
msgstr ""

#: ../../source/bitshares/tutorials/vesting-claim.rst:21
msgid ""
"From the CLI wallet, vesting balances from witnesses can be claimed by "
"using:::"
msgstr ""

#: ../../source/bitshares/tutorials/vesting-claim.rst:26
msgid ""
"Unfortunately, no call exists for non-witness-pay vesting balances, yet "
"but a transaction can be :doc:`constructed manually <construct-"
"transaction>` with the operation ``vesting_balance_withdraw_operation`` "
"and takes the form:"
msgstr ""

#: ../../source/bitshares/tutorials/vesting-list.rst:3
msgid "List Vesting Balances"
msgstr ""

#: ../../source/bitshares/tutorials/vesting-list.rst:5
msgid "The vesting balances of an account can be seen from:::"
msgstr ""

#: ../../source/bitshares/tutorials/vesting-list.rst:9
msgid "and takes the form:"
msgstr ""

#: ../../source/bitshares/tutorials/vesting-list.rst:36
msgid ""
"The ``balance`` gives the total vesting balance (amount plus asset), "
"whereas ``allowed_withdraw`` shows the balance that can be withdrawn "
"already. The object also tells us that the vesting policy is in terms of "
"coin-days accrued (in contrast to linear vesting)."
msgstr ""

#: ../../source/bitshares/tutorials/voting.rst:3
#: ../../source/bitshares/user/voting.rst:3
msgid "Voting"
msgstr ""

#: ../../source/bitshares/tutorials/voting.rst:5
msgid ""
"Casting your vote or setting your proxy is very simply using the user "
"interface (e.g. hosted wallet or light wallet)."
msgstr ""

#: ../../source/bitshares/tutorials/voting.rst:9
msgid "Setting a proxy"
msgstr ""

#: ../../source/bitshares/tutorials/voting.rst:11
msgid "The picture below shows how to set your trusted proxy:"
msgstr ""

#: ../../source/bitshares/tutorials/voting.rst:18
#: ../../source/bitshares/user/voting.rst:33
msgid ""
"The proxy ``xeroc`` is owned by the author of the documentation articles "
"you are currently reading and has a `discussion thread avaiable "
"<https://bitsharestalk.org/index.php/topic,20792.0.html>`_."
msgstr ""

#: ../../source/bitshares/tutorials/voting.rst:23
msgid "Voting for Witness, Committee Member or Worker"
msgstr ""

#: ../../source/bitshares/tutorials/voting.rst:25
msgid ""
"If you have not set a proxy, you can cast your own vote for witnesses, "
"committee members or workers and publish your vote as shown in the "
"picture below."
msgstr ""

#: ../../source/bitshares/tutorials/voting.rst:34
msgid ""
"If you already have a proxy defined and want to start voting on your own,"
" you need to first click ``Remove proxy``!"
msgstr ""

#: ../../source/bitshares/tutorials/witness-change-key.rst:3
msgid "Change the Signing Key of your Witness"
msgstr ""

#: ../../source/bitshares/tutorials/witness-change-key.rst:5
msgid ""
"As a witness you may want to change your key occasionally or on a regular"
" basis. You can do so by calling ``update_witness``::"
msgstr ""

#: ../../source/bitshares/tutorials/witness-change-key.rst:10
msgid ""
"By replacing ``false`` with ``true``, the signed transaction will be "
"broadcast and executed otherwise it will only print the signed "
"transaction for review."
msgstr ""

#: ../../source/bitshares/tutorials/witness-change-key.rst:14
msgid "You can get a new public key by calling::"
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:3
msgid "Howto Become an Active Witness"
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:5
msgid ""
"This document serves as an introduction on how to become an actively "
"block producing witness in in the BitShares2.0 network. We will create, "
"configure and run a witness node in the following steps:"
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:9
msgid "create a wallet for the testnet"
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:10
msgid "import an account and funds"
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:11
#: ../../source/bitshares/tutorials/witness-howto.rst:27
msgid "upgrade our account to a lifetime member"
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:12
#: ../../source/bitshares/tutorials/witness-howto.rst:28
msgid "register a new witness"
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:13
#: ../../source/bitshares/tutorials/witness-howto.rst:29
msgid "upvote the witness with our funds"
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:14
#: ../../source/bitshares/tutorials/witness-howto.rst:30
msgid "sign blocks"
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:17
msgid "Run the witness/full node on the network"
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:19
msgid ""
"We first run the :doc:`../../integration/apps/node` without block "
"production and connect it to the P2P network with the following command:"
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:26
msgid ""
"The argument ``--rpc-endpoint 127.0.0.1:8090`` opens up a RPC port "
"``8090`` for connections from localhost."
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:30
#: ../../source/bitshares/tutorials/witness-howto.rst:45
msgid "Creating a wallet"
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:32
msgid ""
"We now open up the :doc:`../../integration/apps/cliwallet` and connect to"
" our plain and stupid :doc:`../../integration/apps/node`:"
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:39
msgid ""
"First thing to do is setting up a password for the newly created wallet "
"prior to importing any private keys:"
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:49
#: ../../source/bitshares/tutorials/witness-howto.rst:61
msgid "Wallet creation is now done."
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:52
#: ../../source/bitshares/tutorials/witness-howto.rst:64
msgid "Basic Account Management"
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:54
msgid ""
"We can import the account name (owner and active keys) to be able to "
"access our funds in BitShares 2.0:"
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:66
msgid ""
"Since **only lifetime members can become witnesses**, you must first "
"upgrade to a lifetime member. This step costs the lifetime-upgrade fee "
"which will eventually cost about $100"
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:76
msgid "Becoming a Witness"
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:78
#: ../../source/bitshares/tutorials/witness-howto.rst:96
msgid ""
"To become a witness and be able to produce blocks, you first need to "
"create a witness object that can be voted in."
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:81
msgid ""
"Note: If you want to experiment with things that require voting, be aware"
" that votes are only tallied once per day at the maintenance interval. "
"``get_dynamic_global_properties`` tells us when that will be in "
"``next_maintenance_time``. Once the next maintenance interval passes, run"
" ``get_global_properties`` again and you should see that your new witness"
" has been voted in."
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:88
msgid ""
"Before we get started, we can see the current list of witnesses voted in,"
" which will simply be the ten default witnesses:"
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:116
msgid ""
"Our witness is registered, but it can't produce blocks because nobody has"
" voted it in. You can see the current list of active witnesses with "
"``get_global_properties``."
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:120
msgid ""
"Now, we should vote our witness in. Vote all of the shares in our account"
" ``<accountname>`` in favor of your new witness."
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:128
msgid ""
"We need wait until the next maintenance interval until we can see votes "
"casted for our witness."
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:131
msgid ""
"Get the witness object using ``get_witness`` and take note of two things."
" The ``id`` is displayed in ``get_global_properties`` when the witness is"
" voted in, and we will need it on the ``witness_node`` command line to "
"produce blocks. We'll also need the public ``signing_key`` so we can look"
" up the correspoinding private key."
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:147
#: ../../source/bitshares/tutorials/witness-howto.rst:170
msgid ""
"Once we have that, run ``dump_private_keys`` which lists the public-key "
"private-key pairs to find the private key."
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:150
msgid ""
"Warning: ``dump_private_keys`` will display your keys unencrypted on the "
"terminal, don't do this with someone looking over your shoulder."
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:153
msgid ""
"The ``id`` and the ``signing_key`` are the two important parameters, "
"here. Let's get the private key for that signing key with:"
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:167
msgid ""
"Now we need to start the witness, so shut down the wallet (ctrl-d), and "
"shut down the witness (ctrl-c). Re-launch the witness, now mentioning the"
" new witness 1.6.10 and its keypair:"
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:178
msgid "Alternatively, you can also add this line into yout config.ini:"
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:185
msgid ""
"Note: Make sure to use YOUR public/private keys instead of the once given"
" above!"
msgstr ""

#: ../../source/bitshares/tutorials/witness-create.rst:188
msgid ""
"If you monitor the output of the ``witness_node``, you should see it "
"generate blocks signed by your witness:"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:3
msgid "Howto Run a Block-producing Witness"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:5
msgid ""
"This document serves as an introduction on how to become an actively "
"block producing witness in a Graphene-based network (e.g. the "
"BitShares2.0 network)."
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:8
msgid ""
"We will have to register a new account from the and add some initial "
"funds for the witness registration fee. After that, we will create, "
"configure and run a witness node."
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:13
msgid "Requirements"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:15
msgid ""
"A registered account in the corresponding network (see i.e. "
":doc:`../user/account`)"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:16
msgid "Some funds in the account to pay for the registration fee"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:17
msgid "Executable binary (see :doc:`../installation/index`)"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:20
msgid "Overview"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:22
msgid "We will now perform the following steps:"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:24
msgid "run a local (non block producing) full node"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:25
msgid "create a CLI wallet for the network"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:26
msgid "import your account (and funds) into CLI wallet"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:33
msgid "Run the witness as a node in the network"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:35
msgid ""
"We first run the witness node without block production and connect it to "
"the P2P network with the following command:::"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:40
msgid ""
"We open a RPC port for local host so that we can later connect the CLI "
"wallet with it. After the network was synced and periodically receives "
"new blocks from other participants, we can go on to the next step."
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:47
msgid ""
"We now open up the cli_wallet and connect to our plain and stupid witness"
" node:::"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:52
msgid ""
"First thing to do is setting up a password for the newly created wallet "
"prior to importing any private keys:::"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:66
msgid ""
"We can import the account name (owner key) and the balance containing "
"(active) key into the CLI wallet:::"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:83
msgid "Both keys can be exported from the web wallet."
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:87
msgid ""
"Since only lifetime members can become witnesses, you must first upgrade "
"to a lifetime member. This step costs the lifetime-upgrade fee:::"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:94
msgid "Registering a Witness Object"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:99
msgid "We create a new witness object by issuing:::"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:124
msgid ""
"Our witness is registered, but it can't produce blocks because nobody has"
" voted it in. You can see the current list of active witnesses with "
"`get_global_properties`:::"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:143
msgid ""
"Now, we should vote our witness in. Vote all of the shares your account "
"``<accountname>`` in favor of your new witness.::"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:149
msgid ""
"If you want to experiment with things that require voting, be aware that "
"votes are only tallied once per day at the maintenance interval. "
"``get_dynamic_global_properties`` tells us when that will be in "
"``next_maintenance_time``. Once the next maintenance interval passes, run"
" ``get_global_properties`` again and you should see that your new witness"
" has been voted in."
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:156
msgid "Now we wait until the next maintenance interval."
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:159
msgid "Configuration of the Witness Node"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:161
msgid "Get the witness object using::"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:165
msgid ""
"and take note of two things. The ``id`` is displayed in "
"``get_global_properties`` when the witness is voted in, and we will need "
"it on the ``witness_node`` command line to produce blocks. We'll also "
"need the public ``signing_key`` so we can look up the correspoinding "
"private key."
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:173
msgid ""
"``dump_private_keys`` will display your keys unencrypted on the terminal,"
" don't do this with someone looking over your shoulder."
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:186
msgid ""
"The ``id`` and the ``signing_key`` are the two important parameters, "
"here. Let's get the private key for that signing key with:::"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:198
msgid ""
"Now we need to start the witness, so shut down the wallet (ctrl-d),  and "
"shut down the witness (ctrl-c).  Re-launch the witness, now mentioning "
"the new witness 1.6.10 and its keypair:::"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:206
msgid "Alternatively, you can also add this line into yout config.ini:::"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:211
msgid "Make sure to use YOUR public/private keys instead of the once given above!"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:215
msgid "Verifying Block Production"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:217
msgid ""
"If you monitor the output of the `witness_node`, you should see it "
"generate blocks signed by your witness:::"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:224
msgid "Price Feeds"
msgstr ""

#: ../../source/bitshares/tutorials/witness-howto.rst:226
msgid ""
"Besides producing new blocks another very important task of the witness "
"is to feed prices into the blockchain. Educational material on how this "
"can be implemented is available in ``scripts/pricefeed`` at `github`_ "
"together with the corresponding documentation."
msgstr ""

#: ../../source/bitshares/tutorials/worker-budget.rst:5
msgid "Claim Worker Pay"
msgstr ""

#: ../../source/bitshares/tutorials/worker-budget.rst:7
msgid ""
"Every second, `[ 17/(2^32) * reserve fund ]` is allocated for witnesses "
"and workers where reserve fund is how many BTS are currently not "
"distributed (see the `source code`_)."
msgstr ""

#: ../../source/bitshares/tutorials/worker-budget.rst:13
#: ../../source/bitshares/tutorials/worker-create.rst:130
msgid ""
"Every hour the total available reserve fund is calculated by finding how "
"many BTS are available to be distributed and how many BTS will be "
"returned to the reserve fund (i.e., \"burnt\") during the next "
"maintenance interval."
msgstr ""

#: ../../source/bitshares/tutorials/worker-budget.rst:17
msgid "First find how many BTS have not been distributed:"
msgstr ""

#: ../../source/bitshares/tutorials/worker-budget.rst:28
msgid ""
"Then modify it by adding the accumulated fees and witness budget "
"remaining (i.e., 1.5 BTS per block is budgeted, so budget remaining is"
msgstr ""

#: ../../source/bitshares/tutorials/worker-budget.rst:35
msgid ""
"in this maintenance cycle (they will be added to the \"reserve fund\" "
"permanently at maintenance)"
msgstr ""

#: ../../source/bitshares/tutorials/worker-budget.rst:44
msgid "For example:"
msgstr ""

#: ../../source/bitshares/tutorials/worker-budget.rst:68
msgid ""
"Then calculate how much is available to be spent on workers and witnesses"
" is:"
msgstr ""

#: ../../source/bitshares/tutorials/worker-budget.rst:74
msgid ""
"Ok, now to find how much workers will get in this budget period (1 hour),"
" you find the smaller of the available pay AFTER subtracting witness "
"budget from the total_budget OR the worker_budget_per_day/24 from "
"\"get_global_properties\""
msgstr ""

#: ../../source/bitshares/tutorials/worker-budget.rst:82
#: ../../source/bitshares/tutorials/worker-create.rst:168
msgid ""
"That is how much per hour allocated for all workers. NOW you rank each "
"worker and pay them one hours worth of pay in order or # votes."
msgstr ""

#: ../../source/bitshares/tutorials/worker-budget.rst:86
msgid "References:"
msgstr ""

#: ../../source/bitshares/tutorials/worker-budget.rst:87
msgid "https://github.com/cryptonomex/graphene/blob/4c09d6b8ed350ff5c7546e2c3fd15d0e6699daf2/libraries/chain/db_maint.cpp"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:3
msgid "How to Create a Worker"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:5
msgid ""
"Workers are currently created with the cli_wallet with the following "
"command syntax:::"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:10
msgid ""
"example, ``owner_account`` is creating a one day worker starting Oct 28 "
"and will get paid 1 BTS/day (vesting in 1 day, 1 BTS = 100,000 'satoshi')"
" to make an android app. The first command won't broadcast, this will "
"just check:::"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:16
msgid ""
"The URL should point to something describing your proposal. We recommend "
"to answer the following questions:"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:18
msgid "What will you do with the funds?"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:19
msgid "By when will you be done?"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:20
msgid "For how much?"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:22
msgid "The variable ``type`` can be"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:24
msgid ""
"``refund`` to return your pay back to the pool to be used for future "
"projects,"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:25
msgid "``vesting`` to pay that you pay yourself, or"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:26
msgid ""
"``burn`` to destroys your pay thus reducing share supply, equivalent to "
"share buy-back of a company stock"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:28
msgid ""
"The variable ``pay_vesting_period_days`` is the integer number of days "
"you set for vesting. Some people don't want workers to withdraw and sell "
"large sums of BTS immediately, as it puts sell pressure on BTS. Also, if "
"you require vesting, you have \"skin in the game\" and thus an incentive "
"to improve BTS value. Pay is pay per day (not hour or maintenance period)"
" and is in units of 1/100,000 BTS (the precision of BTS)"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:35
msgid ""
"To **actually** generate a worker proposal, replace the last ``false`` by"
" ``true``."
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:38
msgid "How to see proposals on the chain"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:40
msgid ""
"Since there is no support in the UI yet, go to http://cryptofresh.com/ "
"and look at the worker proposal chart. You also can inspect all the "
"objects 1.4.*:::"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:66
msgid "How to Vote for a Worker"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:68
msgid ""
"Currently the GUI doesn't have an interface, but you an vote using the "
"CLI:::"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:72
msgid "for example:::"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:76
msgid "you can also vote against or abstain (remove your vote for or against)::"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:82
msgid "How Workers Get Paid"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:84
msgid ""
"Every hour the worker budget is processed and workers are paid in full "
"order of the number of votes for minus the number of votes against. The "
"last worker to get paid will be paid with whatever is left, so may "
"receive partial payment. The daily budget can be estimated by inspecting "
"the most recent budget object 2.13.* for example:::"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:111
msgid "So the daily budget is::"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:115
msgid ""
"There is currently a maximum daily worker pay of 500k BTS, and this can "
"be found using the ``get_global_properties`` command in the cli_wallet"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:119
msgid "Technical Details"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:121
msgid "Every second, ::"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:125
msgid ""
"is allocated for witnesses and workers. The reserve fund is maximum "
"number of BTS available less those currently in circulation (`source`_)"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:134
msgid "First find how many BTS have not been distributed:::"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:138
msgid "The max_supply can be obtained by::"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:142
msgid "and the current_supply is given in::"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:146
msgid ""
"Modify it by adding the accumulated fees and witness budget remaining "
"(i.e., 1.5 BTS per block is budgeted, so budget remaining is 1.5 BTS * "
"(number of blocks left in maintenance period+blocks missed by witnesses))"
" in this maintenance cycle (they will be added to the \"reserve fund\" "
"permanently at maintenance)::"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:154
msgid ""
"variables all from: ``get_object 2.13.*`` (choose the most recent one, "
"for example)"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:156
msgid ""
"Next calculate how much is available to be spent on workers and witnesses"
" is:::"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:160
msgid "rounded up to the nearest integer"
msgstr ""

#: ../../source/bitshares/tutorials/worker-create.rst:162
msgid ""
"Ok, now to find how much workers will get in this budget period (1 hour),"
" you find the smaller of the available pay AFTER subtracting witness "
"budget from the ``total_budget`` OR the ``worker_budget_per_day/24`` from"
" ``get_global_properties``::"
msgstr ""

#: ../../source/bitshares/user/account.rst:3
msgid "Accounts"
msgstr ""

#: ../../source/bitshares/user/account.rst:5
msgid ""
"BitShares 2.0 accounts have to be registered on the blockchain. Upon "
"registration they are assigned an incrementing identifier (account id)."
msgstr ""

#: ../../source/bitshares/user/account.rst:8
msgid ""
"This comes with many advantages: Besides improved scalability, we have "
"separated the identity from the transaction authorizing signature. In "
"practice, *owning an account name* is independent from being able to "
"*spend its funds*. Furthermore, both rights (we call them *permissions*) "
"can split among an arbitrary complex relation of people (we call them "
"*authorities*) using *weights* and a required *thresholds*."
msgstr ""

#: ../../source/bitshares/user/account.rst:15
msgid ""
"Thanks to separating *authorities* from *identities*, BitShares 2.0 can "
"be much faster in processing delay while having much smaller transaction "
"sizes. Hence, all participants are forced to have a named account on the "
"blockchain. Furthermore, most transactions are tied to an account name "
"and can thus be linked to individuals (this includes transferes, trades, "
"shorts, etc. but not *stealthed* transactions)."
msgstr ""

#: ../../source/bitshares/user/account.rst:22
msgid ""
"Even though an account is required to be registered properly, we offer "
"tools to improve privacy and anonymity."
msgstr ""

#: ../../source/bitshares/user/account-create.rst:5
msgid ""
"In order to use BitShares, you will need to register an account.  All you"
" need to provide is"
msgstr ""

#: ../../source/bitshares/user/account-create.rst:8
msgid "an account name"
msgstr ""

#: ../../source/bitshares/user/account-create.rst:9
msgid "a password"
msgstr ""

#: ../../source/bitshares/user/account-create.rst:11
msgid ""
"For regular users, please follow the instructions in the wallet to create"
" a new account:"
msgstr ""

#: ../../source/bitshares/user/account-create.rst:16
msgid ""
"The identicon at the top can be used to verify your account name to third"
" parties. It is derived from your acocunt name and gives a second "
"verification factor. And this is how you register your account:"
msgstr ""

#: ../../source/bitshares/user/account-create.rst:25
msgid ""
"Note that, in contrast to any other platform you have ever used: "
"**Creating an account at one of our partners will make your account "
"available at all the other partners as well.** Hence, your account name "
"can be seen similar to a mail address in such that it is **unique** and "
"every participant in the BitShares network can interact with you "
"independent of the actual partner providing the wallet."
msgstr ""

#: ../../source/bitshares/user/account-create.rst:32
msgid ""
"We also provide a :doc:`tutorial <../tutorials/account-create>` on how to"
" **manually** register an account using the :doc:`CLI wallet "
"<../../integration/apps/cliwallet>`."
msgstr ""

#: ../../source/bitshares/user/account-memberships.rst:3
msgid "Memberships"
msgstr ""

#: ../../source/bitshares/user/account-memberships.rst:5
msgid ""
"Accounts in BitShares are separated into three groups. We decided to give"
" users the option to upgrade their accounts into a VIP-like status if "
"they desire and profit from reduced fees and additional features."
msgstr ""

#: ../../source/bitshares/user/account-memberships.rst:10
msgid "Membership Groups"
msgstr ""

#: ../../source/bitshares/user/account-memberships.rst:13
msgid "Non-Members"
msgstr ""

#: ../../source/bitshares/user/account-memberships.rst:15
msgid "A *regular* account is a *non-member*."
msgstr ""

#: ../../source/bitshares/user/account-memberships.rst:18
msgid "Lifetime Members"
msgstr ""

#: ../../source/bitshares/user/account-memberships.rst:20
msgid ""
"Lifetime Members get a percentage cashback on every transaction fee they "
"pay and qualify to earn referral income from users they register with or "
"referer to the network. A Lifetime membership is associated with a "
"certain one-time fee that is defined by the committee."
msgstr ""

#: ../../source/bitshares/user/account-memberships.rst:26
msgid "Anual Members"
msgstr ""

#: ../../source/bitshares/user/account-memberships.rst:28
msgid ""
"If a lifetime membership is too much you can still get the same cashback "
"for the next year by becoming an annual subscriber for a smaller one-time"
" fee which lasts for only one year."
msgstr ""

#: ../../source/bitshares/user/account-memberships.rst:34
msgid ""
"Technically, the fees that you pay stay the same, but a part of the fees "
"is refunded in the form of a *vesting balance*.Once the fees have vested "
"you can withdraw them. To see your vesting balances, go to your "
"\"Account\" tab, then click on \"vesting balances\" at the bottom left. "
"Vesting balances are recalculated hourly, so you might not yet see them "
"right away."
msgstr ""

#: ../../source/bitshares/user/account-memberships.rst:43
msgid ""
"Due to some discrepancies, the annual membership has been disabled in "
"most web wallets and will be re-enabled after a proper update eventually."
msgstr ""

#: ../../source/bitshares/user/account-memberships.rst:50
msgid ""
"Every time an account you referred pays a transaction fee, that fee is "
"divided among several different accounts. The network takes a cut, and "
"the Lifetime Member who referred the account gets a cut."
msgstr ""

#: ../../source/bitshares/user/account-memberships.rst:54
msgid ""
"The registrar is the account that paid the transaction fee to register "
"the account with the network. The registrar gets to decide how to divide "
"the remaining fee between themselves and their own affiliate."
msgstr ""

#: ../../source/bitshares/user/account-memberships.rst:59
msgid "Pending Fees"
msgstr ""

#: ../../source/bitshares/user/account-memberships.rst:61
msgid ""
"Fees paid are only divided among the network, referrers, and registrars "
"once every maintenance interval."
msgstr ""

#: ../../source/bitshares/user/account-memberships.rst:65
msgid "Vesting Fees"
msgstr ""

#: ../../source/bitshares/user/account-memberships.rst:67
msgid ""
"Most fees are made available immediately, but fees over the vesting "
"threshold (such as those paid to upgrade your membership or register a "
"premium account name) must vest for some days as defined by the "
"committee."
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:3
msgid "Permissions"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:5
msgid "In BitShares, each account is separated into"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:7
#: ../../source/bitshares/user/security-permissions.rst:7
msgid ""
"**Owner Permission**: This permission has administrative powers over the "
"whole account and should be considered for 'backup' strategies."
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:8
#: ../../source/bitshares/user/security-permissions.rst:8
msgid ""
"**Active Permission**: Allows to access funds and some account settings, "
"but cannot change the owner permission and is thus considered the "
"\"online\" permissions."
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:10
msgid ""
"Both can be defined in the `Permissions` tab of your account using so "
"called *authorities* (see below) together with a so called *threshold* "
"that has to be exceeded in order for a transaction to be valid."
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:15
msgid "Authorities"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:17
msgid ""
"In BitShares an *authority* consists of one or many entities that "
"authorize an action, such as transfers or trades."
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:20
msgid ""
"An authority consists of one or several pairs of an account name with a "
"*weight*."
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:23
msgid ""
"In order to obtain a valid transaction, the sum of the weights from "
"signing the parties has to exceed the threshold as defined in the "
"permissions."
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:27
#: ../../source/bitshares/user/referral-program.rst:71
msgid "Examples"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:29
msgid ""
"Let's discuss some examples to shed some light on the used terminology "
"and the use-cases. We assume that a new account is created with it's "
"active permissions set as described below. Note that the same scheme also"
" works for the owner permissions!"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:35
msgid "(Flat) Multi-Signature"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:37
msgid ""
"A flat multi-signature scheme is composed of ``M`` entities of which "
"``N`` entities must sign in order for the transaction to be valid. Now, "
"in BitShares, we have *weights* and a *threshold* instead of ``M`` and "
"``N``. Still we can achieve the very same thing with even more "
"flexibility as we will see now."
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:42
msgid ""
"Let's assume, Alice, Bob, Charlie and Dennis have common funds. We want "
"to be able to construct a valid transaction if only two of those agree. "
"Hence a **2-of-4** (N-of-M) scheme can look as follows:"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:47
#: ../../source/bitshares/user/account-permissions.rst:101
#: ../../source/bitshares/user/account-permissions.rst:146
msgid "Account"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:47
#: ../../source/bitshares/user/account-permissions.rst:101
#: ../../source/bitshares/user/account-permissions.rst:146
#: ../../source/bitshares/user/account-permissions.rst:176
msgid "Weight"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:49
#: ../../source/bitshares/user/account-permissions.rst:103
msgid "Alice"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:49
#: ../../source/bitshares/user/account-permissions.rst:51
#: ../../source/bitshares/user/account-permissions.rst:53
#: ../../source/bitshares/user/account-permissions.rst:55
msgid "1"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:51
#: ../../source/bitshares/user/account-permissions.rst:105
msgid "Bob"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:53
#: ../../source/bitshares/user/account-permissions.rst:107
msgid "Charlie"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:55
#: ../../source/bitshares/user/account-permissions.rst:109
msgid "Dennis"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:57
#: ../../source/bitshares/user/account-permissions.rst:111
#: ../../source/bitshares/user/account-permissions.rst:152
#: ../../source/bitshares/user/account-permissions.rst:188
msgid "**Threshold:**"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:57
msgid "3"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:60
msgid ""
"This means that each party has the same weight of 1 while 3 parties need "
"to sign the transaction/proposal."
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:63
msgid ""
"In other words: Alice, Bobe, Charlie and Dennis, each have 33% weight "
"while 100% must be reached."
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:85
msgid ""
"All four participants have a weight of 33% but the threshold is set to "
"51%. Hence only two out of the four need to agree to validate the "
"transaction."
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:88
msgid ""
"Alternatively, to construct a 3-of-4 scheme, we can either decrease the "
"weights to 17 or increase the threshold to 99%."
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:92
msgid "(Flat) Flexible Multi-Signature"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:94
msgid ""
"With the threshold and weights, we now have more flexibility over our "
"funds, or more precisely, we have more *control*. For instance, we can "
"have separate weights for different people. Let's assume Alice wants to "
"secure here funds against theft by a multi-signature scheme but she does "
"not want to hand over too much control to her friends. Hence, we create "
"an authority similar to:"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:103
msgid "49%"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:105
#: ../../source/bitshares/user/account-permissions.rst:107
msgid "25%"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:109
#: ../../source/bitshares/user/account-permissions.rst:184
#: ../../source/bitshares/user/account-permissions.rst:186
msgid "10%"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:111
#: ../../source/bitshares/user/account-permissions.rst:148
#: ../../source/bitshares/user/account-permissions.rst:150
#: ../../source/bitshares/user/account-permissions.rst:152
#: ../../source/bitshares/user/account-permissions.rst:178
#: ../../source/bitshares/user/account-permissions.rst:188
msgid "51%"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:133
msgid ""
"Now the funds can either be accessed by Alice and a single friend or by "
"all three friends together."
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:137
msgid "Multi-Hierarchical Flexible Multi-Signature"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:139
msgid ""
"Let's take a look at a simple multi-hierarchical corporate account setup."
"  We are looking at a company that has a Chief of Financial Officer (CFO)"
" and a some departments working for him, such as the Treasurer, "
"Controller, Tax Manager, Accounting, etc. The company also has a CEO that"
" wants to have spending privileges. Hence we construct an authority for "
"the funds according to:"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:148
msgid "CEO.COMPANY"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:150
#: ../../source/bitshares/user/account-permissions.rst:176
msgid "CFO.COMPANY"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:172
msgid ""
"whereas CEO.COMPANY and CFO.COMPANY have their own authorities. For "
"instance, the CFO.COMPANY account could look like:"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:178
msgid "Chief.COMPANY"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:180
msgid "Treasurer.COMPANY"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:180
#: ../../source/bitshares/user/account-permissions.rst:182
msgid "33%"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:182
msgid "Controller.COMPANY"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:184
msgid "Tax Manager.COMPANY"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:186
msgid "Accounting.COMPANY"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:217
msgid "This scheme allows:"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:219
msgid "the CEO to spend funds"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:220
msgid "the Chief of Finance Officer to spend funds"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:221
msgid "Treasurer together with Controller to spend funds"
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:222
msgid ""
"Controller or Treasurer together with wither the Tax Manager or "
"Accounting to spend funds."
msgstr ""

#: ../../source/bitshares/user/account-permissions.rst:225
msgid ""
"Hence, a try of arbitrary depth can be spanned in order to construct a "
"flexible authority to reflect mostly any business use-case."
msgstr ""

#: ../../source/bitshares/user/assets.rst:6
msgid "Assets/Tokens"
msgstr ""

#: ../../source/bitshares/user/assets.rst:8
msgid ""
"The BitShares 2.0 network consist of several *assets*, *tokens* or "
"*currencies*. All assets are equal from a technological point of view and"
" come with more or less the same features, namely, they can be traded "
"against each other and can be transfered within seconds. The differences "
"between them are of economical nature."
msgstr ""

#: ../../source/bitshares/user/assets.rst:14
#: ../../source/bitshares/user/dex-margin-mechanics.rst:95
msgid ""
":html:`<div class=\"container-fluid\"><div class=\"row\"><div class"
"=\"col-md-6\">`"
msgstr ""

#: ../../source/bitshares/user/assets.rst:16
msgid "**User Issued Assets (UIAs)**"
msgstr ""

#: ../../source/bitshares/user/assets.rst:18
msgid ""
"Freely traded tokens created by individuals used for a variety of use-"
"cases, such as stock, miles, event tickets or reputation points."
msgstr ""

#: ../../source/bitshares/user/assets.rst:22
#: ../../source/bitshares/user/assets.rst:33
#: ../../source/bitshares/user/assets.rst:45
#: ../../source/bitshares/user/assets.rst:54
#: ../../source/bitshares/user/assets.rst:64
#: ../../source/bitshares/user/assets.rst:75
msgid "Read more ..."
msgstr ""

#: ../../source/bitshares/user/assets.rst:23
#: ../../source/bitshares/user/assets.rst:46
#: ../../source/bitshares/user/assets.rst:65
#: ../../source/bitshares/user/dex-margin-mechanics.rst:107
msgid ":html:`</div><div class=\"col-md-6\">`"
msgstr ""

#: ../../source/bitshares/user/assets.rst:25
msgid "**Market-Pegged Assets (MPA)**"
msgstr ""

#: ../../source/bitshares/user/assets.rst:27
msgid ""
"These *SmartCoins* track the value of an underlaying asset, such as Gold,"
" or U.S. Dollar. Smartcoins can be created by anyone contracting with the"
" BitShares ecosystem and putting sufficient BTS (at least 175%) into the "
"so called contract for difference as *collateral*."
msgstr ""

#: ../../source/bitshares/user/assets.rst:34
#: ../../source/bitshares/user/assets.rst:55
msgid ":html:`</div></div>` :html:`<div class=\"row\"><div class=\"col-md-6\">`"
msgstr ""

#: ../../source/bitshares/user/assets.rst:37
msgid "**Exchange Backed Assets (EBA)**"
msgstr ""

#: ../../source/bitshares/user/assets.rst:39
msgid ""
"This kind of asset is commonly known as *I owe you* (IOU). It represents "
"the right to withdraw the *same amount* (minus fees) of a backing asset "
"from a *central* entity. Often they are issued by a bank, an exchange or "
"an other financial institute to represent deposit receipts."
msgstr ""

#: ../../source/bitshares/user/assets.rst:48
msgid "**Privatized Bit-Assets**"
msgstr ""

#: ../../source/bitshares/user/assets.rst:50
msgid ""
"A flexible mixture between UIA and MPA that allows 3rd parties to create "
"their own customized MPAs."
msgstr ""

#: ../../source/bitshares/user/assets.rst:58
msgid "**Fee Backed Assets**"
msgstr ""

#: ../../source/bitshares/user/assets.rst:60
msgid ""
"An FBA is a token that pays you a fraction of the transaction fees "
"generated by a particular feature that has been funded independent of "
"BitShares."
msgstr ""

#: ../../source/bitshares/user/assets.rst:67
msgid "**Prediction Market Asset**"
msgstr ""

#: ../../source/bitshares/user/assets.rst:70
msgid ""
"A prediction market is similar to a MPA, that trades between 0 and 1, "
"only. After an event, a price feed can be used to determine which option "
"to take and participants can settle at this price."
msgstr ""

#: ../../source/bitshares/user/assets.rst:76
msgid ":html:`</div><div class=\"col-md-6\">` :html:`</div></div></div>`"
msgstr ""

#: ../../source/bitshares/user/assets.rst:80
#: ../../source/bitshares/user/eba.rst:35
#: ../../source/bitshares/user/index.rst:63
#: ../../source/bitshares/user/mpa.rst:106
#: ../../source/bitshares/user/uia.rst:57
msgid "Frequently Asked Questions"
msgstr ""

#: ../../source/bitshares/user/assets.rst:99
msgid ":html:`<!-- Adding the toctree`"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:3
msgid "Assets FAQ"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:6
msgid "General"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:9
msgid "What happens to the asset creation fee?"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:18
msgid "Can I change `x` after creation of the asset"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:20
msgid "The following parameters can be changed after creation:"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:22
msgid "Issuer"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:23
msgid "UIA-Options:"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:25
msgid "Max Supply"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:26
msgid "Market Fee"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:27
msgid "Permissions (disable only/nor re-enable)"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:28
msgid "Flags (if permissions allow it)"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:29
msgid "Core exchange rate"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:30
msgid "White/Black Listing"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:31
msgid "Description"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:33
msgid "MPG-Options:"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:35
msgid "Feed Life Time"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:36
msgid "Minimum Feeds"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:37
msgid "Force Settlement Offset/Delay/Volume"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:39
msgid "Things that cannot be changes:"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:42
msgid "Precision"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:44
msgid "A tutorial can be found :doc:`here <../tutorials/uia-update-manual>`."
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:47
msgid "What about Parent and Child assets?"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:49
msgid ""
"A **parent**/**child** relation ship for assets can be represented by the"
" name of the symbol, e.g.::"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:54
msgid "can only be created by the issuer of ``PARENT`` and no one else."
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:57
msgid "Changing the issuer"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:59
msgid ""
"The current issue of an asset may transfer ownership of the asset to "
"someone else by changing the issuer in the asset's settings."
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:63
msgid "Fee Pool"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:66
msgid "What is the fee pool all about?"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:68
msgid ""
"The fee pool allows participants in the network to deal with assets and "
"pay for the transaction fees without the need to hold BTS. Any "
"transaction fee can be paid by paying any asset that has a core exchange "
"rate (i.e. a price) at which the asset can be exchange implicitly into "
"BTS to cover the network fee. If the asset's fee pool is funded, the fees"
" can be payed in the native UIA instead of BTS."
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:75
msgid ""
"The core exchange rate at which a fee can be exchanged into BTS may "
"differ from the actual market valuation of the asset. A user, thus, may "
"pay a premium or spare funds by paying in BTS."
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:80
msgid ""
"Make sure your core exchange rate is higher than the lowest ask, "
"otherwise, people will buy your token from the market and drain your fee "
"pool via implicit abitrage."
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:84
msgid ""
"It is the task of the issuer to keep the fee pool funded and the core "
"exchange rate updated unless he wants the owner of his asset to be "
"required to hold BTS for the fee."
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:89
msgid "What to do if the fee pool is empty?"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:91
#: ../../source/bitshares/user/assets-faq.rst:131
msgid ""
"Open up the issuer's account, click the assets tab and open up the dialog"
" to change the asset. There will be a fee pool tab that allows you to "
"fund the fee pool and claim the accumulated fees!"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:96
msgid "What is Fee Pool Draining?"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:98
#, python-format
msgid ""
"If an order is created and paid in a non-BTS asset, the fee is implicitly"
" exchange into BTS to pay the network fee. However, if the order is "
"canceled, 90% of the fee will be returned as BTS. The result is, that if "
"the core exchange rate is lower than the highest bid, people can simply "
"buy your token from the market, and exchange them implicitly with the fee"
" pool by creating and canceling an order. This will deplete the fee pool "
"and leave the issuer with his tokens at a slight loss (depending on the "
"offset of the core exchange rate). For this reason, we recommend to use a"
" core exchange that is slightly higher than the market price of your "
"asset. As a consequence, paying fees in BTS should always be cheaper."
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:111
msgid "Market Fees"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:114
msgid "What happens if I enable Market fees?"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:116
msgid ""
"If *Market Fees* of a UIA are turned on, fees have to be payed for each "
"**market transaction**. This means, that market fees only apply to "
"**filled orders**!"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:120
msgid ""
"The percentage of market fees that are applied can be defined and changed"
" by the issuer and any fee generated that way will be accumulated for "
"each asset only to be claimed by the issuer."
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:124
#, python-format
msgid ""
"If the Market Fee is set to 1%, the issuer will earn 1% of market volume "
"as profit. These profits are accumulated for each UIA and can be "
"withdrawn by the issuer."
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:129
msgid "How to claim accumulated fees?"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:136
msgid "What if two different market fees are involved in a trade?"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:138
msgid ""
"Suppose, I set the market fee for MyUIA market at 0.1%. and the market "
"fee for YourUIA market at 0.3%."
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:141
msgid ""
"In BitShares, You pay the fee upon **receiving an asset**. Hence, one "
"side will pay 0.3% the other will pay 0.1%."
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:145
msgid "What are Asset Flags and Permissions?"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:147
msgid ""
"When an asset is creatd, the issuer can set any combination of "
"flags/permissions. **Flags** are set in stone unless there is "
"**permission** to edit. Once a permission to edit is revoked, flags are "
"permanent, and can never be modified again."
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:153
msgid "What are the Permissions:"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:155
msgid "Enable market fee"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:156
msgid "Require holders to be white-listed"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:157
msgid "Issuer may transfer asset back to himself"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:158
msgid "Issuer must approve all transfers"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:159
msgid "Disable confidential transactions"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:162
msgid "What are the Flags?"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:164
msgid ""
"``charge_market_fee``: an issuer-specified percentage of all market "
"trades in this asset is paid to the issuer"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:167
msgid "``white_list``: accounts must be white-listed in order to hold this asset"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:169
msgid "``override_authority``: issuer may transfer asset back to himself"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:171
msgid ""
"``transfer_restricted``: require the issuer to be one party to every "
"transfer"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:173
msgid "``disable_force_settle``: disable force settling"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:175
msgid ""
"``global_settle``: (only for bitassets) allows bitasset issuer to force a"
" global settling - this may be set in permissions, but should not be set "
"as flag unless, for instance, a prediction market has to be resolved. If "
"this flag has been enabled, no further shares can be borrowed!"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:180
msgid ""
"``disable_confidential``: allow the asset to be used with confidential "
"transactions"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:182
msgid "``witness_fed_asset``: allow the asset to be fed by witnesses"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:184
msgid "``committee_fed_asset``: allow the asset to be fed by the committee"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:188
#: ../../source/bitshares/user/mpa.rst:3
msgid "Market Pegged Assets"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:191
msgid "Can I use the same flags/permissions as for UIAs?"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:193
msgid "Yes!"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:196
msgid "What are market-pegged-asset-specific parameters"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:198
msgid ""
"``feed_lifetime_sec``: The lifetime of a feed. After this time (in "
"seconds) a feed is no longer considered *valid*."
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:201
msgid ""
"``minimum_feeds``: The number of feeds required for a market to become "
"(and stay) active."
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:203
msgid ""
"``force_settlement_delay_sec``: The delay between requesting a settlement"
" and actual execution of settlement (in seconds)"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:206
msgid ""
"``force_settlement_offset_percent``: A percentage offset from the price "
"feed for settlement (`100% = 10000`)"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:208
msgid ""
"``maximum_force_settlement_volume``: Maximum percentage of the supply "
"that can be settled per day (`100% = 10000`)"
msgstr ""

#: ../../source/bitshares/user/assets-faq.rst:210
msgid ""
"``short_backing_asset``: The asset that has to be used to *back* this "
"asset (when borrowing)"
msgstr ""

#: ../../source/bitshares/user/committee.rst:5
msgid ""
"Since Bitcoin struggled to reach a consensus about the size of their "
"blocks, the people in the cryptocurrency space realized that the "
"governance of a DAC should not be ignored. Hence, BitShares offers a "
"tools to reach on-chain consensus about business management decisions."
msgstr ""

#: ../../source/bitshares/user/committee.rst:10
msgid ""
"The BitShares blockchain has a set of parameters available that are "
"subject of shareholder approval. Shareholders can define their preferred "
"set of parameters and thereby create a so called *committee member* or "
"alternatively vote for an existing committee member. The BitShares "
"committee consists of several *active* committee members."
msgstr ""

#: ../../source/bitshares/user/committee.rst:16
msgid ""
"The BitShares ecosystem has a set of parameters available that are "
"subject of shareholder approval. Initially, BitShares has the following "
"blockchain parameters:"
msgstr ""

#: ../../source/bitshares/user/committee.rst:20
msgid ""
"**fee structure**:         *fess that have to be paid by customers for "
"individual transactions*"
msgstr ""

#: ../../source/bitshares/user/committee.rst:21
msgid ""
"**block interval**:        *i.e. block interval, max size of "
"block/transaction*"
msgstr ""

#: ../../source/bitshares/user/committee.rst:22
msgid "**expiration parameters**: *i.e. maximum expiration interval*"
msgstr ""

#: ../../source/bitshares/user/committee.rst:23
msgid ""
"**witness parameters**:    *i.e. maximum amount of witnesses (block "
"producers)*"
msgstr ""

#: ../../source/bitshares/user/committee.rst:24
msgid "**committee parameters**:  *i.e. maximum amount of committee members*"
msgstr ""

#: ../../source/bitshares/user/committee.rst:25
msgid "**witness pay**:           *payment for each witnesses per signed block*"
msgstr ""

#: ../../source/bitshares/user/committee.rst:26
msgid ""
"**worker budget**:         *available budget available for budget items "
"(e.g. development)*"
msgstr ""

#: ../../source/bitshares/user/committee.rst:28
msgid ""
"Please note that the given set of parameters serves as an example and "
"that the network's parameters are subject to change over time."
msgstr ""

#: ../../source/bitshares/user/committee.rst:31
msgid ""
"Additionally to defining the parameters any active witness can propose a "
"protocol or business upgrade (i.e. hard fork) which can be voted on (or "
"against) by shareholders. When the total votes for the hard fork are "
"greater than the median witness weight `w` then the hard fork takes "
"effect."
msgstr ""

#: ../../source/bitshares/user/dex.rst:3
msgid "Decentralized Exchange"
msgstr ""

#: ../../source/bitshares/user/dex.rst:5
msgid ""
"The decentralized exchange (further denoted simply as *the DEX*) allows "
"for direct exchange of digital goods traded in the BitShares ecosystem."
msgstr ""

#: ../../source/bitshares/user/dex.rst:8
msgid ""
"A decentralized exchange has a very particular set of advantages over "
"traditional centralized exchanges and we would like to address some of "
"them briefly below. Although the BitShares DEX comes with all of them, it"
" is up to the reader and customer to leverage those features in full or "
"only partially."
msgstr ""

#: ../../source/bitshares/user/dex.rst:13
msgid ""
"**Separation of Powers**: There is no reason why the same entity needs to"
" be responsible for issuing IOUs and for processing the order book. In "
"BitShares, order matching is performed by the protocol, which is unaware "
"of implications concerning the involved assets."
msgstr ""

#: ../../source/bitshares/user/dex.rst:18
msgid ""
"**Global Unified Order Book**: Since BitShares is global, anybody with an"
" internet access can use the DEX for trading. This brings the world's "
"liquidity to a single order book for decentralized trading."
msgstr ""

#: ../../source/bitshares/user/dex.rst:22
msgid ""
"**Trade Almost Anything**: The BitShares DEX is asset agnostic. Hence you"
" can trade at **any** pair. While some pairs may end up with low "
"liquidity, such as SILVER:GOLD, other pairs such as USD:EUR for FOREX "
"trading will see huge volume."
msgstr ""

#: ../../source/bitshares/user/dex.rst:26
msgid ""
"**No Limits**: The BitShares protocol is unable to limit your trading "
"experience."
msgstr ""

#: ../../source/bitshares/user/dex.rst:28
msgid ""
"**Decentralized**: The DEX is decentralized across the globe. This not "
"only means that there is no single point of failure, but it also implies "
"that the BitShares exchange is open for trading 24/7 because it's always "
"daytime somewhere."
msgstr ""

#: ../../source/bitshares/user/dex.rst:32
msgid ""
"**Secure**: Your funds and trades are secured with industry-grade "
"elliptic curve cryptography. No one will be able to access your funds "
"unless you let them. To further strengthen the security, we allow our "
"customers to setup escrow and multi-signature schemes."
msgstr ""

#: ../../source/bitshares/user/dex.rst:37
msgid ""
"**Fast**: In contrast to other decentralized networks, the BitShares DEX "
"allows for real-time trading and is only limited by the speed of light "
"and the size of the planet."
msgstr ""

#: ../../source/bitshares/user/dex.rst:41
msgid ""
"**Provable Order Matching Algorithm**: What makes the BitShares DEX "
"unique is the provable order matching algorithm. Given a set of orders, "
"you will always be able to provably verify that these orders have been "
"matched properly."
msgstr ""

#: ../../source/bitshares/user/dex.rst:45
msgid ""
"**Collateralized Smartcoins**: One of the biggest features of BitShares "
"are its *smartcoins* such as bitUSD, bitEUR, bitCNY, and others. For the "
"sake of convenience, these assets are denotes simply as USD, EUR, CNY, "
"etc. in the wallet. These digital tokens represent the same value as "
"their underlaying physical asset. Hence 1 USD in this wallet is worth $1 "
"and can be redeemed as such. Any of these tokens is backed by BitShares' "
"company shares (BTS) being locked up as collateral and being available "
"for settlement at its current price."
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:8
msgid "Margin call mechanics"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:10
msgid ""
"The mechanics of a margin call in Bitshares are currently poorly "
"understood, so I'd like to try to clarify a little by using examples from"
" the ``USD:BTS`` market. I think part of the current confusion lies in "
"people talking about the same market but using different market "
"directions, ie. ``USD:BTS`` or ``BTS:USD``, so terms like above/below "
"don't mean the same thing to different people. I will only use USD in "
"these examples, but USD can be replaced by any bit asset in this context."
" I prefer to use the ``USD:BTS`` market direction, so these examples will"
" have prices in BTS/USD."
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:20
msgid "What is a margin call?"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:22
msgid ""
"A margin call is the market forcing you to sell your collateral in order "
"to buy enough USD to close your position. In the USD:BTS market a margin "
"call is equivalent to a bid: it is an order to buy USD for BTS."
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:26
msgid ""
"A margin call will happen because the price has increased to the point "
"where your collateral is insufficient with respect to the current "
"collateral requirements of the Bitshares market rules. The required "
"collateral is a tuneable parameter in Bitshares, set by the maintenance "
"collateral ratio (MCR) which is maintained by the feed producers (ie. the"
" witnesses)."
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:33
msgid "How is the call price calculated?"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:35
msgid ""
"As mentioned above the call price of a margin position depends on the MCR"
" and the amount of debt and collateral in your position. It is "
"independent of the price feed (settlement price). As an example, say you "
"have opened the following position:"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:40
#: ../../source/bitshares/user/dex-margin-mechanics.rst:69
#: ../../source/bitshares/user/dex-margin-mechanics.rst:79
#: ../../source/bitshares/user/dex-margin-mechanics.rst:131
#: ../../source/bitshares/user/dex-margin-mechanics.rst:159
msgid "Debt: ``10 USD``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:41
msgid "Collateral: ``10000 BTS``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:42
msgid "MCR is ``1.75``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:44
msgid ""
"The call price of your position is  ``10000 BTS / (10 * 1.75 USD) =  "
"571.429 BTS/USD``."
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:47
msgid "How is the collateral ratio (CR) calculated?"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:49
msgid ""
"The collateral ratio depends on the feed price (settlement price). Taking"
" a feed price of ``300 BTS/USD`` and building on the above example with "
"``10 USD`` debt and ``10000 BTS`` collateral:"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:53
msgid "CR: ``(10000 BTS / 300 BTS/USD) / 10 USD = 3.33``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:56
msgid "Execution Conditions"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:59
msgid "When will a margin call happen?"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:61
msgid ""
"This is where it gets complicated. Margin Call are only possible if the "
"feed price is below your call price. A margin call will happen whenever "
"the squeeze protection price goes above the call price of your position. "
"To better understand how this works, let's go back to our margin position"
" and look at collateral ratios:"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:67
msgid "Say we have the following:"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:70
#: ../../source/bitshares/user/dex-margin-mechanics.rst:99
#: ../../source/bitshares/user/dex-margin-mechanics.rst:111
#: ../../source/bitshares/user/dex-margin-mechanics.rst:156
msgid "Settlement price: ``300 BTS/USD``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:71
msgid "CR: ``1``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:72
msgid "Collateral is therefore ``3000 BTS``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:74
msgid ""
"This is also known as the Black Swan level, and we want to perform a "
"margin call before the collateral ratio goes this low. This is why we "
"have the Maintenance Collateral Ratio (MCR), to enforce a buffer zone "
"before a position goes into Black Swan territory. So if we apply the MCR "
"of ``1.75`` to this position:"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:80
#: ../../source/bitshares/user/dex-margin-mechanics.rst:128
msgid "Settlement Price: ``300 BTS/USD``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:81
msgid "CR: ``1.75``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:82
msgid "Collateral is therefore ``3000 BTS * 1.75 = 5250 BTS``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:84
msgid ""
"This is much safer, there is a bit of margin for the position to be "
"closed before going into Black Swan levels. Since in our example, the USD"
" **requires** ``1.75`` ratio, the call price of this position is now "
"exactly equal to the feed price of ``300 BTS/USD``."
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:89
msgid "Call price: ``5250 / (10 * 1.75) = 300 BTS/USD``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:91
msgid ""
"The remaining question then is, at what point should we force the "
"position to attempt to close itself? This is where the SQPR comes in. "
"Let's look at two scenarios, SQPR of ``1.1`` and SQPR of ``1.5``:"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:97
msgid "** SQPR of ``1.1`` **"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:100
#: ../../source/bitshares/user/dex-margin-mechanics.rst:130
msgid "SQPR: ``1.1``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:101
msgid "Squeeze Protection Price (SQPP): ``330 BTS/USD``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:103
msgid ""
"In this case, any margin position that has a call price below ``330 "
"BTS/USD`` will be forced to settle, and therefore be added to the "
"orderbook as an order to buy USD for BTS."
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:109
msgid "** SQPR of ``1.5`` **"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:112
msgid "SQPR: ``1.5``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:113
msgid "Squeeze Protection Price (SQPP): ``450 BTS/USD``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:115
msgid ""
"In this case, any margin position that has a call price below ``450 "
"BTS/USD`` will be forced to settle, and therefore be added to the "
"orderbook as an order to buy USD for BTS."
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:119
msgid ":html:`</div></div></div>`"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:122
#: ../../source/bitshares/user/dex-short.rst:77
msgid "Discussion"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:124
msgid ""
"Another way of looking at this is by looking at the Collateral Ratio of "
"the position. If we want to stay at or above the squeeze protection "
"price, what is the required collateral ratio? Let's do the math:"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:129
#: ../../source/bitshares/user/dex-margin-mechanics.rst:154
msgid "MCR: ``1.75``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:133
msgid "Call price: ``CP = SQPP = 300 * 1.1 = 330 BTS/USD``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:134
msgid "Collateral = ``(10 USD * 1.75) * 330 BTS/USD  = 5775 BTS``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:136
msgid ""
"The collateral ratio of this position is ``(5775 BTS / 300 BTS/USD) / 10 "
"USD = 1.925``."
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:138
msgid "This is equivalent to the MCR"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:140
msgid "SQPR: ``1.75 * 1.1 = 1.925``."
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:142
msgid ""
"In other words, in order to stay **safe** and not be margin called, the "
"margin position must maintain a collateral ratio higher than ``MCR * "
"SQPR``."
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:145
msgid "**Safe position**: ``CR > MCR * SQPR``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:148
msgid "At what price will the margin call execute?"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:150
msgid ""
"This is the part I believe is most misunderstood, so I will use some "
"screenshots of a fictional ``USD:BTS`` market to explain. We will use the"
" following parameters:"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:153
msgid "SQPR: ``1.2``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:155
msgid "SQPR * MCR:  ``2.1``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:157
msgid "Squeeze protection price: ``300 * 1.2 = 360 BTS/USD``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:160
msgid "Collateral: ``5687.5``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:161
msgid "CR: ``1.896``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:162
msgid "Call price: ``325 BTS/USD``"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:164
msgid ""
"From what we've seen above, it's clear that this position should be "
"margin called: it has a CR of ``1.896`` which is well below the safe "
"ratio of 2.1."
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:167
msgid ""
"It will therefore get added to the order book as a bid to buy USD like "
"this:"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:174
msgid ""
"The margin called order will buy any USD priced in the range ``325-360 "
"BTS/USD``. The squeeze protection price acts as a price ceiling, meaning "
"the forced margin order will not execute at a very high price in an "
"illiquid market: it is protected from high prices by the SQPR."
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:180
msgid "Margin calls only execute in the range [Call Price - SQPP]"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:182
msgid ""
"A margin call will occur any time the lowest ask is higher than the call "
"price and lower than the SQPP. This has several consequences, as we will "
"see below. It can create some very strange situations, and also force the"
" margin called orders to \"buy high\"."
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:187
msgid ""
"**Consequence #1**: Asks below the call price prevent margin calls from "
"executing"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:189
msgid ""
"Because margin calls only execute in the range Call Price - SQPP, if "
"there is a sell order for ``5 USD`` at ``315 BTS/USD`` in this market, "
"the call order will not use it, which makes the market look like this:"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:198
msgid ""
"If a second sell order of ``2.5 USD`` were added at ``345 BTS/USD``, the "
"margin called order would still not buy any USD because of the "
"\"blocking\" sell order at ``315 BTS/USD``:"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:207
msgid ""
"If the order at ``315 BTS/USD`` were to be removed, either from being "
"cancelled or from being filled, the order at ``345 BTS/USD`` would "
"instantly get filled by the margin called order, and the margin called "
"position would have a reduced debt of ``10 - 2.5 = 7.5 USD``:"
msgstr ""

#: ../../source/bitshares/user/dex-margin-mechanics.rst:217
msgid ""
"**Consequence #2**: Margin calls cannot \"buy cheap\" As we've seen "
"above, unless the settlement price goes above the call price of the "
"position, forced margin calls always buy at a premium relative to the "
"settlement price. Even if there are sell orders available at or near the "
"feed price, the margin called orders will not be matched with those sell "
"orders if their call price is higher than the price of those sell orders."
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:3
msgid "Short Selling BitAssets"
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:5
msgid ""
"In order to increase your exposure to BTS and offer liquidity to "
"BitAssets, such as USD, EUR, GOLD, etc., you can go *borrow* this "
"bitAsset from the network and *sell it short*. We will here briefly "
"describe the procedure."
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:10
msgid "Borrowing"
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:12
msgid ""
"The BitShares network is capable of issuing any amount of any BitAsset "
"and lend it out to participants given enough collateral."
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:15
msgid ""
"*settlement price*: The price for 1 BTS as it is traded on external "
"exchanges."
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:16
msgid ""
"*maintenance collateral ratio* (MCR): A ratio defined by the witnesses as"
" minimum required collateral ratio"
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:17
msgid ""
"*maximum short squeeze ratio* (MSQR): A ratio defined by the witnesses as"
" to how far shorts are protected against short squeezes"
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:18
msgid ""
"*short squeeze protection* (SQP): Defines the most that a margin position"
" will ever be forced to pay to cover"
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:19
msgid ""
"*call price* (CP): The price at which short/borrow positions are margin "
"called"
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:22
msgid "Margin Call"
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:24
msgid ""
"The BitShares network is capable of margin calling those positions that "
"do not have enough collateral to back their borrowed bitAssets. A margin "
"call will occur any time the highest bid is less than the *call price* "
"and greater than *SQP*. The margin position will be forced to sell its "
"collateral anytime the highest offer to buy the collateral is less than "
"the call price (x/BTS).::"
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:34
msgid ""
"The margin call will take the collateral, buy shares of borrowed bitAsset"
" at market rates up to the SQP and close the position. The remaining BTS "
"of the collateral are returned to the customer."
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:38
#: ../../source/bitshares/user/mpa.rst:102
msgid ""
"Read more about the :doc:`margin call mechanics <dex-margin-mechanics>` "
"before trading."
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:42
msgid "Settlement"
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:44
msgid ""
"Holders of any bitAsset can request a settlement at a *fair price* at any"
" time. The settlement closes the borrow/short positions with lowest "
"collateral ratio and sells the collateral for the settlement."
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:48
msgid ""
"Note, that there is a maximum daily settlement volume (currently 2%) "
"defined by the :doc:`committee <committee>` to prevent exploitation via "
"external price movements."
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:53
msgid "Selling"
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:55
msgid ""
"After burrowing bitAssets, they can be sold free at any of the "
"corresponding markets at any price a buyer is willing to pay. With this "
"step, the short-selling is now complete and you are short that particular"
" bitAsset."
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:60
msgid "Updating Collateral Ratio"
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:62
msgid ""
"At any time, the holder of a borrow/short position can modify the "
"collateral ratio in order to flexibly adjust to market behavior. If the "
"collateral ratio is increase, an additional amount of BTS is locked as "
"collateral, while reducing the collateral ratio will require an amount of"
" the corresponding BitAsset to be payed back to the network."
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:69
msgid "Covering"
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:71
msgid ""
"To close a borrow/short position, one must hold the borrowed amount of "
"that particular bitAsset to hand it over to the BitShares network. After "
"that, the BitAssets are reduced from the corresponding supply and the "
"collateral is released and given back to its owner."
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:79
#, python-format
msgid ""
"Shorts can pick their place in line for settlement. Think of it this way,"
" if you fall in the bottom 2% of shorters by collateral you have been "
"given notice of potential margin call since only 2% can be settled, "
"daily. This is like any other market where they give you 24 hours to add "
"collateral. If someone is short and doesn't want to meet the new higher "
"collateral limits then they can either cover on their own terms or add "
"collateral."
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:86
msgid ""
"By giving 24 hours shorts have an opportunity to cover prior to any price"
" manipulation by big players."
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:89
msgid ""
"If there is a 10% premium on BitUSD relative to the feed, then the "
"attacker would have to increase reported price feed (value of BTS) by 10%"
" just to get the force-settlement price to equal the previously fair "
"value for BitUSD. They would have to push beyond 10% before the short "
"starts taking a loss relative to a voluntary cover. All savvy market "
"participants would be aware of a large force-settle order and would "
"therefore reset the manipulator making it much harder to manipulate the "
"price. In effect, price manipulation represents \"free money\" to those "
"who know it is going on."
msgstr ""

#: ../../source/bitshares/user/dex-short.rst:98
msgid ""
"Look at it another way, someone enters a large force-settlement order it "
"becomes an opportunity for the shorter to do reverse manipulation. It is "
"a tug of war where both sides (short and long) have equal opportunity to "
"manipulate the market in their favor. They go to battle and the result is"
" just the fair market price at that point in time. It is not a guaranteed"
" win for the potential manipulator."
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:3
#: ../../source/bitshares/user/dex-trading.rst:77
msgid "Trading"
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:5
msgid ""
"This page will give a very quick introduction on how to interpret the "
"terms used by the DEX and how trading pairs are presented."
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:9
msgid "Pairs"
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:11
msgid ""
"In BitShares, almost any asset can be traded with all other assets. Once "
"we have picked two assets, we usually refer to a *market pair*. For "
"instance, we can trade USD against EUR in the USD:EUR pair."
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:15
msgid ""
"For sake of consistency, we will use the generalized terms *base* and "
"*quote* such that pairs are represented as::"
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:20
msgid ""
"and for instance with *base* being USD and *quote* being EUR, denote the "
"EUR:USD pair."
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:24
msgid "Market Overview"
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:26
msgid ""
"The market overview that can be access via the explorer, shows a set of "
"predefined default markets. Note that the list of default markets may "
"vary depending on the wallet provider. Further markets can be added using"
" the *Find Markets* tab. Adding a *Star* to your favorite markets will "
"make it appear in your list of default markets."
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:38
msgid "Market"
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:40
msgid "When entering a market, you will presented with either the market depth"
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:47
msgid "... or the price chart depending on your settings."
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:54
msgid ""
"You can switch between your views by pressing the corresponding button as"
" highlighted below."
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:58
msgid "Order Books"
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:60
msgid ""
"The order book consists of an *ask* and a *bid* side. Since trading pairs"
" do not have a preferred orientation, and can be flipped, the following "
"table shall give an overview of ask/bid and the corresponding buy/sell "
"operations for each side:"
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:65
msgid "Side"
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:65
msgid "Sell"
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:65
msgid "Buy"
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:67
msgid "Ask"
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:67
#: ../../source/bitshares/user/dex-trading.rst:69
msgid "*quote*"
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:67
#: ../../source/bitshares/user/dex-trading.rst:69
msgid "*base*"
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:69
msgid "Bid"
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:72
msgid ""
"Obviously, what is on the bid side of the USD:EUR pair will be on the ask"
" side on the EUR:USD pair. Of course prices are internally represented as"
" fractions, and thus results in both pairs being identical."
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:79
msgid ""
"To place a trading order, it is required to fill the form on either the "
"*ask* or the *bid* side (respectively, *buy* or *sell* side). You will "
"need to define a *price* and an *amount* to sell/buy. The cost for this "
"order will be calculated automatically. Note that there will be an "
"additional fee required to actually place the order."
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:90
msgid ""
"Once the order is filled (i.e. someone sold/bought your offer), your "
"account will be credited by the corresponding asset."
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:93
msgid "Unfilled orders can be canceled at any time."
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:96
msgid "Order Matching"
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:98
msgid ""
"BitShares 2.0 matches orders on a first-come, first-serve basis and gives"
" the buyer the best price possible up to the limit (also known as "
"\"walking the book\"). Rather than charging *unpredictable fees* from "
"market overlap (as has been in the previous network), the network charges"
" a defined fee based upon the size of the order matched and the assets "
"involved. Each asset issuer gets an opportunity to configure their fees."
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:105
msgid "Tutorial"
msgstr ""

#: ../../source/bitshares/user/dex-trading.rst:107
msgid ":doc:`../tutorials/dex-trading.rst`"
msgstr ""

#: ../../source/bitshares/user/eba.rst:3
msgid "Exchange Backed Assets"
msgstr ""

#: ../../source/bitshares/user/eba.rst:5
msgid ""
"Exchange Backed Assets represent deposit receipts that are issued by a "
"centralized entity, such as exchanges, banks or other institutes. These "
"can either be interpreted as *I owe you* (IOUs) or certificates for a "
"deposit at that institute."
msgstr ""

#: ../../source/bitshares/user/eba.rst:10
msgid ""
"From the blockchain perspective, EBA are equivalent to a :doc:`uia` that "
"is created and issued by an exchange, bank or financial institute. Hence,"
" it is their responsibility to credit you with the corresponding "
"blockchain token (the EBA) on deposits."
msgstr ""

#: ../../source/bitshares/user/eba.rst:16
msgid "Use Case"
msgstr ""

#: ../../source/bitshares/user/eba.rst:18
msgid ""
"The most common use case would be a centralized exchange that allows "
"their users to deposit crypto currencies in their wallets. These deposits"
" are usually stored in their own database and the customers internal "
"account balance is matched accordingly. These database balances serve as "
"**deposit receipts** but obviously require some trust that the database "
"is properly secured against any kind of attacks."
msgstr ""

#: ../../source/bitshares/user/eba.rst:25
msgid ""
"Instead of increasing an internal account balance of a user, new shares "
"of an EBA can be issued to the user on deposits. Since EBAs are "
"blockchain tokens, they can be traded on the decentralized exchange "
"similar to any other exchange."
msgstr ""

#: ../../source/bitshares/user/eba.rst:30
msgid ""
"In order to reclaim his crypto tokens on their native blockchain, the "
"users sends back the EBAs to the institute who then destroy the EBAs and "
"transfer the corresponding asset back to its rightful owner."
msgstr ""

#: ../../source/bitshares/user/eba.rst:37
msgid ""
"Since EBAs are implemented as UIA, you can read more about the underlying"
" technology on the :doc:`corresponding page <uia>`."
msgstr ""

#: ../../source/bitshares/user/fba.rst:3
msgid "Fee Backed Asset"
msgstr ""

#: ../../source/bitshares/user/fba.rst:5
msgid ""
"Existing core features of the BitShares protocol are Market Pegged Assets"
" (MPA) and issuer backed User Issued Assets (UIA). In this proposal, we "
"introduce another type of asset: *Fee Backed Assets (FBA)*."
msgstr ""

#: ../../source/bitshares/user/fba.rst:9
msgid ""
"Feed backed assets allow to propose and fund *market based* innovation by"
" sharing a cut of future profits generated by this particular innovation "
"with the people that helped fund it. Think of it as a *Kickstarter* for "
"features. Hence, if people can profit from successful features in the "
"form of fees then it can help the BitShares ecosystem to become more "
"adaptable over time as it promotes innovation and can pay for its "
"development."
msgstr ""

#: ../../source/bitshares/user/fba.rst:16
msgid ""
"If you have any features in mind that require new kind of transaction on "
"the blockchain, you can code that feature and fund it with an FBA."
msgstr ""

#: ../../source/bitshares/user/fba.rst:19
msgid "Feed Backed Assets have been proposed in `BSIP-0007`_."
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:3
msgid "First Steps for End-Users"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:5
msgid ""
"This guide gives a quick introduction of how to use BitShares as an end-"
"user."
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:8
msgid "Learn about BitShares"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:10
msgid ""
"BitShares is different from anything you have experienced yet and as "
"such, a user should know about advantages, risks, and opportunities. As a"
" starter, we highly recommend to read through the :doc:`you-should-know` "
"to get a first impression of what BitShares is and how it is different to"
" existing systems."
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:17
msgid "Choose your Client"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:19
msgid ""
"Several ways existing to enter the BitShares network that focus on "
"different aspects. To actually interact with the BitShares ecosystem, you"
" can either"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:23
msgid "`download the Official Light Client <http://bitshares.org/download/>`_"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:24
msgid "or access the network in the browsers via one of our partners:"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:28
msgid ""
"All of these solutions have one thing in common: **You have sole control "
"of your accounts and funds** and they are created on your computer "
"(within the light-client or the browser). Hence, you will only be able to"
" access your account on the computer that you have used to register and "
"create your account, unless you export your wallet and import it "
"somewhere else."
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:36
msgid "Accounts, Wallets, Keys: Terminology!"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:38
msgid ""
"Most clients distinguish between accounts from wallets and all of they "
"use keys to access funds. Let's quickly clarify the terms here:"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:41
msgid ""
"**Keys**: Keys refer to the cryptography used to secure access to your "
"account and funds. It is of importance to prevent others from gaining "
"access to these. This is why you have to provide a passphrase that is "
"used to store the keys in an encrypted way."
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:45
msgid ""
"**Accounts**: Each user has at least one account that can be used to "
"interact with the blockchain. In the end, this can be seen as a single "
"banking account with an individual balance, transaction history, etc. "
"Since these accounts are registered on the blockchain and are open to the"
" public, we recommend to pick a pseudonym to achieve some privacy. The "
"advantage of using account names is that people can identify you by using"
" a readable and memorable word instead of cryptographic addresses."
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:53
msgid ""
"**Wallet**: Since users can (if they have a lifetime membership) register"
" multiple accounts in parallel, all of them are stored in a single "
"wallet. Hence, a wallet can carry many accounts. Furthermore, users can "
"create multiple wallets to organize their accounts properly."
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:59
msgid "Create an Account"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:61
msgid ""
"In order to use BitShares, you will need to register an account. All you "
"need to provide is an account name and a password to secure your wallet:"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:64
msgid ""
"The *identicon* at the top can be used to verify your account name to "
"third parties. It is derived from your account name and gives a second "
"verification factor. And this is how you register your account:"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:73
msgid ""
"In contrast to any other platform you have ever used: **Creating an "
"account at one of our partners will make your account available at all "
"the other partners as well.**. Hence, your account name can be seen "
"similar to a mail address in such that it is **unique** and every "
"participant in the BitShares network can interact with you independent of"
" the actual partner providing the wallet."
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:80
msgid ""
"After creation of your account, you will see an **Account** link in the "
"top navigation bar to browse to your account."
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:83
msgid ""
"Whether you control an account or not can be seen from the account's "
"overview. If it states **(Your Account)**, you do have the requird keys "
"installed in your wallet to access its funds. Otherwise, you can only "
"view the account but cannot transact from it!"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:95
msgid "Backup your account"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:97
msgid ""
"Since you are the only individual that has access to your account and "
"funds, it is **your responsibility** to make a secure backup of your "
"registered account."
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:100
msgid ""
"Once you have registered your account, you can click the warning in the "
"footer to directly enter the backup page of your wallet:"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:103
msgid "Click the *Backup required* link in the footer"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:110
msgid "Click **Create Backup**"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:111
msgid ""
"Click **Download** and store the file **safely**. Make sure to **remember"
" the passphrase** you provided when you created your wallet (above) as "
"the downloaded file is encrypted with it."
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:115
msgid ""
"*(optionally but recommended)* Note the ``xxxxxx * SHA1`` checksum to "
"verify the backup"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:118
msgid "Fund your account"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:120
msgid "In order to fund your account you have two options:"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:122
msgid ""
"**Transfers**: Ask a partner or exchange to send funds to you. To do so, "
"you will only need to **provide them with your account name**."
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:124
msgid ""
"**Deposits**: By visiting your **deposit/withdraw** page in your "
"account's navigation, you can use one of our partners to move over "
"existing funds into your BitShares account."
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:128
msgid ""
"In order to understand the meanings of different assets, we recommend you"
" to read through our :doc:`assets page <assets>`."
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:132
msgid "Commonly used Features"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:135
msgid "Moving Funds"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:137
msgid ""
"Using the *transfer* tool available from the main menu bar allows to move"
" funds from your account to an arbitrary other account. If you enter the "
"transfer page, your account name will be pre-filled into the source "
"field. You will need to provide the **recipient's account name**, the "
"amount and asset to transfer and can optionally add a memo to help the "
"recipient to identify your transfer (the memo is encrypted and only you "
"and the recipient can read it)."
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:149
msgid ""
"On the BitShares blockchain, people never need to deal with *addresses* "
"or *public keys* but can instead use account names. Your account name "
"becomes the *email address* for your funds."
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:155
msgid "Trading in the Decentralized Exchange (DEX)"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:157
msgid ""
"To trade your assets into other assets you can use the built-in "
"decentralized exchange (often referred to as *the DEX*). It is available "
"using the **Trade** menu item and shows a list of commonly used markets."
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:166
msgid ""
"By clicking any of the rows, you enter a particular market in which you "
"can participate by selling or buying from the market or by placing a "
"orders into the order books at **your** price."
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:175
msgid ""
"Once an order is filled, the corresponding asset will appear in your "
"balance immediately. In BitShares, clearing and settlement are performed "
"instantaneously."
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:184
msgid "Read more:"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:186
msgid ":doc:`dex`"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:187
msgid ":doc:`dex-trading`"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:190
msgid "Exploring the Blockchain"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:192
msgid ""
"The blockchain and business can be investigated using the built-in "
"explorer from the main navigation bar. There you can take a closer look "
"at:"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:195
msgid "the blockchain,"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:196
msgid "the available assets,"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:197
msgid "registered accounts,"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:198
msgid "witnesses,"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:199
msgid "committee members,"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:200
msgid "markets, and"
msgstr ""

#: ../../source/bitshares/user/first-steps-users.rst:201
msgid "the fee schedule."
msgstr ""

#: ../../source/bitshares/user/governance.rst:3
msgid "Blockchain Governance"
msgstr ""

#: ../../source/bitshares/user/governance.rst:5
msgid ""
"The blockchain can and needs to be governed by **elected** individuals "
"and businesses. The so called *committee* (a set of many individuals), "
"can change blockchain parameters such as block size, block confirmation "
"time and others. Most importantly, though, they deal with the business "
"plan of the blockchain and tweak costs and revenue streams (mainly "
"transaction fees). In contrast to most existing crypto currencies, we are"
" not hoping for a fee market to grow but instead have the committee "
"members deal with fine-tuning of the business plan. Fortunately, the "
"shareholders have the final say to approve the executive committee."
msgstr ""

#: ../../source/bitshares/user/governance.rst:15
msgid ""
"Hence, we see businesses competing for seats in the committee to define "
"blockchain parameters."
msgstr ""

#: ../../source/bitshares/user/governance.rst:18
msgid ""
"If business ideas requires certain blockchain parameters or a particular "
"set of fees to be profitable, there are several options:"
msgstr ""

#: ../../source/bitshares/user/governance.rst:21
msgid ""
"Argue with shareholders to approve committee members that vote in their "
"favour"
msgstr ""

#: ../../source/bitshares/user/governance.rst:23
msgid ""
"Get elected as committee member by showing that the business is worth "
"being available in that particular chain"
msgstr ""

#: ../../source/bitshares/user/governance.rst:25
msgid ""
"Deploy the innovative business idea as a smart contract on the blockchain"
" and have the shareholders approve the upgrade in combination with *Fee "
"Backed Asset* that pays future fees of the smart contract to holders of "
"that asset (:doc:`fba`)"
msgstr ""

#: ../../source/bitshares/user/index.rst:3
msgid "User Guide"
msgstr ""

#: ../../source/bitshares/user/index.rst:6
msgid "For End User"
msgstr ""

#: ../../source/bitshares/user/index.rst:8
msgid ""
"We would like to introduce most features to the user in a friendly and "
"easy to understand way in this *User Guide*. Note, that the blockchain "
"itself is capable of many more things that are not (yet) exposed to the "
"end-user. In the future, we expect to see many more customized wallets "
"that expose different features to their users."
msgstr ""

#: ../../source/bitshares/user/index.rst:31
msgid "For Blockchain \"Employees\""
msgstr ""

#: ../../source/bitshares/user/index.rst:33
msgid ""
"BitShares 2 separates responsibilities and incentives activities that are"
" beneficial to the network, thus acknowledging different skill sets and "
"interested community members to have incentives to contribute in the most"
" appropriate way."
msgstr ""

#: ../../source/bitshares/user/index.rst:38
msgid "Witnesses are paid for maintaining the back-bone of the network."
msgstr ""

#: ../../source/bitshares/user/index.rst:39
msgid ""
"Committee members are unpaid volunteers that organize the community and "
"propose changes to the network."
msgstr ""

#: ../../source/bitshares/user/index.rst:40
msgid "Marketers are paid in referral fees."
msgstr ""

#: ../../source/bitshares/user/index.rst:41
msgid "Workers are paid for whatever they propose and do."
msgstr ""

#: ../../source/bitshares/user/index.rst:42
msgid ""
"Shareholders are people holding BTS. They can cast a vote and influence "
"the DAC's businesses"
msgstr ""

#: ../../source/bitshares/user/index.rst:44
msgid ""
"Each of the above (except Marketers) requires users to vote for the "
"people, proposals, and/or changes. Those with sufficient approval will be"
" compensated."
msgstr ""

#: ../../source/bitshares/user/index.rst:47
msgid ""
"Workers are the \"catch all\" group where if you have an idea for "
"something that could improve the network, you can get \"paid\" by the "
"network to do it. Organizing meet-ups, developing a new tool or feature "
"for the community, and maintaining websites and infrastructure (e.g. the "
"mumble server team or linux distribution) are all examples of things "
"workers may do."
msgstr ""

#: ../../source/bitshares/user/marketer.rst:3
msgid "Marketer"
msgstr ""

#: ../../source/bitshares/user/mpa.rst:5
msgid ""
"A crypto-currency, with the properties and advantages of Bitcoin, that is"
" capable of maintaining price parity with a globally adopted currency "
"(e.g. U.S.  dollar), has high utility for convenient and censorship "
"resistant commerce. This can be achieved by BitShares' market pegged "
"assets (MPA), a new type of freely traded digital asset whose value is "
"meant to track the value of a conventional underlying asset by means of "
"contracts for difference (CFD)."
msgstr ""

#: ../../source/bitshares/user/mpa.rst:13
msgid ""
"Instead of creating a UIA where the full control over supply is in the "
"hands of the issuer, we can also create a **Market Pegged Asset** (MPA) "
"and let the market deal with demand and supply. All we need is a *fair "
"price* and another asset that can be used as collateral."
msgstr ""

#: ../../source/bitshares/user/mpa.rst:18
msgid ""
"Why would we need *collateral* for? Since the issuer of a MPA has no "
"control over the supply, the blockchain protocol deals with increasing "
"and decreasing supply. In order for a user to get some of the new coins, "
"he will need to put collateral into a **smart contract** (technically, "
"this contract is a *contract for difference*)."
msgstr ""

#: ../../source/bitshares/user/mpa.rst
msgid ""
"A simple example would be a MPA that is backed by USD (a stable crypto "
"token within BitShares) that requires a collateral ratio of 200%. Then, "
"in order to get new coin, we can borrow 100 USD worth of new coins by "
"paying 200 USD."
msgstr ""

#: ../../source/bitshares/user/mpa.rst:29
msgid ""
"By this, the supply of your coin is increased by 100. But how would it be"
" decreased? The USD are locked in the smart contract and can only be "
"reclaimed if the debt (here, 100 coins) are returned. Returning them will"
" result in the coins being removed from the supply because the are no "
"longer backed by any collateral."
msgstr ""

#: ../../source/bitshares/user/mpa.rst:35
msgid ""
"So what for do we need a *fair price*? Remember that we chose a "
"collateral ratio of 200%? That number tells us how well *backed* your "
"coins are by the collateral. But what would happen if the value of your "
"coin goes to the moon?  Then your collateral ratio will reduce to say "
"150%. At a certain percentage, the blockchain will automatically trigger "
"so called *Margin Calls* which will"
msgstr ""

#: ../../source/bitshares/user/mpa.rst:42
msgid "Take your collateral (here, USD)"
msgstr ""

#: ../../source/bitshares/user/mpa.rst:43
msgid "Sell it in the market to buy back the coin you owe"
msgstr ""

#: ../../source/bitshares/user/mpa.rst:44
msgid "Close the contract"
msgstr ""

#: ../../source/bitshares/user/mpa.rst:45
msgid "Pay your the residual USD"
msgstr ""

#: ../../source/bitshares/user/mpa.rst:47
msgid ""
"A *fair price* thus tells the market what your coin is worth (e.g. traded"
" for on external exchanges) and triggers margin calls if necessary."
msgstr ""

#: ../../source/bitshares/user/mpa.rst:51
msgid ""
"But there is more! Everyone that holds your (MPA) coin in BitShares can "
"convert the coin into the backing asset at a fair price. This procedure "
"is called \"settlement\" and ensures that your MPA is always worth **at "
"least** the *fair price*."
msgstr ""

#: ../../source/bitshares/user/mpa.rst:56
msgid ""
"In the User Interface, MPAs are easily distinguishable from UIAs in the "
"asset explorer."
msgstr ""

#: ../../source/bitshares/user/mpa.rst:60
msgid "SmartCoins"
msgstr ""

#: ../../source/bitshares/user/mpa.rst:62
msgid ""
"BitAssets can be created and owned by anyone on the network. However, "
"those that are owned by the BitShares Committee, are called *SmartCoins*."
" Among these are:"
msgstr ""

#: ../../source/bitshares/user/mpa.rst:66
msgid "(Bit)USD"
msgstr ""

#: ../../source/bitshares/user/mpa.rst:67
msgid "(Bit)CNY"
msgstr ""

#: ../../source/bitshares/user/mpa.rst:68
msgid "(Bit)EUR"
msgstr ""

#: ../../source/bitshares/user/mpa.rst:69
msgid "(Bit)GOLD"
msgstr ""

#: ../../source/bitshares/user/mpa.rst:70
msgid "(Bit)Silver"
msgstr ""

#: ../../source/bitshares/user/mpa.rst:72
msgid ""
"Balances in these assets are labeled with `USD`, `CNY`, etc., because "
"represent the same value as their underly."
msgstr ""

#: ../../source/bitshares/user/mpa.rst:76
msgid "Collateralized Tokens"
msgstr ""

#: ../../source/bitshares/user/mpa.rst:78
#, python-format
msgid ""
"A *SmartCoin* (synonym for MPA) is a crypto-currency that *always* has "
"100% or more of its value backed by the BitShares core currency (BTS), to"
" which they can be converted at any time, as *collateral* in a CFD."
msgstr ""

#: ../../source/bitshares/user/mpa.rst:82
msgid ""
"What makes MPAs unique is that they are free from counterparty risk even "
"though they resemble a CFD backed by collateral. This is achievable by "
"letting the network itself (implemented as a software protocol) be "
"responsible for securing the collateral and performing settlements as "
"will be described in more detail below."
msgstr ""

#: ../../source/bitshares/user/mpa.rst:89
msgid "Market Mechanics"
msgstr ""

#: ../../source/bitshares/user/mpa.rst:91
msgid ""
"Each BitAsset has a feed that is provided by the witnesses that indicate "
"a fair price for that asset. This so called *Settlement Price* or *Feed "
"Price* is used to margin call positions that borrowed BitAssets and can "
"no longer maintain the minimum collateral ratio (i.e. maintenance "
"collateral ratio). The collateral of these positions is used to buy back "
"the debt from the market automatically and the position will be closed. "
"By these rules, the network enforces the exchange participants to always "
"maintain a collateral that is higher than the minimum requirement. "
"Currently, the minimum required collateral ratio is **175%** and can be "
"changed by the witnesses."
msgstr ""

#: ../../source/bitshares/user/pm.rst:5
msgid ""
"A prediction market is a specialized BitAsset such that total debt and "
"total collateral are always equal amounts (although asset IDs differ). No"
" margin calls or force settlements may be performed on a prediction "
"market asset. A prediction market is globally settled by the issuer after"
" the event being predicted resolves, thus a prediction market must always"
" have the `global_settle` permission enabled. The maximum price for "
"global settlement or short sale of a prediction market asset is 1-to-1."
msgstr ""

#: ../../source/bitshares/user/pm.rst:13
msgid ""
"In the following, we denote a *positive outcome* as a predication market "
"that resolves to `true` (i.e. a price feed of `1`) and a *negative "
"outcome* to resolve to `false` (i.e. a price feed of `0`)"
msgstr ""

#: ../../source/bitshares/user/pm.rst:18
msgid ""
"If the bet resolves to `true` (i.e. a price feed of `1`), then the PM-"
"asset can be settled release the collateral to the holder of the asset."
msgstr ""

#: ../../source/bitshares/user/pm.rst:22
msgid ""
"If, instead, the bet resolves to `false` (i.e. a price feed of `0`), then"
" those that sold the PM-asset on the market and went short, made a profit"
" since it PM-asset became worthless."
msgstr ""

#: ../../source/bitshares/user/pm.rst:27
msgid "Creation"
msgstr ""

#: ../../source/bitshares/user/pm.rst:29
msgid ""
"Prediction markets are assets that trade freely and can be borrowed from "
"the market at a 1:1 ratio with the backing asset (which could be any "
"other asset, including BTS, USD, GOLD)."
msgstr ""

#: ../../source/bitshares/user/pm.rst:33
msgid "The technical details are described in a separate tutorial:"
msgstr ""

#: ../../source/bitshares/user/pm.rst:35
msgid ":doc:`../tutorials/pm-create-manual`"
msgstr ""

#: ../../source/bitshares/user/pm.rst:38
msgid "Betting"
msgstr ""

#: ../../source/bitshares/user/pm.rst:40
msgid ""
"A user can take either bet on a positive outcome, or a negative outcome. "
"We here show how this works, technically."
msgstr ""

#: ../../source/bitshares/user/pm.rst:44
msgid "Betting for a Positive Outcome"
msgstr ""

#: ../../source/bitshares/user/pm.rst:46
msgid ""
"If you are confident that the bet will resolve positive, you want to "
"**hold** that particular PM-asset since it allows you to settle it for "
"it's collateral on a 1:1 basis."
msgstr ""

#: ../../source/bitshares/user/pm.rst:50
msgid ""
"In order to get hold of those tokens, you can put a buy order for them at"
" any price (between 0 and 1) and wait for it to be filled, or buy at "
"market rates. By this technique, a user can pre define at which odds to "
"buy shares."
msgstr ""

#: ../../source/bitshares/user/pm.rst:55
msgid ""
"For instance, if you think that the bet resolves positively at a "
"probability of `80%`, you can put your buy order at a price of `0.8`. If "
"the bet resolves positively (price feed of `1`), then you can settle your"
" shares at `1` and make a 20% profit."
msgstr ""

#: ../../source/bitshares/user/pm.rst:60
msgid ""
"If you can buy tokens at a price of `0.2` (i.e. market participants think"
" it is unlikely to resolve positively), then you could make `80%` profits"
" at a risk of loosing with `80%` probability."
msgstr ""

#: ../../source/bitshares/user/pm.rst:64
msgid ""
"After closing of the bet, a user can claim his profits by **settling** "
"his borrow position and taking out the collateral:"
msgstr ""

#: ../../source/bitshares/user/pm.rst:67
msgid "**Settlement in the CLI wallet**: ::"
msgstr ""

#: ../../source/bitshares/user/pm.rst:72
msgid ""
"**Borrowing in the GUI wallet**: A settlement button is available when "
"hovering the asset in your account's overview."
msgstr ""

#: ../../source/bitshares/user/pm.rst:77
msgid "Betting for a Negative Outcome"
msgstr ""

#: ../../source/bitshares/user/pm.rst:79
msgid ""
"In order to bet for a negative outcome (bet resolves to `false` with a "
"price feed of `0`), you need to **sell** the tokens. In order to get "
"them, you should **not** buy them at the market, but instead **borrow** "
"them from the network by paying collateral at a 1:1 ratio."
msgstr ""

#: ../../source/bitshares/user/pm.rst:84
msgid ""
"For example, in the `PM.PRESIDENT2016` if you want to bet on a negative "
"outcome with `100k BTS`, you can borrow `100k PM.PRESIDENT2016` by paying"
" `100k BTS` to the network."
msgstr ""

#: ../../source/bitshares/user/pm.rst:88
msgid ""
"Since PM-Assets can technically be pegged by any other asset, you may "
"need to pay USD (or anything else) instead of BTS."
msgstr ""

#: ../../source/bitshares/user/pm.rst:91
msgid ""
"Once you borrowed the token, you can sell them at any price between `0` "
"and `1`. If you thing the probability of a negative outcome is `20%`, you"
" should consider selling your tokens at `0.2`."
msgstr ""

#: ../../source/bitshares/user/pm.rst:95
msgid ""
"If the bet resolves negatively (price feed of `0`), your debts is worth "
"`debt = amount * price = 0 BTS`, you can reclaim your collateral at zero "
"cost, and get to keep `20%` profits from selling the token at `0.2`. If "
"instead the bet resolves positively and you sold all tokens, you cannot "
"close your borrow position to redeem your collateral. However, your total"
" loss is reduced by `20%` for selling the tokens at the market."
msgstr ""

#: ../../source/bitshares/user/pm.rst:102
msgid ""
"If, by the end of the bet, you still have some of the tokens left, you "
"can of course close your borrow position partly and redeem the "
"corresponding percentage of the collateral."
msgstr ""

#: ../../source/bitshares/user/pm.rst:106
msgid "**Borrowing in the CLI wallet**: ::"
msgstr ""

#: ../../source/bitshares/user/pm.rst:111
msgid ""
"**Borrowing in the GUI wallet**: Of course, the asset can also be "
"borrowed in the **GUI/web wallet** by using the `Borrow x` button in the "
"market."
msgstr ""

#: ../../source/bitshares/user/pm.rst:121
msgid "Resolving"
msgstr ""

#: ../../source/bitshares/user/pm.rst:123
msgid ""
"A price feed needs to be published for the prediction market by the "
"issuer or feed producer. It is essentially a global settlement which will"
" set the parameters of the asset such that the holders of the asset can "
"settle at the outcome of the bet (0, or 1). The details are shown in the "
"tutorial:"
msgstr ""

#: ../../source/bitshares/user/pm.rst:129
msgid ":doc:`../tutorials/pm-close-manual`"
msgstr ""

#: ../../source/bitshares/user/privbta.rst:3
msgid "Privatized BitAssets"
msgstr ""

#: ../../source/bitshares/user/privbta.rst:5
msgid ""
"Alternatively to regular MPA like the bitUSD, BitShares also offers "
"entrepreneurs an opportunity to create their own SmartCoins with custom "
"parameters and a distinct set of price feed producers."
msgstr ""

#: ../../source/bitshares/user/privbta.rst:9
msgid ""
"Privatized SmartCoin managers can experiment with different parameters "
"such as collateral requirements, price feeds, force settlement delays and"
" forced settlement fees. They also earn the trading fees from "
"transactions the issued asset is involved in, and therefore have a "
"financial incentive to market and promote it on the network. The "
"entrepreneur who can discover and market the best set of parameters can "
"earn a significant profit.  The set of parameters that can be tweaked by "
"entrepreneurs is broad enough that SmartCoins can be used to implement a "
"fully functional prediction market with a guaranteed global settlement at"
" a fair price, and no forced settlement before the resolution date."
msgstr ""

#: ../../source/bitshares/user/privbta.rst:19
msgid ""
"Some entrepreneurs may want to experiment with SmartCoins that always "
"trade at exactly $1.00 rather than strictly more than $1.00. They can do "
"this by manipulating the forced settlement fee continuously such that the"
" average trading price stays at about $1.00. By default, BitShares "
"prefers fees set by the market, and thus opts to let the price float "
"above $1.00, rather than fixing the price by directly manipulating the "
"forced settlement fee."
msgstr ""

#: ../../source/bitshares/user/privbta.rst:27
msgid "Preparations"
msgstr ""

#: ../../source/bitshares/user/privbta.rst:29
msgid "First, the reader should familiarize himself with the following articles:"
msgstr ""

#: ../../source/bitshares/user/privbta.rst:32
msgid ":doc:`assets-faq`"
msgstr ""

#: ../../source/bitshares/user/privbta.rst:33
msgid ":doc:`../tutorials/uia-create-manual`"
msgstr ""

#: ../../source/bitshares/user/privbta.rst:34
msgid ":doc:`../tutorials/mpa-create-manual`"
msgstr ""

#: ../../source/bitshares/user/privbta.rst:39
msgid "The relevant and interesting parameters are located in the uia flags:"
msgstr ""

#: ../../source/bitshares/user/privbta.rst:48
msgid ""
"Setting these two parameters to ``false``, allows to manually define the "
"set of feed producers (see below). Alternatively, setting either of both "
"to ``true`` will give the corresponding entity the responsibility to "
"produce and publish a feed."
msgstr ""

#: ../../source/bitshares/user/privbta.rst:54
msgid "Changing the Feed producers"
msgstr ""

#: ../../source/bitshares/user/privbta.rst:56
msgid ""
"The following command replaces the set of currently allowed feed "
"producers by the new set of feed producers:"
msgstr ""

#: ../../source/bitshares/user/privbta.rst:64
msgid "Producing a Feed"
msgstr ""

#: ../../source/bitshares/user/privbta.rst:66
msgid ""
"We have a distinct tutorial that describes how feed are can be published:"
" :doc:`../tutorials/publish-feed`."
msgstr ""

#: ../../source/bitshares/user/recover-from-brainkey.rst:3
msgid "Recover account with brain key"
msgstr ""

#: ../../source/bitshares/user/recover-from-brainkey.rst:5
msgid ""
"If you have the brain key, then you can reclaim access to your account(s)"
" and its funds by"
msgstr ""

#: ../../source/bitshares/user/recover-from-brainkey.rst:8
msgid "Open the Settings"
msgstr ""

#: ../../source/bitshares/user/recover-from-brainkey.rst:9
msgid "Enter the wallet mangement console"
msgstr ""

#: ../../source/bitshares/user/recover-from-brainkey.rst:10
msgid "Click on \"New wallet\""
msgstr ""

#: ../../source/bitshares/user/recover-from-brainkey.rst:11
msgid "Click \"Custom Brainkey (advanced)\""
msgstr ""

#: ../../source/bitshares/user/recover-from-brainkey.rst:12
msgid "Provide a new (or the old) passphrase"
msgstr ""

#: ../../source/bitshares/user/recover-from-brainkey.rst:13
msgid "provide the brain key"
msgstr ""

#: ../../source/bitshares/user/recover-from-brainkey.rst:14
msgid "Create the new wallet"
msgstr ""

#: ../../source/bitshares/user/recover-from-brainkey.rst:16
msgid ""
"Your account should now be accessible from the top navigation bar. If you"
" only have one account, you will see **Account**, else you will see "
"**Dashboard**."
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:3
msgid "Referal Program"
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:5
msgid ""
"The purpose of the referral program is to incentivize people to bring in "
"more people. It compares to a Multi-Level-Marketing (MLM) scheme with the"
" difference of having only **1 level** where referred individuals can "
"opt-out by upgrading their account to a :doc:`Life-Time Member (LTM) "
"<account-memberships>`. Every life time member, can get a cut of the fees"
" based on child accounts linked to ours via referral."
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:12
msgid ""
"BitShares has several different kinds of accounts: * Basic Account, and *"
" Lifetime Member."
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:16
msgid ""
"**Basic Accounts** are free, but do not qualify for the referral program,"
" nor any cash back on transaction fees."
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:19
#, python-format
msgid ""
"**Lifetime Members** pay an upgrade fee and earn **80% cash back on every"
" fee they pay**. They also qualify for **80% of the fees paid by Basic "
"Accounts they refer** to the network. These 80% can be split among the "
"registrar, that actually registers the accounts, and an affiliate "
"referrer, that brought in the new user."
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:25
msgid ""
"In Q1/2016, the *anual membership* has been removed from the code base "
"and no longer exists. References to this kind of memberships can be "
"safely ignored."
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:29
msgid ""
"The referral fees are controlled by the blockchain and are distributed "
"like this:"
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:31
#, python-format
msgid "20% go to the network"
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:32
#, python-format
msgid "80% go to the referral program"
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:34
#, python-format
msgid "of this 80%, x% go to the registrar"
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:35
#, python-format
msgid "of this 80%, 100%-x% go to the affiliate referrer"
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:37
#, python-format
msgid ""
"For many cases it may make sense to upgrade the account even though you "
"don't want to participate in marketing at all simply for the reasons to "
"get a cashback of 80% of the fees you pay for your own transactions!"
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:43
msgid "What to do?"
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:45
msgid ""
"If you want to participate in the referral program, you need to have a "
"life-time member account, first! Then you can bring in new users by"
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:48
#, python-format
msgid ""
"running your own faucet and actually register new accounts (will give you"
" 80% of all the fees of those minus a fraction that you decide to give to"
" affiliates (the referrers)"
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:51
msgid ""
"referring people to a hosted wallet that offers you a cut of the fees as "
"an affiliate."
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:54
msgid ""
"In this case, most hosted wallets add your account as affiliate if you "
"provide the following link structure to people"
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:61
msgid ""
"with ``<your-account>`` being the name of your BitShares Lite-Time Member"
" account."
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:64
msgid ""
"If you want link to pages with in the wallet, e.g. a particular "
"decentralized market, you need to have the ``?r=`` parameter **before** "
"the ``#``, e.g.::"
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:73
msgid ""
"When an Basic Account pays $100 to become a Lifetime Member, $50 is paid "
"to their Referrer, $30 is paid to the nearest Lifetime Member, and $20 is"
" paid to the Network. After this point the Lifetime Member becomes its "
"own referrer and nearest Lifetime Member and its prior Referrers no "
"longer get any revenue from this user."
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:80
msgid "Terms & Conditions"
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:82
msgid ""
"Please see the `Referral Program - Terms & Conditions "
"<https://bitshares.org/referral-program-terms-and-conditions/>`_ for more"
" details."
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:87
msgid "Claiming Referral Bonus and Cashback"
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:89
msgid "If you have a life time member account and"
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:91
msgid "already paid some fees, or"
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:92
msgid "have referred people that paid some fees,"
msgstr ""

#: ../../source/bitshares/user/referral-program.rst:94
msgid "you can withdraw them in the \"Vesting\" tab of your account."
msgstr ""

#: ../../source/bitshares/user/security.rst:3
msgid "Security"
msgstr ""

#: ../../source/bitshares/user/security.rst:5
msgid ""
"Since BitShares 2.0 is about financial freedom and securing wealth, we "
"take users concerns about application and network security serious."
msgstr ""

#: ../../source/bitshares/user/security-brainkey.rst:3
msgid "The Brain Key"
msgstr ""

#: ../../source/bitshares/user/security-brainkey.rst:5
msgid ""
"The *brain key* is used as source for all cryptographic keys generated in"
" the wallet. If you have it secured, you will be able to regain access to"
" your accounts and funds (unless the access keys have been changed)"
msgstr ""

#: ../../source/bitshares/user/security-brainkey.rst:10
msgid "Backing Up the Brain Key"
msgstr ""

#: ../../source/bitshares/user/security-brainkey.rst:12
msgid ""
"The brain key can be backed up as a string using the *Wallet Management "
"Console** in your settings."
msgstr ""

#: ../../source/bitshares/user/security-brainkey.rst:21
msgid "Restoring from Brain Key"
msgstr ""

#: ../../source/bitshares/user/security-brainkey.rst:23
msgid ""
"Your wallet can be restored with the brain key from the GUI. When "
"creating a new wallet there is a link at the bottom, ``Existing "
"Accounts``. From there select ``Create Wallet`` and then ``Custom Brain "
"Key (Advanced)`` from the bottom."
msgstr ""

#: ../../source/bitshares/user/security-cold.rst:3
msgid "Securing \"Cold\" Wallets"
msgstr ""

#: ../../source/bitshares/user/security-cold.rst:6
msgid "Obtaining A Private Key"
msgstr ""

#: ../../source/bitshares/user/security-cold.rst:9
msgid "Exporting Existing Private Key"
msgstr ""

#: ../../source/bitshares/user/security-cold.rst:11
msgid ""
"Existing private keys can be obtained from the ``Permissions`` tab in the"
" wallet."
msgstr ""

#: ../../source/bitshares/user/security-cold.rst:19
msgid ""
"Note that this approach should not be considered **cold** as the private "
"keys has been installed in the browser first."
msgstr ""

#: ../../source/bitshares/user/security-cold.rst:23
msgid "Offline Webpage"
msgstr ""

#: ../../source/bitshares/user/security-cold.rst:25
msgid ""
"Alternatively, you can use a distinct web project that sole purpose is to"
" provide a public, private key pair. It can be downloaded from `github`_ "
"and should be opened in a browser on a non-connected device. The page "
"generated a random private key, derives the corresponding public key and "
"shows it in plain text and as QR code."
msgstr ""

#: ../../source/bitshares/user/security-cold.rst:31
msgid ""
"Either copy&paste the private key or print the resulting page because the"
" private key cannot be regenerated!"
msgstr ""

#: ../../source/bitshares/user/security-cold.rst:38
msgid "Updating Account Permissions"
msgstr ""

#: ../../source/bitshares/user/security-cold.rst:39
msgid ""
"As described in the :doc:`account permissions <account-permissions>` and "
":doc:`security permissions <security-permissions>` in theory, we now have"
" to update the accounts permissions."
msgstr ""

#: ../../source/bitshares/user/security-cold.rst:43
msgid ""
"To be able to update the accounts permissions we need the **owner key**. "
"Hence, if your owner key is compromised the active key can be updated and"
" you will be locked out of your funds."
msgstr ""

#: ../../source/bitshares/user/security-cold.rst:47
msgid ""
"Make sure to give it a weight that is higher than the threshold. If you "
"want that key to be the sole key for accessing the funds, remove all "
"other keys from the active permissions tabs."
msgstr ""

#: ../../source/bitshares/user/security-cold.rst:57
msgid "Importing Keys"
msgstr ""

#: ../../source/bitshares/user/security-cold.rst:59
msgid ""
"Private keys can be reimported using the wallet management console. Then "
"funds and account features will be available to your wallet again:"
msgstr ""

#: ../../source/bitshares/user/security-hot.rst:3
msgid "Securing \"Hot\" Wallets"
msgstr ""

#: ../../source/bitshares/user/security-hot.rst:5
msgid "*Proposed Transactions under construction*"
msgstr ""

#: ../../source/bitshares/user/security-permissions.rst:3
msgid "Permission Model"
msgstr ""

#: ../../source/bitshares/user/security-permissions.rst:5
msgid "We distinguish between two kinds of permissions:"
msgstr ""

#: ../../source/bitshares/user/security-permissions.rst:10
msgid ""
"Both are implemented using `Elliptic Curve Cryptography`_ (ECC) with "
"*public* and *private* keys. :doc:`Read more <account-permissions>`."
msgstr ""

#: ../../source/bitshares/user/security-permissions.rst:15
msgid "You can find the keys for your permissions in the ``Permissions`` tab:"
msgstr ""

#: ../../source/bitshares/user/shareholder.rst:3
msgid "Shareholder"
msgstr ""

#: ../../source/bitshares/user/shareholder.rst:5
msgid ""
"In contrast to most crypto-currencies, BitShares does not claim to be a "
"currency but rather an *equity* in a decentral autonomous company (DAC). "
"As a result, the market valuation of BitShares is free floating and may "
"be as volatile as any other equity (e.g. of traditional companies)."
msgstr ""

#: ../../source/bitshares/user/shareholder.rst:10
msgid ""
"Every entity hold the core token (BTS) is considered a shareholder of the"
" BitShares decentralized company."
msgstr ""

#: ../../source/bitshares/user/shareholder.rst:13
msgid ""
"Nonetheless, BTS tokens can be used as *collateral* in financial smart "
"contracts such as market pegged assets and thus back every existing "
"smartcoin such as the bitUSD."
msgstr ""

#: ../../source/bitshares/user/shareholder.rst:17
msgid "Furthermore, each BTS can be used to cast a vote for"
msgstr ""

#: ../../source/bitshares/user/shareholder.rst:19
msgid ":doc:`Block Producers <witness>`"
msgstr ""

#: ../../source/bitshares/user/shareholder.rst:20
msgid ":doc:`Commmittee members <committee>`"
msgstr ""

#: ../../source/bitshares/user/shareholder.rst:22
msgid "and can thus participate in the corporate governance."
msgstr ""

#: ../../source/bitshares/user/transactions.rst:3
msgid "Transactions and Operations"
msgstr ""

#: ../../source/bitshares/user/transactions.rst:5
msgid ""
"BitShares 2.0 implements a variety of operations besides simple transfers"
" of funds. For instance in order to operate the :doc:`decentralized "
"exchange <dex>` we need support for buy, sell orders as well. The "
"technical documentation about all operation types can be found in our "
"`doxygen docs`_."
msgstr ""

#: ../../source/bitshares/user/transactions-confidential.rst:3
msgid "Confidential Transactions"
msgstr ""

#: ../../source/bitshares/user/transactions-confidential.rst:5
msgid ""
"A confidential transfer is one that hides the amount being sent. "
"Confidential transfers are also referred to as blinded transfers. It "
"makes use of Oleg Andreev's `blind signatures`_."
msgstr ""

#: ../../source/bitshares/user/transactions-confidential.rst:9
msgid ""
"When privacy is important no account is ever used twice and it is "
"impossible for any third party to identify how money is moving through "
"blockchain analysis alone."
msgstr ""

#: ../../source/bitshares/user/transactions-confidential.rst:13
msgid ""
"Confindential transactions are currently only available using the :doc"
":`cli-wallet <../../integration/apps/cliwallet>`. A step-by-step guide "
"can be found in the :doc:`tutorials <../tutorials/confidential-"
"transactions>`"
msgstr ""

#: ../../source/bitshares/user/transactions-proposed.rst:3
msgid "Proposed Transactions"
msgstr ""

#: ../../source/bitshares/user/transactions-proposed.rst:5
msgid ""
"The Graphene technology allows users to *propose* a transaction on the "
"blockchain which requires approval of multiple accounts in order to "
"execute."
msgstr ""

#: ../../source/bitshares/user/transactions-proposed.rst:8
msgid ""
"At any time, a proposal can be approved in a single transaction if "
"sufficient signatures are available (see ``proposal_update_operation`` as"
" constructed by the ``approve_proposal`` call), as long as the authority "
"tree to approve the proposal does not exceed the maximum recursion depth."
" In practice, however, it is easier to use proposals to acquire all "
"approvals, as this leverages on-chain notification of all relevant "
"parties that their approval is required. Off-chain multi-signature "
"approval requires some off-chain mechanism for acquiring several "
"signatures on a single transaction.  This off-chain synchronization can "
"be avoided using proposals."
msgstr ""

#: ../../source/bitshares/user/transactions-proposed.rst:18
msgid ""
"The user proposes a transaction, then signatory accounts use add or "
"remove their approvals from this operation. When a sufficient number of "
"approvals have been granted, the operations in the proposal are "
"evaluated. Even if the transaction fails, the proposal will be kept until"
" the expiration time, at which point, if sufficient approval is granted, "
"the transaction will be evaluated a final time. This allows transactions "
"which will not execute successfully until a given time to still be "
"executed through the proposal mechanism. The first time the proposed "
"transaction succeeds, the proposal will be regarded as resolved, and all "
"future updates will be invalid."
msgstr ""

#: ../../source/bitshares/user/transactions-proposed.rst:28
msgid ""
"The proposal system allows for arbitrarily complex or recursively nested "
"authorities. If a recursive authority (i.e. an authority which requires "
"approval of 'nested' authorities on other accounts) is required for a "
"proposal, then a second proposal can be used to grant the nested "
"authority's approval. That is, a second proposal can be created which, "
"when sufficiently approved, adds the approval of a nested authority to "
"the first proposal. This multiple-proposal scheme can be used to acquire "
"approval for an arbitrarily deep authority tree."
msgstr ""

#: ../../source/bitshares/user/transactions-proposed.rst:66
msgid ""
"Note that each account in the figure can carry a **different weight**. An"
" example of how to setup your permissions accordingly is given in :doc"
":`account-permissions`."
msgstr ""

#: ../../source/bitshares/user/transactions-transfers.rst:3
msgid "Simple Transfers"
msgstr ""

#: ../../source/bitshares/user/transactions-transfers.rst:5
msgid ""
"A simple transfer operation moves funds from user ``A`` to user ``B``. In"
" contrast to most other blockchain-based financial networks, we do "
"**not** use *addresses* or *public keys* for transfers."
msgstr ""

#: ../../source/bitshares/user/transactions-transfers.rst:14
msgid "Instead, all that is needed for transfers is:"
msgstr ""

#: ../../source/bitshares/user/transactions-transfers.rst:16
msgid "source account name"
msgstr ""

#: ../../source/bitshares/user/transactions-transfers.rst:17
msgid "destination account name"
msgstr ""

#: ../../source/bitshares/user/transactions-transfers.rst:18
msgid "funds (amount and asset)"
msgstr ""

#: ../../source/bitshares/user/transactions-transfers.rst:19
msgid "memo (optional)"
msgstr ""

#: ../../source/bitshares/user/transactions-transfers.rst:21
msgid "A transfer may contain a memo with arbitrary text."
msgstr ""

#: ../../source/bitshares/user/transactions-transfers.rst:23
msgid ""
"The ``memo`` is **encrypted** by default can only be decrypted by the "
"participants of the transfer! The transfer fee depends on the length of "
"the memo!"
msgstr ""

#: ../../source/bitshares/user/uia.rst:3
msgid "User Issued Assets"
msgstr ""

#: ../../source/bitshares/user/uia.rst:5
msgid ""
"BitShares allows individuals and companies to create and issue their own "
"tokens for anything they can imagine. The potential use cases for so "
"called user-issued assets (UIA) are innumerable. On the one hand, UIAs "
"can be used as simple event tickets deposited on the customers mobile "
"phone to pass the entrance of a concert. On the other hand, they can be "
"used for crowd funding, ownership tracking or even to sell equity of a "
"company in form of stock."
msgstr ""

#: ../../source/bitshares/user/uia.rst:13
msgid ""
"All you need to do is click in order to create a new UIA is a few mouse "
"clicks, define your preferred parameters for your coin, such as supply, "
"precision, symbol, description and see your coin's birth after only a few"
" seconds. From that point on, you can issue some of your coins to "
"whomever you want, sell them and see them instantly **traded against any "
"other existing coin** on BitShares."
msgstr ""

#: ../../source/bitshares/user/uia.rst:20
msgid ""
"Unless you want some restriction. As the issuer, you have certain "
"privileges over your coin, for instance, you can allow trading only in "
"certain market pairs and define who actually is allowed to hold your coin"
" by using white- and blacklists. Of course, an issuer can opt-out of his "
"privileges indefinitely for the sake of trust and reputation."
msgstr ""

#: ../../source/bitshares/user/uia.rst:26
msgid ""
"As the owner of that coin, you don't need to take care of all the "
"technical details of blockchain technology, such as distributed consensus"
" algorithms, blockchain development or integration. You don't even need "
"to run any mining equipment or servers, at all."
msgstr ""

#: ../../source/bitshares/user/uia.rst:31
msgid "So what's the drawback?"
msgstr ""

#: ../../source/bitshares/user/uia.rst:33
msgid ""
"There is a drawback in this scenario, namely, a centralized issuance of "
"new tokens. To some extend, this could be managed by a hierarchical "
"multi-signature issuer account that prevents any single entity from "
"issuing new coins but instead requires a consensus among an arbitrary set"
" of people to agree on any changes to the coin."
msgstr ""

#: ../../source/bitshares/user/uia.rst:39
msgid ""
"Obviously, the regulations that apply to each kind of token vary widely "
"and are often different in every jurisdiction. Hence, BitShares comes "
"with tools that allow issuers to remain compliant with all applicable "
"regulations when issuing assets assuming regulators allow such assets in "
"the first place."
msgstr ""

#: ../../source/bitshares/user/uia.rst:46
msgid "Use Cases"
msgstr ""

#: ../../source/bitshares/user/uia.rst:48
msgid "Reward Points"
msgstr ""

#: ../../source/bitshares/user/uia.rst:49
msgid "Fan Credits"
msgstr ""

#: ../../source/bitshares/user/uia.rst:50
msgid "Flight Miles"
msgstr ""

#: ../../source/bitshares/user/uia.rst:51
msgid "Event Tickets"
msgstr ""

#: ../../source/bitshares/user/uia.rst:52
msgid "Digital Property"
msgstr ""

#: ../../source/bitshares/user/uia.rst:53
msgid "Crowd-Funding"
msgstr ""

#: ../../source/bitshares/user/uia.rst:54
msgid "Company Shares"
msgstr ""

#: ../../source/bitshares/user/vesting.rst:3
msgid "Vesting Balances"
msgstr ""

#: ../../source/bitshares/user/vesting.rst:5
msgid ""
"In BitShares 2, some balances are vesting over time. This feature has "
"been introduced initially in BitShares 1 when merging several blockchain "
"businesses into one blockchain."
msgstr ""

#: ../../source/bitshares/user/vesting.rst:9
msgid ""
"Now, we make even more use of this functionality in such that an accounts"
" income in form of"
msgstr ""

#: ../../source/bitshares/user/vesting.rst:12
msgid "worker pay,"
msgstr ""

#: ../../source/bitshares/user/vesting.rst:13
msgid "witness pay,"
msgstr ""

#: ../../source/bitshares/user/vesting.rst:14
msgid "the referral program, or"
msgstr ""

#: ../../source/bitshares/user/vesting.rst:15
msgid "cashback"
msgstr ""

#: ../../source/bitshares/user/vesting.rst:17
msgid "is vesting over several days with different strategies."
msgstr ""

#: ../../source/bitshares/user/vesting.rst:19
msgid ""
"For instance, a worker can define for how long he would like his pay to "
"vest to encourage shareholders to vote for him due to no imminent "
"additional sell pressure from the worker."
msgstr ""

#: ../../source/bitshares/user/vesting.rst:24
msgid "Strategies"
msgstr ""

#: ../../source/bitshares/user/vesting.rst:27
msgid "CCD / Coin Days Destroyed"
msgstr ""

#: ../../source/bitshares/user/vesting.rst:29
msgid ""
"The economic effect of this vesting policy is to require a certain amount"
" of \"interest\" to accrue before the full balance may be withdrawn. "
"Interest accrues as coindays (balance * length held). If some of the "
"balance is withdrawn, the remaining balance must be held longer."
msgstr ""

#: ../../source/bitshares/user/vesting.rst:35
msgid "Linear Vesting with Cliff"
msgstr ""

#: ../../source/bitshares/user/vesting.rst:37
msgid ""
"This vesting balance type is used to mimic traditional stock vesting "
"contracts where each day a certain amount vests until it is fully "
"matured."
msgstr ""

#: ../../source/bitshares/user/voting.rst:5
msgid ""
"If you hold some ``BTS`` tokens, you are considered a shareholder of the "
"BitShares business and thus have a say in where it should be heading in "
"future. As a shareholder you can cast a vote for three different entities"
" within the network:"
msgstr ""

#: ../../source/bitshares/user/voting.rst:10
msgid ""
"**Block producers** bundle transactions into blocks and sign them with "
"their signing key. These so called *witnesses* keep the blockchain alive "
"by producing one block every few seconds and get paid by newly issued BTS"
" shares similar to Bitcoin. Their second job is to produce reliable and "
"accurate price feeds for the smartcoins."
msgstr ""

#: ../../source/bitshares/user/voting.rst:15
msgid ""
"**Committee Members** :doc:`govern the blockchain and the business "
"parameters <governance>`, and define the transaction fees."
msgstr ""

#: ../../source/bitshares/user/voting.rst:17
msgid ""
"**Workers** are freelancers or businesses that provide a non-profitable "
"service for the BitShares ecosystem. Essentially, they apply for a job in"
" the ecosystem by providing actual work and get paid accordingly (if the "
"shareholders approve)."
msgstr ""

#: ../../source/bitshares/user/voting.rst:22
msgid ""
"Since voting might be a too time-consuming task for many shareholders, "
"BitShares offers them a way to delegate their voting power to so called "
"**proxies**. The sole purpose of proxies is to follow the ecosystem and "
"be vote according to their *followers*. This is similar to many political"
" votes where citizens vote for representatives which vote on their "
"behalf."
msgstr ""

#: ../../source/bitshares/user/voting.rst:29
msgid ""
"Voting itself is **very simply** with the User interface and requires "
"only a few clicks which are described in the :doc:`voting tutorials "
"<../tutorials/voting>`"
msgstr ""

#: ../../source/bitshares/user/witness.rst:5
msgid ""
"In BitShares, the witnesses' job is to collect transactions, bundle them "
"into a block, sign the block and broadcast it to the network. They "
"essentially are the block producers for the underlying consensus "
"mechanism."
msgstr ""

#: ../../source/bitshares/user/witness.rst:9
msgid ""
"For each successfully constructed block, a witness is payed in shares "
"that are taken from the limited reserves pool at a rate that is defined "
"by the shareholders by means of approval voting."
msgstr ""

#: ../../source/bitshares/user/witness.rst:13
msgid ""
"How to run a witness is described in a :doc:`separated tutorial "
"<../tutorials/witness-howto>`."
msgstr ""

#: ../../source/bitshares/user/worker.rst:3
msgid "Workers / Budget Items"
msgstr ""

#: ../../source/bitshares/user/worker.rst:5
msgid ""
"Thanks to the funds stored in the reserve pool, BitShares can offer to "
"not only pay for its own development and protocol improvement but also "
"support and encourage growth of an ecosystem."
msgstr ""

#: ../../source/bitshares/user/worker.rst:10
msgid "Payouts"
msgstr ""

#: ../../source/bitshares/user/worker.rst:12
msgid ""
"A blockchain parameter (defined by shareholders through the committee) "
"defines the daily available budget. No more than that can be paid at any "
"time to all workers combined."
msgstr ""

#: ../../source/bitshares/user/worker.rst:16
msgid "The daily budget is distributed as follows:"
msgstr ""

#: ../../source/bitshares/user/worker.rst:18
#: ../../source/bitshares/user/worker.rst:55
msgid "The available budget is taken out of reserves pool."
msgstr ""

#: ../../source/bitshares/user/worker.rst:19
msgid ""
"The budget items are sorted according to their approval rate (``Pro - "
"Con``) in a descending order."
msgstr ""

#: ../../source/bitshares/user/worker.rst:20
#: ../../source/bitshares/user/worker.rst:57
msgid ""
"Starting at the worker with the highest approval rate, the requested "
"daily pay is payed until the daily budget is depleted."
msgstr ""

#: ../../source/bitshares/user/worker.rst:21
#: ../../source/bitshares/user/worker.rst:58
msgid ""
"The worker with the least approval rate that was paid may receive less "
"than the requested pay"
msgstr ""

#: ../../source/bitshares/user/worker.rst:23
#: ../../source/bitshares/user/worker.rst:60
msgid ""
"Hence, in order to be successfully funded by the BitShares ecosystem, the"
" shareholder approval for your budget item needs to be highly ranked."
msgstr ""

#: ../../source/bitshares/user/worker.rst:26
#: ../../source/bitshares/user/worker.rst:63
msgid ""
"Since the payments for workers from the non-liquid reserve pool result in"
" an increased supply of BTS, these payments are vesting over a period of "
"time defined by shareholders."
msgstr ""

#: ../../source/bitshares/user/worker.rst:31
msgid "Working for BitShares"
msgstr ""

#: ../../source/bitshares/user/worker.rst:33
msgid "In order to be get paid by BitShares, a proposal containing"
msgstr ""

#: ../../source/bitshares/user/worker.rst:35
msgid "the date of work begin,"
msgstr ""

#: ../../source/bitshares/user/worker.rst:36
msgid "the date of work end,"
msgstr ""

#: ../../source/bitshares/user/worker.rst:37
msgid "a daily pay (denoted in BTS),"
msgstr ""

#: ../../source/bitshares/user/worker.rst:38
msgid "the worker's name, and"
msgstr ""

#: ../../source/bitshares/user/worker.rst:39
msgid "an internet address."
msgstr ""

#: ../../source/bitshares/user/worker.rst:41
msgid "has to be publish on the blockchain and approved by shareholders."
msgstr ""

#: ../../source/bitshares/user/worker.rst:43
msgid "A worker can also choose on of the following properties:"
msgstr ""

#: ../../source/bitshares/user/worker.rst:45
msgid "**vesting**: *pay to the worker's account*"
msgstr ""

#: ../../source/bitshares/user/worker.rst:46
msgid ""
"**refund**:  *return the pay back to the reserve pool to be used for "
"future projects*"
msgstr ""

#: ../../source/bitshares/user/worker.rst:47
msgid ""
"**burn**:    *destroys the pay thus reducing share supply, equivalent to "
"share buy-back of a company stock.*"
msgstr ""

#: ../../source/bitshares/user/worker.rst:49
msgid ""
"A blockchain parameter (defined by shareholders through the committee) "
"defines the daily available budget. No more than that can be paid at any "
"time to all so called *workers* combined."
msgstr ""

#: ../../source/bitshares/user/worker.rst:53
msgid "The daily budget is distributed follows:"
msgstr ""

#: ../../source/bitshares/user/worker.rst:56
msgid ""
"The budget items are sorted according to their approval rate in a "
"descending order."
msgstr ""

#: ../../source/bitshares/user/worker.rst:67
msgid ""
"A description on how to create your own worker can be found in the "
":doc:`tutorials <../tutorials/worker-create>`."
msgstr ""

#: ../../source/bitshares/user/worker.rst:71
msgid "Pseudo Workers"
msgstr ""

#: ../../source/bitshares/user/worker.rst:73
msgid ""
"Three types of pseudo workers exist that are not primarily used to for "
"salary."
msgstr ""

#: ../../source/bitshares/user/worker.rst:76
msgid "Polling Workers"
msgstr ""

#: ../../source/bitshares/user/worker.rst:78
msgid ""
"A worker proposal can be used to poll the shareholders for an opinion. "
"Those workers usually have no or very small pay. Additionally, they come "
"with a *proposal*, *recommendation* or other topic on which shareholders "
"can publish a binary opinion (pro, or contra)."
msgstr ""

#: ../../source/bitshares/user/worker.rst:84
msgid "Refund Worker"
msgstr ""

#: ../../source/bitshares/user/worker.rst:86
msgid ""
"This worker is used to set an approval limit for worker proposals and "
"their payment by simply refunding his payment/salary to the reserve pool."
" If its amount of daily pay is as large as the daily available funds, and"
" the worker has highest approval among all worker proposals, all funds "
"will be returned to the reserves and no one will be payed. If, however, "
"an other worker proposal has more votes than the refund worker, the "
"proposal gets paid its salary, and the rest is return."
msgstr ""

#: ../../source/bitshares/user/worker.rst:95
msgid "Burn Worker"
msgstr ""

#: ../../source/bitshares/user/worker.rst:97
msgid ""
"This type of worker is similar to the *Refund Worker* above but **burns**"
" his pay."
msgstr ""

#: ../../source/bitshares/user/you-should-know.rst:3
msgid "Things you should know"
msgstr ""

#: ../../source/bitshares/user/you-should-know.rst:6
msgid "The Starters"
msgstr ""

#: ../../source/bitshares/user/you-should-know.rst:8
msgid ""
"**Security and Control over accounts and funds**: No one can access your "
"funds unless you let them, intentionally, or unintentionally. With the "
"power to be independent from 3rd parties, comes the responsibility to "
":doc:`protect what belongs to you <security>`."
msgstr ""

#: ../../source/bitshares/user/you-should-know.rst:13
msgid ""
"**Can interact with people directly**: With BitShares it becomes possible"
" to interact with people directly without needing to go through a "
"middleman.  Hence, BitShares is a platform of free speech that implements"
" a payment platform and exchange for digital goods."
msgstr ""

#: ../../source/bitshares/user/you-should-know.rst:18
msgid ""
"**Fast**: Transactions in BitShares are verified and irrevocable in only "
"a few seconds time."
msgstr ""

#: ../../source/bitshares/user/you-should-know.rst:22
msgid ""
"**Decentralized Committee**: Decisions that can effect the BitShares "
"ecosystem are made using a on-chain committee voted upon by shareholders."
"  Hence, no single entity can change the deal retroactively."
msgstr ""

#: ../../source/bitshares/user/you-should-know.rst:27
msgid ""
"**Flexible**: Protocol upgrades (formerly known as *hard forks*) can be "
"implemented and executed to improve the BitShares business over time and "
"allow to react on external influences quickly."
msgstr ""

#: ../../source/bitshares/user/you-should-know.rst:33
msgid "The Investors"
msgstr ""

#: ../../source/bitshares/user/you-should-know.rst:35
msgid ""
"**Become Shareholder**: If you buy ``BTS`` either from a partner exchange"
" or from the DEX, you become a shareholder of the BitShares decentralized"
" business and as such can take a cut of its profits and participate in "
"votes for future directions."
msgstr ""

#: ../../source/bitshares/user/you-should-know.rst:40
msgid ""
"**Expenses**: Vote for expenses of the business and hire workers to do "
"important tasks for BitShares."
msgstr ""

#: ../../source/bitshares/user/you-should-know.rst:44
msgid ""
"**Leaders**: Participate in political decisions by voting for committee "
"members that represent your views!"
msgstr ""

#: ../../source/bitshares/user/you-should-know.rst:48
msgid ""
"**Protocol upgrades**: Improve the technology, integrate new features and"
" adept legal and regulative changes by voting for upgrades."
msgstr ""

#: ../../source/bitshares/user/you-should-know.rst:52
msgid ""
"**Decision making for a proft**: Take part in decision finding about fair"
" pricing models for transaction fees to a) increase growth and b) make "
"BitShares profitable for its shareholders"
msgstr ""

#: ../../source/bitshares/user/you-should-know.rst:57
msgid "Technological Aspects"
msgstr ""

#: ../../source/bitshares/whatis.rst:13
msgid ""
"Bitcoin is the first fully autonomous system to utilize distributed "
"consensus technology to create a more efficient and reliable global "
"payment network. The core innovation of Bitcoin is the Blockchain, a "
"cryptographically secured public ledger of all accounts on the Bitcoin "
"network that facilitates the transfer of value from one individual "
"directly to another. For the first time in history, financial "
"transactions over the internet no longer require a middle man to act as a"
" trustworthy, confidential fiduciary."
msgstr ""

#: ../../source/bitshares/whatis.rst:20
msgid ""
"BitShares looks to extend the innovation of the blockchain to all "
"industries that rely upon the internet to provide their services.  "
"Whether its banking, stock exchanges, lotteries, voting, music, auctions "
"or many others, a digital public ledger allows for the creation of "
"distributed autonomous companies (or DACs) that provide better quality "
"services at a fraction of the cost incurred by their more traditional, "
"centralized counterparts. The advent of DACs ushers in a new paradigm in "
"organizational structure in which companies can run without any human "
"management and under the control of an incorruptible set of business "
"rules. These rules are encoded in publicly auditable open source software"
" distributed across the computers of the companies' shareholders, who "
"effortlessly secure the company from arbitrary control."
msgstr ""

#: ../../source/bitshares/whatis.rst:31
msgid ""
"BitShares does for business what bitcoin did for money by utilizing "
"distributed consensus technology to create companies that are inherently "
"global, transparent, trustworthy, efficient and most importantly "
"profitable."
msgstr ""

#: ../../source/bitshares/whatis.rst:35
msgid ""
"BitShares has went through many changes and has done its best to stay on "
"top of blockchain technology. Towards the end of 2014 some of the DACs "
"were merged and the X was dropped from \"BitShares X\" to become simply "
"BitShares (BTS)."
msgstr ""

#: ../../source/bitshares/whatis.rst:42
msgid ""
"BitShares X was first introduced in a White Paper titled \"A Peer-to-Peer"
" Polymorphic Digital Asset Exchange\" by Daniel Larimer, Charles "
"Hoskinson, and Stan Larimer. Shortly after authoring the White Paper, the"
" project was founded by Daniel Larimer of Invictus Innovations after "
"receiving funding from Chinese venture capital firm BitFund.PE. Charles "
"Hoskinson, founder of the Bitcoin Education Project, was a co-founder of "
"the original project but has since left the team. The BitShares X project"
" received a lot of attention in August 2013 when it was covered by "
"CoinDesk and subsequently announced to the the BitcoinTalk forums on "
"August 22nd 2013 as a project announcement. The project generated a good "
"amount of buzz around the proposal, though the original scope and "
"timelines have since modified."
msgstr ""

#: ../../source/bitshares/whatis.rst:54
msgid "Consensus Technology"
msgstr ""

#: ../../source/bitshares/whatis.rst:56
msgid ""
"Consensus is the mechanism by which organizations of people decide upon "
"unitary rational action. While not considered technology in the "
"traditional since, consensus \"technology\" is the basis of democratic "
"governance and the coordination of free market activity first coined by "
"Adam Smith as the \"Invisible Hand.\" The process of consensus decision-"
"making allows for all participants to consent upon a resolution of action"
" even if not the favored course of action for each individual "
"participant. Bitcoin was the first system to integrate a fully "
"decentralized consensus method with the modern technology of the internet"
" and peer-to-peer networks in order to more efficiently facilitate the "
"transfer of value through electronic communication. The proof-of-work "
"structure that secures and maintains the Bitcoin network is one manner of"
" organizing individuals who do not necessarily trust one another to act "
"in the best interest of all participants of the network.  The BitShares "
"ecosystem employs Delegated Proof of Stake in order to find efficient "
"solutions to distributed consensus decision making."
msgstr ""

#: ../../source/bitshares/whatis.rst:71
msgid "Distributed Autonomous Companies"
msgstr ""

#: ../../source/bitshares/whatis.rst:73
msgid ""
"Distributed Autonomous Companies (DAC) run without any human involvement "
"under the control of an incorruptible set of business rules. (That's why "
"they must be distributed and autonomous.) These rules are implemented as "
"publicly auditable open source software distributed across the computers "
"of their stakeholders. You become a stakeholder by buying \"stock\" in "
"the company or being paid in that stock to provide services for the "
"company. This stock may entitle you to a share of its \"profits\", "
"participation in its growth, and/or a say in how it is run."
msgstr ""

#: ../../source/bitshares/whatis.rst:82
msgid "Community"
msgstr ""

#: ../../source/bitshares/whatis.rst:84
msgid ""
"The BitShares community is a global network of people who all share the "
"same goal of creating and participating in various Distributed Autonomous"
" Companies. The community mainly revolves around the BitShares Team and "
"third parties who use Graphene (the toolkit that makes BitShares "
"possible) to create their own Distributed Autonomous Companies. The main "
"discussions in the BitShares community takes place openly at "
"`BitSharestalk.org <http://bitsharestalk.org>`_."
msgstr ""

